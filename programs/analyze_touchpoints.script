# this file creates the function for analyzing touchpoints
# define pi
pi = 3.1415926535
# initialize a lift column extension needed of 0.0
global liftcolumnzneeded = 0.0

# this is the main entry point for calculations.
# it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
# specifically for Down, Over, then Around (DOtA)
# specifically for right-sided boxes (vertical weld on right side of edge)
def main_calculate_right(p11, p12, p21, p22, p3, p13, p23, chamferover):
    struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
    list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
    struct2 = calculate_DOtA_points_right(struct1, list1, chamferover)
    validity = check_validity_right(struct1, struct2)
    return struct2
end

# this is the main entry point for calculations.
# it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
# specifically for Down, Over, then Around (DOtA)
# specifically for left-sided boxes (vertical weld on left side of edge)
def main_calculate_left(p11, p12, p21, p22, p3, p13, p23, chamferover):
    struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
    list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
    struct2 = calculate_DOtA_points_left(struct1, list1, chamferover)
    validity = check_validity_left(struct1, struct2)
    return struct2
end

# this is the main entry point for calculations, for Floor Corner Extended.
# it takes in the 7 touchpoints, analyzes the shape of the box. 
# takes in the user defined point for the top of the weld (tcp_pose_top) and then calculates path points 
# loopingly tries to calculate the extension along the sidewall that fulfills get_inverse_kin_has_solution() and provides the farthest extension possible
# returns the pathpoints
# specifically for Down, Over, then Around (DOtA)
# specifically for right-sided boxes (vertical weld on right side of edge)
def main_calculate_right_extended(p11, p12, p21, p22, p3, p13, p23, chamferover, chamferup, tcp_pose_top):
    struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
    list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
    struct2 = calculate_DOtA_points_right_extended(struct1, list1, chamferover, chamferup, tcp_pose_top)
    struct3 = check_validity_right(struct1, struct2)
    return struct3
end

# this is the main entry point for calculations, for Floor Corner Extended.
# it takes in the 7 touchpoints, analyzes the shape of the box. 
# takes in the user defined point for the top of the weld (tcp_pose_top) and then calculates path points 
# loopingly tries to calculate the extension along the sidewall that fulfills get_inverse_kin_has_solution() and provides the farthest extension possible
# returns the pathpoints
# specifically for Down, Over, then Around (DOtA)
# specifically for left-sided boxes (vertical weld on left side of edge)
def main_calculate_left_extended(p11, p12, p21, p22, p3, p13, p23, chamferover, chamferup, tcp_pose_top):
    struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
    list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
    struct2 = calculate_DOtA_points_left_extended(struct1, list1, chamferover, chamferup, tcp_pose_top)
    struct3 = check_validity_left(struct1, struct2)
    return struct3
end

# it takes 5 arguments as points
# it returns a struct containing: (pointintersect, pointapproach1, pointapproach2, point1, point2, point3, point4, point5, pointreturn1, heading1, heading2, heading3, path2r1, path2r2, path2l1, path2l2)
# specifically for Around then Up (AtU)
def analyze_touchpoints(p11, p12, p21, p22, p3):
  # FIND THE INTERSECTION
  # comment get the z
  zcoord=p3[2]

  # get the raw points from the first line
  l1p1x=p11[0]
  l1p1y=p11[1]
  l1p2x=p12[0]
  l1p2y=p12[1]

  # equate the first line in 2d space
  ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)

  # b = y - mx
  bl1 = l1p1y - ml1 * l1p1x

  # get the raw points from the second line
  l2p1x=p21[0]
  l2p1y=p21[1]
  l2p2x=p22[0]
  l2p2y=p22[1]

  # equate the second line in 2d space
  ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)

  # b = y - mx
  bl2 = l2p1y - ml2 * l2p1x


  # find the intersection of the two lines
  # m1x+b1 = m2x+b2
  # m1x - m2x = b2 - b1
  # x = (b2-b1) / (m1-m2)
  xintersect = (bl2-bl1) / (ml1-ml2)
  yintersect = ml1 * xintersect + bl1

  #FIND THE VECTORS
  #define a vector from the intersection to the second point on the first line
  l1delxfull = l1p2x - xintersect
  l1delyfull = l1p2y - yintersect

  l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)

  l1delxunit = l1delxfull / l1delmag
  l1delyunit = l1delyfull / l1delmag
  
  #define a vector from the intersection to the second point on the second line
  l2delxfull = l2p2x - xintersect
  l2delyfull = l2p2y - yintersect

  l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)

  l2delxunit = l2delxfull / l2delmag
  l2delyunit = l2delyfull / l2delmag
  
  # FIND THE FOUR POINTS ON THE LINES
  # find locations 8 inches away from  intersect point
  # CONST
  welddistance = 8
  roundoverdistance = 0.05
  zup = .375
  # inches
  wd = welddistance * 25.4 / 1000
  rod = roundoverdistance * 25.4 / 1000
  zup = zup * 25.4 / 1000

  # now we have the unit vector. extend the weld distance from the intersection
  x = xintersect + l1delxunit * wd
  y = yintersect + l1delyunit * wd
  z = zcoord + zup

  point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now

  x = xintersect + l1delxunit * rod
  y = yintersect + l1delyunit * rod

  point2 = p[x,y,z,1.570796,0,0]

  # now we have the unit vector. extend the weld distance from the intersection
  x = xintersect + l2delxunit * wd
  y = yintersect + l2delyunit * wd

  point5 = p[x,y,z,0,-1.570796,0]

  x = xintersect + l2delxunit * rod
  y = yintersect + l2delyunit * rod

  point4 = p[x,y,z,0,-1.570796,0]

  #DEFINE APPROACH POINTS
  pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
  pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
  pointapproach2 = p[point1[0], point1[1]+0.1, point1[2], point1[3], point1[4], point1[5]]
  pointreturn1 = p[point5[0]+0.1, point5[1], point5[2], point5[3], point5[4], point5[5]]
  
  #FIND HEADINGS
  #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
  headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
  headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
  # find halfway heading
  heading2 = (headingvector1 + headingvector2)/2
  # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
  heading1 = headingvector1 + pi/2
  heading3 = headingvector2 - pi/2
  
  #FIND POINT 3
  #see if we have to / can find point 3
  findpoint3 = True
  if roundoverdistance == 0:
    findpoint3 = False
  end
  if findpoint3:
    # i need to find the point3 such that the arc from p2 to p3 to p4 is tangent to p1-p2 and p4-p5. making this a smooth path will be good
    # the direction of movement is from pointintersect in the direction of heading2
    # how much movement though? this will depend on whether it is actually a 90 degree angle or not. 
    # first, find the perpendicular lines through points 2 and 4
    perp2 = find_perpendicular_line(ml1, point2[0], point2[1])
    perp4 = find_perpendicular_line(ml2, point4[0], point4[1])
    # next, find the intersection of those two lines
    perpintersect = find_intersection(perp2[0], perp2[1], perp4[0], perp4[1])
    radiusofcircle = distance_between(perpintersect[0], perpintersect[1], 0, point2[0], point2[1], 0)
    # find a vector the direction of heading2
    uvx = cos(heading2)
    uvy = sin(heading2)
    # compute point3. pass in negative radius because the direction is into the tank but we want to move from the intersection out to the rounded edge
    point3coords = add_vectordistance_to_point(perpintersect[0], perpintersect[1], z, uvx, uvy, 0, -1 * radiusofcircle)
    point3 = p[point3coords[0], point3coords[1], point3coords[2], 0, 0, 0]
  end
  
  #APPLY ACTUAL RXRYRZ TO POINTS
  # convert the headings to rxryrz and insert those values into the relevant points
  rxryrz = convert_heading_to_axang(heading1)
  rx = rxryrz[0]
  ry = rxryrz[1]
  rz = rxryrz[2]
  pointapproach1 = p[pointapproach1[0], pointapproach1[1], pointapproach1[2], rx, ry, rz]
  pointapproach2 = p[pointapproach2[0], pointapproach2[1], pointapproach2[2], rx, ry, rz]
  point1 = p[point1[0], point1[1], point1[2], rx, ry, rz]
  point2 = p[point2[0], point2[1], point2[2], rx, ry, rz]
  rxryrz = convert_heading_to_axang(heading2)
  rx = rxryrz[0]
  ry = rxryrz[1]
  rz = rxryrz[2]
  if findpoint3:
    point3 = p[point3[0], point3[1], point3[2], rx, ry, rz]
  else:
    point3 = point2
  end
  rxryrz = convert_heading_to_axang(heading3)
  rx = rxryrz[0]
  ry = rxryrz[1]
  rz = rxryrz[2]
  point4 = p[point4[0], point4[1], point4[2], rx, ry, rz]
  point5 = p[point5[0], point5[1], point5[2], rx, ry, rz]
  pointreturn1 = p[pointreturn1[0], pointreturn1[1], pointreturn1[2], rx, ry, rz]
  
  #find path2 (the part that goes up)
  four_vertical_points = find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, zup, wd, heading1, heading3)
  path2r1 = four_vertical_points[0]
  path2r2 = four_vertical_points[1]
  path2l1 = four_vertical_points[2]
  path2l2 = four_vertical_points[3]
  
  #RETURN STRUCT
  ret = struct(pointintersect=pointintersect, pointapproach1=pointapproach1, pointapproach2=pointapproach2, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, pointreturn1=pointreturn1, heading1=heading1, heading2=heading2, heading3=heading3, path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
  return ret
end

# based on a Corner Homing 45 Cover pattern of touchpoints
# this uses those touchpoints to create a representation of the corner in 3d robot space. 
def analyze_touchpoints_only_cover(p11, p12, p21, p3):
    zcoord=p3[2]
    
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]

    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)

    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x

    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]

    # equate the second line in 2d space
    # ml2 = opposite reciprocal of ml1 (because they are perpendicular) (assume perpendicular to make calculation of weldpath much easier)
    ml2 = -1 / ml1

    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x

    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1

    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]

    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect

    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)

    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p1x - xintersect
    l2delyfull = l2p1y - yintersect

    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)

    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag

    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. this line is from pointintersect and along each edge of the corner
    heading1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    heading3 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (heading1 + heading3)/2

    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, heading1=heading1, heading2=heading2, heading3=heading3, l1delxunit=l1delxunit, l1delyunit=l1delyunit, l2delxunit=l2delxunit, l2delyunit=l2delyunit)
    return ret
end

# it takes 5 arguments as points
# it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
def analyze_touchpoints_only(p11, p12, p21, p22, p3):
  # FIND THE INTERSECTION
  # comment get the z
  zcoord=p3[2]

  # get the raw points from the first line
  l1p1x=p11[0]
  l1p1y=p11[1]
  l1p2x=p12[0]
  l1p2y=p12[1]

  # equate the first line in 2d space
  ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)

  # b = y - mx
  bl1 = l1p1y - ml1 * l1p1x

  # get the raw points from the second line
  l2p1x=p21[0]
  l2p1y=p21[1]
  l2p2x=p22[0]
  l2p2y=p22[1]

  # equate the second line in 2d space
  ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)

  # b = y - mx
  bl2 = l2p1y - ml2 * l2p1x


  # find the intersection of the two lines
  # m1x+b1 = m2x+b2
  # m1x - m2x = b2 - b1
  # x = (b2-b1) / (m1-m2)
  xintersect = (bl2-bl1) / (ml1-ml2)
  yintersect = ml1 * xintersect + bl1
  
  pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
  
  #FIND THE VECTORS
  #define a vector from the intersection to the second point on the first line
  l1delxfull = l1p2x - xintersect
  l1delyfull = l1p2y - yintersect

  l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)

  l1delxunit = l1delxfull / l1delmag
  l1delyunit = l1delyfull / l1delmag
  
  #define a vector from the intersection to the second point on the second line
  l2delxfull = l2p2x - xintersect
  l2delyfull = l2p2y - yintersect

  l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)

  l2delxunit = l2delxfull / l2delmag
  l2delyunit = l2delyfull / l2delmag
  
  #FIND HEADINGS
  #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
  headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
  headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
  # find halfway heading
  heading2 = (headingvector1 + headingvector2)/2
  # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
  heading1 = headingvector1 + pi/2
  heading3 = headingvector2 - pi/2
  
  #RETURN STRUCT
  ret = struct(pointintersect=pointintersect, heading1=heading1, heading2=heading2, heading3=heading3, l1delxunit=l1delxunit, l1delyunit=l1delyunit, l2delxunit=l2delxunit, l2delyunit=l2delyunit)
  return ret
end

# given a struct from analyze_touchpoints_only(), calculate the points 
# for right, for non-extended
def calculate_DOtA_points_right(struct1, listleans, chamferover):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance1 = 8 # vertical weld distance
    welddistance2 = 6 # first path second leg
    welddistance3 = 8 # second path second leg
    zup = .375
    # inches
    wd1 = welddistance1 * 25.4 / 1000
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    zup = zup * 25.4 / 1000
    chamferovermm =  chamferover * 25.4 / 1000
    
    x = pointintersect[0] + l1delxunit * chamferovermm
    y = pointintersect[1] + l1delyunit * chamferovermm
    z = pointintersect[2] + zup
    
    #apply actual rxryrz to points
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_preheatdown(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
    point2 = p[x, y, z, rx, ry, rz]
    
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_ccw(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    point4 = p[x, y, z, rx, ry, rz]
    x = x + l1delxunit * wd2
    y = y + l1delyunit * wd2
    point5 = p[x, y, z, rx, ry, rz]
    
    # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = pointintersect[0] + l1delxunit * chamferovermm
    y = pointintersect[1] + l1delyunit * chamferovermm
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point_1 = p[x, y, z, rx, ry, rz]

    x = pointintersect[0] + l1delxunit * rod
    y = pointintersect[1] + l1delyunit * rod
    point_2 = p[x, y, z, rx, ry, rz]

    # now we have the unit vector. extend the weld distance from the intersection
    x = pointintersect[0] + l2delxunit * wd3
    y = pointintersect[1] + l2delyunit * wd3
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point_5 = p[x, y, z, rx, ry, rz]

    x = pointintersect[0] + l2delxunit * rod
    y = pointintersect[1] + l2delyunit * rod
    point_4 = p[x, y, z, rx, ry, rz]
    
    #FIND POINT 3
    # by calling analyze_touchpoints()
    atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
    point_3 = atret[5]
    
    
    struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
    return struct2
end

# given a struct from analyze_touchpoints_only(), calculate the points 
# for left, for non-extended
def calculate_DOtA_points_left(struct1, listleans, chamferover):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance1 = 8 # vertical weld distance
    welddistance2 = 6 # first path second leg
    welddistance3 = 8 # second path second leg
    zup = .375
    # inches
    wd1 = welddistance1 * 25.4 / 1000
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    zup = zup * 25.4 / 1000
    chamferovermm =  chamferover * 25.4 / 1000
    
    x = pointintersect[0] + l2delxunit * chamferovermm
    y = pointintersect[1] + l2delyunit * chamferovermm
    z = pointintersect[2] + zup
    
    #apply actual rxryrz to points
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_preheatdown(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz]
    point2 = p[x, y, z, rx, ry, rz]
    
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    point4 = p[x, y, z, rx, ry, rz]
    x = x + l2delxunit * wd2
    y = y + l2delyunit * wd2
    point5 = p[x, y, z, rx, ry, rz]
    
    # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = pointintersect[0] + l2delxunit * chamferovermm
    y = pointintersect[1] + l2delyunit * chamferovermm
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_ccw(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point_1 = p[x, y, z, rx, ry, rz]
    
    x = pointintersect[0] + l2delxunit * rod
    y = pointintersect[1] + l2delyunit * rod
    point_2 = p[x, y, z, rx, ry, rz]
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = pointintersect[0] + l1delxunit * wd3
    y = pointintersect[1] + l1delyunit * wd3
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_ccw(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point_5 = p[x, y, z, rx, ry, rz]
    
    x = pointintersect[0] + l1delxunit * rod
    y = pointintersect[1] + l1delyunit * rod
    point_4 = p[x, y, z, rx, ry, rz]
    
    #FIND POINT 3
    # by calling analyze_touchpoints()
    atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
    point_3 = atret[5]
    #point 3 will not have the correct rxryrz though because now the gun needs to be face up. 
    rxryrz = convert_heading_to_axang_ccw(heading2)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point_3 = p[point_3[0], point_3[1], point_3[2], rx, ry, rz]
    
    struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
    return struct2
end

# given a struct from analyze_touchpoints_only(), calculate the points 
# for right, for extended
def calculate_DOtA_points_right_extended(struct1, listleans, chamferover, chamferup, tcp_pose_top):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    # welddistance1 = 8 # vertical weld distance
    welddistance2 = 6 # first path second leg
    welddistance3 = 8 # second path second leg
    
    # inches
    # wd1 = welddistance1 * 25.4 / 1000
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    zup = chamferup * 25.4 / 1000
    chamferovermm =  chamferover * 25.4 / 1000
    
    # weld distance is the distance that it will weld. this will make it start at the z height that the user specified
    wd1 = tcp_pose_top[2] - pointintersect[2] - zup 
    
    x = pointintersect[0] + l1delxunit * chamferovermm
    y = pointintersect[1] + l1delyunit * chamferovermm
    z = pointintersect[2] + zup
    
    #apply actual rxryrz to points
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_preheatdown(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
    point2 = p[x, y, z, rx, ry, rz]
    
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_ccw(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    point4 = p[x, y, z, rx, ry, rz]
    x = x + l1delxunit * wd2
    y = y + l1delyunit * wd2
    point5 = p[x, y, z, rx, ry, rz]
    
    # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = pointintersect[0] + l1delxunit * chamferovermm
    y = pointintersect[1] + l1delyunit * chamferovermm
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point_1 = p[x, y, z, rx, ry, rz]

    x = pointintersect[0] + l1delxunit * rod
    y = pointintersect[1] + l1delyunit * rod
    point_2 = p[x, y, z, rx, ry, rz]

    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    x = pointintersect[0] + l2delxunit * rod
    y = pointintersect[1] + l2delyunit * rod
    point_4 = p[x, y, z, rx, ry, rz]
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = pointintersect[0] + l2delxunit * wd3
    y = pointintersect[1] + l2delyunit * wd3
    point_5 = p[x, y, z, rx, ry, rz]
    
    #FIND POINT 3
    # by calling analyze_touchpoints()
    atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
    atret5 = atret[5]
    point_3 = p[atret5[0], atret5[1], z, atret5[3], atret5[4], atret5[5]]
    
    
    struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
    return struct2
end

# given a struct from analyze_touchpoints_only(), calculate the points 
# for left, for extended
def calculate_DOtA_points_left_extended(struct1, listleans, chamferover, chamferup, tcp_pose_top):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    # welddistance1 = 8 # vertical weld distance
    welddistance2 = 6 # first path second leg
    welddistance3 = 8 # second path second leg
    
    # inches
    # wd1 = welddistance1 * 25.4 / 1000
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    zup = chamferup * 25.4 / 1000
    chamferovermm =  chamferover * 25.4 / 1000
    
    # weld distance is the distance that it will weld. this will make it start at the z height that the user specified
    wd1 = tcp_pose_top[2] - pointintersect[2] - zup 
    
    x = pointintersect[0] + l2delxunit * chamferovermm
    y = pointintersect[1] + l2delyunit * chamferovermm
    z = pointintersect[2] + zup
    
    #apply actual rxryrz to points
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_preheatdown(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz]
    point2 = p[x, y, z, rx, ry, rz]
    
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    point4 = p[x, y, z, rx, ry, rz]
    x = x + l2delxunit * wd2
    y = y + l2delyunit * wd2
    point5 = p[x, y, z, rx, ry, rz]
    
    # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = pointintersect[0] + l2delxunit * chamferovermm
    y = pointintersect[1] + l2delyunit * chamferovermm
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_ccw(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point_1 = p[x, y, z, rx, ry, rz]
    
    x = pointintersect[0] + l2delxunit * rod
    y = pointintersect[1] + l2delyunit * rod
    point_2 = p[x, y, z, rx, ry, rz]
    
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang_ccw(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    x = pointintersect[0] + l1delxunit * rod
    y = pointintersect[1] + l1delyunit * rod
    point_4 = p[x, y, z, rx, ry, rz]
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = pointintersect[0] + l1delxunit * wd3
    y = pointintersect[1] + l1delyunit * wd3
    point_5 = p[x, y, z, rx, ry, rz]
    
    #FIND POINT 3
    # by calling analyze_touchpoints()
    atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
    point_3 = atret[5]
    #point 3 will not have the correct rxryrz though because now the gun needs to be face up 
    rxryrz = convert_heading_to_axang_ccw(heading2)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point_3 = p[point_3[0], point_3[1], z, rx, ry, rz]
    
    struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
    return struct2
end

# this function analyzes the vertical points
# calculates the slope of the edge in question
# specifically, for each inch up in the z direction, what is the change in x and change in y direction
# returns a list of [nx, ny]
def analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3):
    # first, find the equations of the planes from the 6 points
    plane1 = findplane(p11, p12, p13)
    plane2 = findplane(p21, p22, p23)
    # Find the Direction Vector of the Line: The direction vector d of the line of intersection can be found by taking the cross product of the normal vectors of each plane (a, b, and c)
    nx = plane1[1]*plane2[2] - plane1[2]*plane2[1]
    ny = plane1[2]*plane2[0] - plane1[0]*plane2[2]
    nz = plane1[0]*plane2[1] - plane1[1]*plane2[0]
    # normalize the vector so the z length is 1
    multiplier = 1 / nz
    nx = nx * multiplier
    ny = ny * multiplier
    nz = nz * multiplier # should become equal to 1
    ret = [nx, ny]
    return ret
end

# given 3 points, this finds the plane and its equation
# rereturns ax + by + cz + d = 0 in a list of [a, b, c, d]
def findplane(p11, p12, p13):
    # extract coordinates
    x1 = p11[0]
    y1 = p11[1]
    z1 = p11[2]
    x2 = p12[0]
    y2 = p12[1]
    z2 = p12[2]
    x3 = p13[0]
    y3 = p13[1]
    z3 = p13[2]
    # create vectors from the points
    v1x = x2-x1
    v1y = y2-y1
    v1z = z2-z1
    v2x = x3-x1
    v2y = y3-y1
    v2z = z3-z1
    #calculate the normal vector using the cross product
    nx = v1y*v2z - v1z*v2y # i component
    ny = v1z*v2x - v1x*v2z # j component
    nz = v1x*v2y - v1y*v2x # k component
    # calculate d in the plane equation
    d = -1 * (nx*x1 + ny*y1 + nz*z1)
    ret = [nx, ny, nz, d]
    return ret
end

# given a heading, (ccw from +x axis), find the mx+b slope
# fails if exactly vertical
def get_slope_from_heading(heading):
    return tan(heading)
end



# this function finds the points (and rxryrz) of the 2 points (start and end) of vertical weld section
def find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, offset, wd, heading1, heading3):
  
  # find right side stuff
  # find the point in 3d space that is .375 up and .375 over
  x = pointintersect[0] + l1delxunit * offset
  y = pointintersect[1] + l1delyunit * offset
  z = pointintersect[2] + offset
  # find rxryrz
  rxryrz = convert_heading_to_axang_preheatup(heading1)
  rx = rxryrz[0]
  ry = rxryrz[1]
  rz = rxryrz[2]
  path2r1 = p[x, y, z, rx, ry, rz]
  path2r2 = p[x, y, z + wd, rx, ry, rz]
  
  # find left side 
  # find the point in 3d space that is .375 up and .375 over
  x = pointintersect[0] + l2delxunit * offset
  y = pointintersect[1] + l2delyunit * offset
  z = pointintersect[2] + offset
  # find rxryrz
  rxryrz = convert_heading_to_axang_preheatup(heading3)
  rx = rxryrz[0]
  ry = rxryrz[1]
  rz = rxryrz[2]
  path2l1 = p[x, y, z, rx, ry, rz]
  path2l2 = p[x, y, z + wd, rx, ry, rz]
  
  ret = struct(path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
  return ret  
end

# this function converts a unit vector to its heading angle ccw from x+ axis
# takes uvx and uvy
# returns heading in radians
def convert_uv_to_heading(uvx, uvy):
  baseang = atan(uvy/uvx)
  if uvx < 0:
    ang = baseang + pi
  elif uvy < 0:
    ang = baseang + pi * 2
  else:
    ang = baseang
  end
  return ang
end

# this function finds the equation of a line, perpendicular to a given line, and going through a given point
# takes 3 arguments: m (the original line's slope), x (point's x coord), y (point's y coord). the b of the original line is not needed
# returns a list of [m,b] (the slope and intercept of the new line)
def find_perpendicular_line(origm, x, y):
  m = (1/origm) * -1
  b = y - m*x
  ret = [m, b]
  return ret
end

# this function finds the intersection point between two lines in the xy plane
# takes 4 arguments: m1, b1, m2, b2
# returns a list of [x,y] (the point of intersection)
def find_intersection(m1, b1, m2, b2):
  # m1x+b1 = m2x+b2
  # m1x - m2x = b2 - b1
  # x = (b2-b1) / (m1-m2)
  x = (b2-b1) / (m1-m2)
  y = m1 * x + b1
  ret = [x, y]
  return ret
end

# this function finds the distance between 2 points in 3d space
# it takes 6 arguments: x1, y1, z1, x2, y2, z2
# it returns a distance
def distance_between(x1, y1, z1, x2, y2, z2):
  distsquared = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)
  dist = sqrt(distsquared)
  return dist
end

# this function takes a point, a unit vector, and a distance, and adds the distance to the point in the direction of the unit vector (3d space)
# it returns a point as a list of coordinates
def add_vectordistance_to_point(xi, yi, zi, uvx, uvy, uvz, delta):
  xf = xi + uvx * delta
  yf = yi + uvy * delta
  zf = zi + uvz * delta
  ret = [xf, yf, zf]
  return ret
end

# this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
# this will point the gun in this heading with the bottom side of the gun facing up. 
# the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
def convert_heading_to_axang(heading):
 axisxraw = -1 * sin(heading)
 axisyraw = cos(heading) + 1
 axiszraw = sin(heading)

 magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)

 axisxunit = axisxraw / magnitude
 axisyunit = axisyraw / magnitude
 axiszunit = axiszraw / magnitude

 angle = acos( (cos(heading) - 1) / 2 )

 rxout = axisxunit * angle
 ryout = axisyunit * angle
 rzout = axiszunit * angle
 
 return [rxout, ryout, rzout]
end

# this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
# this will point the gun in this heading with the preheat side of the gun tip facing up. Used for welding in a vertical path. 
# the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
def convert_heading_to_axang_preheatup(heading):
 axisxraw = -sin(heading) + 1
 axisyraw = cos(heading)
 axiszraw = cos(heading)
 
 magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
 
 axisxunit = axisxraw / magnitude
 axisyunit = axisyraw / magnitude
 axiszunit = axiszraw / magnitude
 
 angle = acos( (-sin(heading) - 1) / 2 )
 
 rxout = axisxunit * angle
 ryout = axisyunit * angle
 rzout = axiszunit * angle
 
 return [rxout, ryout, rzout]
end

# this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
# this will point the gun in this heading with the preheat side of the gun tip facing down. Used for welding in a vertical path downwards. 
# the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
def convert_heading_to_axang_preheatdown(heading):
 axisxraw = -sin(heading) - 1
 axisyraw = cos(heading)
 axiszraw = -cos(heading)
 
 magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
 
 axisxunit = axisxraw / magnitude
 axisyunit = axisyraw / magnitude
 axiszunit = axiszraw / magnitude
 
 angle = acos( (sin(heading) - 1) / 2 )
 
 rxout = axisxunit * angle
 ryout = axisyunit * angle
 rzout = axiszunit * angle
 
 return [rxout, ryout, rzout]
end

# this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
# this will point the gun in this heading with the preheat side of the gun tip facing right. Used for welding counterclockwise around the box. 
# the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
def convert_heading_to_axang_ccw(heading):
 axisxraw = -sin(heading) 
 axisyraw = cos(heading) - 1
 axiszraw = -sin(heading) 
 
 magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
 
 axisxunit = axisxraw / magnitude
 axisyunit = axisyraw / magnitude
 axiszunit = axiszraw / magnitude
 
 angle = acos( (-cos(heading) - 1) / 2 )
 
 rxout = axisxunit * angle
 ryout = axisyunit * angle
 rzout = axiszunit * angle
 
 return [rxout, ryout, rzout]
end

# this function is for getting the points along the path of the corner homing 45
# point0 is the point where they touched
def get_corner_homing_45_pathpoints(point0, pointtop = p[0,0,0,0,0,0]):
  p0x = point0[0]
  p0y = point0[1]
  p0z = point0[2]
  p0rx = point0[3]
  p0ry = point0[4]
  p0rz = point0[5]
  
  #constants
  #distances of how far away from point the touchpoints are
  d0 = 0.10 # how far from the box to retreat and approach
  d1 = 0.03 # first distance from init point
  d2 = 0.15 # second distance from init point
  d3 = 0.125 #vertical distance from first point
  sqrt2 = 0.707106781 # 1/sqrt(2) , the inverse of the sqrt(2)
  
  ph1 = p[p0x + d0, p0y, p0z + d1, p0rx, p0ry, p0rz] #approach point for turn
  
  ph2 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y+d0*0.5+sqrt2*d1, p0z+d1, 1.446, -0.8, -0.733]
  ph3 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y+d0*0.5+sqrt2*d2, p0z+d1, 1.446, -0.8, -0.733]
  ph4 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y-d0*0.5-sqrt2*d1, p0z+d1, 0.626, -1.993, -1.813]
  ph5 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y-d0*0.5-sqrt2*d2, p0z+d1, 0.626, -1.993, -1.813]
  
  # go back to ph1
  ph6 = p[p0x + d0, p0y, p0z -0.05, 0, 0, 0] # approach point for under turn
  # moveL from ph1 to ph6
  ph7 = p[p0x-d1, p0y, p0z-0.05, 0, 0, 0]
  
  # add the vertical touch points
  if pointtop[2] == 0:
    ph2up = p[ph2[0], ph2[1], ph2[2]+d3, ph2[3], ph2[4], ph2[5]]
    ph4up = p[ph4[0], ph4[1], ph4[2]+d3, ph4[3], ph4[4], ph4[5]]
  elif pointtop[2] > p0z + 0.914: # 0.914m = 36 inches
    ph2up = p[ph2[0], ph2[1], p0z + 0.914, ph2[3], ph2[4], ph2[5]]
    ph4up = p[ph4[0], ph4[1], p0z + 0.914, ph4[3], ph4[4], ph4[5]]
  else:
    ph2up = p[ph2[0], ph2[1], pointtop[2], ph2[3], ph2[4], ph2[5]]
    ph4up = p[ph4[0], ph4[1], pointtop[2], ph4[3], ph4[4], ph4[5]]
  end
  ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4, ph5=ph5, ph6=ph6, ph7=ph7, ph2up=ph2up, ph4up=ph4up)
  is_robot_at_reachable_spot(point0, ret)
  return ret
end

def get_corner_homing_45_pathpoints_cover(point0):
    p0x = point0[0]
    p0y = point0[1]
    p0z = point0[2]
    p0rx = point0[3]
    p0ry = point0[4]
    p0rz = point0[5]
    
    #constants
    #distances of how far away from point the touchpoints are
    d0 = 0.10 # how far from the box to retreat and approach
    d1 = 0.04 # first distance from init point
    d2 = 0.15 # second distance from init point
    d4 = 0.06 # top distance from init point - larger to avoid large chamfers
    sqrt2 = 0.707106781 # 1/sqrt(2) , the inverse of the sqrt(2)
    
    ph1 = p[p0x + d0, p0y, p0z + d1, p0rx, p0ry, p0rz] #approach point for turn
    
    ph2 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y+d0*0.5+sqrt2*d1, p0z-d1, 1.446, -0.8, -0.733]
    ph3 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y+d0*0.5+sqrt2*d2, p0z-d1, 1.446, -0.8, -0.733]
    ph4 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y-d0*0.5-sqrt2*d1, p0z-d1, 0.626, -1.993, -1.813]
    #ph5 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y-d0*0.5-sqrt2*d2, p0z-d1, 0.626, -1.993, -1.813]
    
    # approach point for top
    ph6 = p[p0x + d0 * 2, p0y, p0z+0.05, 0.138, 3.104, -0.072] # double the d0 in the x direction because it was getting VERY close to smacking the corner. 
    
    # top point
    ph7 = p[p0x - d4, p0y, p0z+0.05, 0.138, 3.104, -0.072]
    
    ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4, ph5=ph4, ph6=ph6, ph7=ph7)
    is_robot_at_reachable_spot(point0, ret)
    return ret
end

# this function determines the starting touchpoints for homing in on cover straight geometry
# includes two side points to determine the sidewall plane (assumed vertical) and two top points to determine top plane (assumed perpendicular to sidewall plane)
def get_straight_homing_pathpoints_cover(leftpoint, rightpoint):
    # get the teach position points
    lpx = leftpoint[0]
    lpy = leftpoint[1]
    lpz = leftpoint[2]
    rpx = rightpoint[0]
    rpy = rightpoint[1]
    rpz = rightpoint[2]
    
    # specify the distances from
    d0 = 0.05 # how far from the planes to approach from
    d1 = 0.03 # how far from the teach point to home from, when there is no chamfer to avoid
    d2 = 0.06 # how far from the teach point to home from, when there is a chamfer to avoid
    
    # calculate the points (the rxryrz are given in pretend_welder_top coordinates. they match pure rotations of 90 degrees)
    ph1 = p[lpx + d0, lpy, lpz - d1, 1.209, -1.209, -1.209] # left side approach
    ph2 = p[rpx + d0, rpy, rpz - d1, 1.209, -1.209, -1.209] # right side approach
    ph3 = p[lpx - d2, lpy, lpz + d0, 2.221, -2.221, 0] # left top approach
    ph4 = p[rpx - d2, rpy, rpz + d0, 2.221, -2.221, 0] # right top approach
    
    ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4)
    is_robot_at_reachable_spot(leftpoint, ret)
    return ret
end

# this function determines the starting touchpoints for homing in on cover straight geometry
# includes two side points to determine the sidewall plane (assumed vertical) and two top points to determine top plane (assumed perpendicular to sidewall plane)
def get_straight_homing_pathpoints_floor(leftpoint, rightpoint):
    # get the teach position points
    lpx = leftpoint[0]
    lpy = leftpoint[1]
    lpz = leftpoint[2]
    rpx = rightpoint[0]
    rpy = rightpoint[1]
    rpz = rightpoint[2]
    
    # specify the distances from
    d0 = 0.05 # how far from the planes to approach from
    d1 = 0.03 # how far from the teach point to home from, when there is no chamfer to avoid
    d2 = 0.06 # how far from the teach point to home from, when there is a chamfer to avoid
    
    # calculate the points
    ph1 = p[lpx + d0, lpy, lpz + d2, 1.209, -1.209, -1.209] # left side approach
    ph2 = p[rpx + d0, rpy, rpz + d2, 1.209, -1.209, -1.209] # right side approach
    ph3 = p[lpx - d1, lpy, lpz - d0, 0, 0, 0] # left bottom approach
    ph4 = p[rpx - d1, rpy, rpz - d0, 0, 0, 0] # right bottom approach
    
    ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4)
    is_robot_at_reachable_spot(leftpoint, ret)
    return ret
end

# this function checks whether the touchpoints are reachable AKA is the robot positioned in the right spot
# if everything looks good, it continues.
# if it detects a problem, it infinite loops a popup
def is_robot_at_reachable_spot(point0, struct_touchpoints):
  # first, check whether the corner is too low to the ground that the bottom homing will hit the ground (z < -400)
  lc_height = get_lift_column_height_condensed()
  # total height = zeroed lift column height (41.25 inches) (1.04775 m) plus lift column height plus robot relative height
  totalheight = 1.04775 + lc_height + point0[2]
  if totalheight < 1.04775 - 0.400:
    # bad
    popuptext = "Tank Corner is too low to the ground. Collisions will occur. Stop Program and raise tank. "
    # infinite loop
    while 1==1:
      popup(popuptext, title="Robot Positioning Warning",blocking=True)
    end
  end
  
  
  
  # next, check whether the touchpoints are reachable
  allvalid = check_structofpoints_validity(struct_touchpoints)
  if not allvalid:
      
    # then unreachable
    # generate message
    listproblems = ""
    listnames = ["ph1", "ph2", "ph3", "ph4", "ph5", "ph6", "ph7", "ph2up", "ph4up"]
    i = 0
    structlength = 9
    while i < structlength:
      curr = struct_touchpoints[i]
      valid = get_inverse_kin_has_solution(curr)
      if not valid:
        listproblems = listproblems + listnames[i]
      end
      i = i + 1
    end
    # display
    popuptext = "Robot is too far from tank corner. Cannot reach some necessary positions. Stop Program and move robot closer. " + listproblems
    # infinite loop
    while 1==1:
      popup(popuptext, title="Robot Positioning Warning",blocking=True)
    end
  end
  
end

# this function takes a struct of points as an argument, and checks whether every point in the list is reachable using get_inverse_kin_has_solution()
# this function does NOT check for weird twists or joint limits
# inputstruct must contain only points
# it returns true if all points are valid. it returns false if any points are valid
# a list of length 0 indicates that all points are valid
def check_structofpoints_validity(inputstruct):
  # next, check whether the touchpoints are reachable
  structlength = length(inputstruct)
  i = 0
  allvalid = True
  while i < structlength:
    curr = inputstruct[i]
    valid = get_inverse_kin_has_solution(curr)
    if not valid:
      return False
    end
    i = i + 1
  end
  return True
end

# checks the validity of all points during a left weld
# takes 2 arguments: struct1 (struct1[0] has to contain pointintersect) and struct2 (contains all the points (9) of the weld path)
def check_validity_left(struct1, struct2):
  #first, check whether robot is too close
  pointintersect = struct1[0]
  # next, check if the corner is too close to the robot to do a left around weld (complex but approximately X > -1300)
  # if y < 0, then x < -1300. if y < 480, then y > (1300+x)*8. if y > 480, then y > (1235+x)*4 + 500
  toocloseleftweld = False
  if pointintersect[1] < 0:
    if pointintersect[0] > -1.300:
      toocloseleftweld = True
    end
  elif pointintersect[1] < 0.480:
    if pointintersect[1] < (1.300 + pointintersect[0])*8:
      toocloseleftweld = True
    end
  else:
    if pointintersect[1] < (1.235 + pointintersect[0])*4 + 0.500:
      toocloseleftweld = True
    end
  end
  if toocloseleftweld:
    # bad
    popuptext = "Robot is too close to tank corner. Collisions may occur. Stop Program and move robot farther. "
    # infinite loop
    while 1==1:
      popup(popuptext, title="Robot Positioning Warning",blocking=True)
    end
  end
  
  #next, check whether all the points in the weldpath are valid
  structlength = 9
  i = 0
  allvalid = True
  listproblems = ""
  listnames = ["point1", "point2", "point4", "point5", "point_1", "point_2", "point_3", "point_4", "point_5"]
  while i < structlength:
    curr = struct2[i]
    valid = get_inverse_kin_has_solution(curr)
    if not valid:
      allvalid = False
      listproblems = listproblems + listnames[i]
    end
    i = i + 1
  end
  
  if not allvalid:
    # display
    popuptext = "Robot is too far from tank corner. Cannot reach some necessary positions. Stop Program and move robot closer. " + listproblems
    # infinite loop
    while 1==1:
      popup(popuptext, title="Robot Positioning Warning",blocking=True)
    end
  end
  
  # check whether the path involves weird turns or joint limits. currently just checks the first position
  p_prev = [-0.021118, -1.26292, 2.43578, 5.07088, -2.29912, 1.53362] #last point of left weld prerotate
  joints_1 = get_inverse_kin(struct2[0], p_prev) # struct2[0] is point1
  allGood = True
  i = 0
  structlength = 6
  while i < structlength:
    joint_curr = joints_1[i]
    # check for anything that exceeds joint limits
    degreesmax = 360 * pi / 180 
    if joint_curr > degreesmax or joint_curr < degreesmax * -1:
      allGood = False
    end
    # check for anything that is significantly different than the aligned approach. could indicate a twist is needed. we dont want that
    maxdifference = 150 * pi / 180 
    difference = joint_curr - p_prev[i]
    if difference > maxdifference or difference * -1 > maxdifference:
      allGood = False
    end
    i = i + 1
  end
  
  if not allGood:
    # call lift column extend function
    struct2 = floor_corner_lift_column_extend_left(struct2)
    
  end
  
  # return struct2 back
  return struct2
end

# checks the validity of all points during a right weld
def check_validity_right(struct1, struct2):
  # first, check whether the right pivot will bonk itself
  pointintersect = struct1[0]
  heading1 = struct1[1] # this is the direction that the welder will face when doing the right side of the box
  
  #first, check whether the heading is just too far offset
  # more than 15 degrees off of 45 is too much
  # normal heading is 216 degrees
  #201 degrees to 231 degrees
  heading1degrees = heading1 * 180 / pi
  if heading1degrees < 201 or heading1degrees > 231 :
    # then out of range
    popuptext = "Robot is not aligned at a 45 degree angle of corner (15 degree leeway). Collisions may occur. Stop Program and align robot. heading1degrees=" + str_cat("",heading1degrees)
    # infinite loop
    while 1==1:
      popup(popuptext, title="Robot Positioning Warning",blocking=True)
    end
  end
    
  #TODO: add the checks for whether x is too close, given the heading
  # add checks for whether x is too close, given the heading
  # different equations for whether heading offset > 5 degrees or less (inc. negative)
  headingoffset = heading1degrees - 216
  if headingoffset < 5:
    # then calculate a and b
    a = 0.4584 + -0.02369 * headingoffset
    b = (-1151.4 + 13.83 * headingoffset) / 1000
    # check whether x > a*y+b
    if pointintersect[0] > a * pointintersect[1] + b:
      # bad
      popuptext = "Robot is too close to tank corner or not at the right angle. Collisions may occur. Stop Program and align robot. " 
      # infinite loop
      while 1==1:
        popup(popuptext, title="Robot Positioning Warning",blocking=True)
      end
    end
  else:
    # headingoffset > 5 degrees
    if pointintersect[1] < 0:
      if pointintersect[0] > -1150.0 / 1000.0:
        #bad
        popuptext = "Robot is too close to tank corner. Collisions may occur. Stop Program and align robot. " 
        # infinite loop
        while 1==1:
          popup(popuptext, title="Robot Positioning Warning",blocking=True)
        end
      end
    else:
      # if x > .7736 y - 1101.9 then bad
      if pointintersect[0] > 0.7736 * pointintersect[1] - 1101.9 / 1000:
        popuptext = "Robot is too close to tank corner. Collisions may occur. Stop Program and align robot. " 
        # infinite loop
        while 1==1:
          popup(popuptext, title="Robot Positioning Warning",blocking=True)
        end
      end
    end
  end
  
  #next, check whether all the points in the weldpath are valid
  structlength = 9
  i = 0
  allvalid = True
  listproblems = ""
  listnames = ["point1", "point2", "point4", "point5", "point_1", "point_2", "point_3", "point_4", "point_5"]
  while i < structlength:
    curr = struct2[i]
    valid = get_inverse_kin_has_solution(curr)
    if not valid:
      allvalid = False
      listproblems = listproblems + listnames[i]
    end
    i = i + 1
  end
  
  if not allvalid:
    # display
    popuptext = "Robot is too far from tank corner. Cannot reach some necessary positions. Stop Program and move robot closer. " + listproblems
    # infinite loop
    while 1==1:
      popup(popuptext, title="Robot Positioning Warning",blocking=True)
    end
  end
  
  # check whether the path involves weird turns or joint limits. currently just checks the first position
  p_prev = [-1.13307, -1.48911, 2.84785, 4.92357, -4.89059, 1.57184] #last point of right weld prerotate
  joints_1 = get_inverse_kin(struct2[0], p_prev) # struct2[0] is point1
  allGood = True
  i = 0
  structlength = 6
  while i < structlength:
    joint_curr = joints_1[i]
    # check for anything that exceeds joint limits
    degreesmax = 360 * pi / 180 
    if joint_curr > degreesmax or joint_curr < degreesmax * -1:
      allGood = False
    end
    # check for anything that is significantly different than the aligned approach. could indicate a twist is needed. we dont want that
    maxdifference = 150 * pi / 180 
    difference = joint_curr - p_prev[i]
    if difference > maxdifference or difference * -1 > maxdifference:
      allGood = False
    end
    i = i + 1
  end
  
  if not allGood:
    struct2 = floor_corner_lift_column_extend_right(struct2)
  end
  
  # return struct2 back
  return struct2
end

def floor_corner_lift_column_extend_right(struct2):
  # we know that p1 cannot be accessed without a twist 
  # calculate the height needed to get to p1
  liftcolumnincrement = 2.0 # mm
  enoughHeightAdded = False
  liftColumnHeightTest = 0
  while not enoughHeightAdded:
    liftColumnHeightTest = liftColumnHeightTest + liftcolumnincrement
    # set the orig_joints for p1. p1 demo was joint angles of [-0.45, -31.79, 56.47, 333.06, -130.98, 87.87] (degrees)
    # which equals [-0.007853981633974475, -0.5548401692089968, 0.985587428601197, 5.812993606692308, -2.28603225426217, 1.5336208137274159]
    orig_joints = [-0.007853981633974475, -0.5548401692089968, 0.985587428601197, 5.812993606692308, -2.28603225426217, 1.5336208137274159]
    # get the modified point:
    origp1 = struct2[0]
    testp1 = p[origp1[0], origp1[1], origp1[2] - liftColumnHeightTest / 1000.0, origp1[3], origp1[4], origp1[5]]
    testpa1 = p[origp1[0]+0.05, origp1[1]+0.05, origp1[2] - liftColumnHeightTest / 1000, origp1[3], origp1[4], origp1[5]]
    enoughHeightAdded = can_pose_be_reached_without_twist(testp1, orig_joints) and can_pose_be_reached_without_twist(testpa1, orig_joints)
  end
  
  origp2 = struct2[1]
  testp2 = p[origp2[0], origp2[1], origp2[2] - liftColumnHeightTest / 1000.0, origp2[3], origp2[4], origp2[5]]
  origp4 = struct2[2]
  testp4 = p[origp4[0], origp4[1], origp4[2] - liftColumnHeightTest / 1000, origp4[3], origp4[4], origp4[5]]
  origp5 = struct2[3]
  testp5 = p[origp5[0], origp5[1], origp5[2] - liftColumnHeightTest / 1000, origp5[3], origp5[4], origp5[5]]
  
  
  
  liftcolumnzneeded = liftColumnHeightTest
  ret = struct(point1=testp1,point2=testp2,point4=testp4,point5=testp5,point_1=struct2[4],point_2=struct2[5],point_3=struct2[6],point_4=struct2[7],point_5=struct2[8])
  return ret
  
end

# this function gets called if you are doing a left floor corner extended, and the top is too high to reach (twists, etc.)
# this function takes the struct2 of weld points and modifies them (by subtracting from z) until the first weld point is reachable. 
# it determines the height that the lift column needs to raise to make the first point reachable
# it then checks whether that height will allow the other points to be reachable
# if its all good, it sets the global variable liftcolumnzneeded, modifies struct2's points, and returns struct2
# if its not all good, then it displays an error message popup. 
def floor_corner_lift_column_extend_left(struct2):
  # we know that p1 cannot be accessed without a twist 
  # calculate the height needed to get to p1
  liftcolumnincrement = 2 # mm
  enoughHeightAdded = False
  liftColumnHeightTest = 0
  while not enoughHeightAdded:
    liftColumnHeightTest = liftColumnHeightTest + liftcolumnincrement
    # set the orig_joints for p1. p1 demo was joint angles of [-0.45, -31.79, 56.47, 333.06, -130.98, 87.87] (degrees)
    # which equals [-0.007853981633974475, -0.5548401692089968, 0.985587428601197, 5.812993606692308, -2.28603225426217, 1.5336208137274159]
    orig_joints = [-0.007853981633974475, -0.5548401692089968, 0.985587428601197, 5.812993606692308, -2.28603225426217, 1.5336208137274159]
    # get the modified point:
    origp1 = struct2[0]
    testp1 = p[origp1[0], origp1[1], origp1[2] - liftColumnHeightTest / 1000, origp1[3], origp1[4], origp1[5]]
    enoughHeightAdded = can_pose_be_reached_without_twist(testp1, orig_joints)
  end
  
  # check whether the other 3 points are valid
  valid = True
  # get the modified point
  origp2 = struct2[1]
  testp2 = p[origp2[0], origp2[1], origp2[2] - liftColumnHeightTest / 1000, origp2[3], origp2[4], origp2[5]]
  # p2 demo was joint angles of [-0.45, -21.2, 56.98, 321.95, -130.97, 87.85] (degrees)
  # which equals [-0.007853981633974475, -0.3700098014227975, 0.9944886077863679, 5.619087526795738, -2.285857721336971, 1.5332717478770168]
  orig_joints = [-0.007853981633974475, -0.3700098014227975, 0.9944886077863679, 5.619087526795738, -2.285857721336971, 1.5332717478770168]
  valid = valid and can_pose_be_reached_without_twist(testp2, orig_joints)
  # get the modified point
  origp4 = struct2[2]
  testp4 = p[origp4[0], origp4[1], origp4[2] - liftColumnHeightTest / 1000, origp4[3], origp4[4], origp4[5]]
  # p4 demo was joint angles of [-8.62, -43.23, 99.53, 213.86, -89.19, 40.78] (degrees)
  # which equals [-0.15044738152191103, -0.7545058356371478, 1.7371262045099545, 3.7325611383150696, -1.556659159853741, 0.7117452689632868]
  orig_joints = [-0.15044738152191103, -0.7545058356371478, 1.7371262045099545, 3.7325611383150696, -1.556659159853741, 0.7117452689632868]
  valid = valid and can_pose_be_reached_without_twist(testp4, orig_joints)
  # get the modified point
  origp5 = struct2[3]
  testp5 = p[origp5[0], origp5[1], origp5[2] - liftColumnHeightTest / 1000, origp5[3], origp5[4], origp5[5]]
  # p5 demo was joint angles of [-0.59, -34.36, 77.71, 226.7, -89.18, 48.81] (degrees)
  # which equals [-0.010297442586766533, -0.5996951309852511, 1.356295361724792, 3.9566614142711405, -1.5564846269285415, 0.8518952078984314]
  orig_joints = [-0.010297442586766533, -0.5996951309852511, 1.356295361724792, 3.9566614142711405, -1.5564846269285415, 0.8518952078984314]
  valid = valid and can_pose_be_reached_without_twist(testp5, orig_joints)
  
  if not valid:
    # display
    popuptext = "Top of Weld is too high above robot. Cannot reach some necessary positions. Stop Program and try again with a lower top point. "
    # infinite loop
    while 1==1:
      popup(popuptext, title="Robot Positioning Warning",blocking=True)
    end
  else:
    liftcolumnzneeded = liftColumnHeightTest
    ret = struct(point1=testp1,point2=testp2,point4=testp4,point5=testp5,point_1=struct2[4],point_2=struct2[5],point_3=struct2[6],point_4=struct2[7],point_5=struct2[8])
    return ret
  end
end

# this function calculates whether a given pose can be reached, and if it can, whether it requires a wrist twist (from the seed joint angles)
# arguments are target pose (p[x,y,z,rx,ry,rz]) and orig_joints which is the 6 joint angles of a pose that is close by the target pose and has the desired joint angles
# returns true if the pose is valid and requires no twist. If pose is valid but requires a twist, returns false. If pose is invalid, returns false.
def can_pose_be_reached_without_twist(pose, orig_joints):
  # first, determine if the pose is valid
  valid = get_inverse_kin_has_solution(pose)
  if not valid:
    return False
  end
  valid = get_inverse_kin_has_solution(pose, orig_joints)
  if not valid:
    return False
  else:
    joints_1 = get_inverse_kin(pose, orig_joints)
    #iterate through the 6 joints
    allGood = True
    i = 0
    structlength = 6
    while i < structlength:
      joint_curr = joints_1[i]
      # check for anything that exceeds joint limits
      degreesmax = 360 * pi / 180 
      if joint_curr > degreesmax or joint_curr < degreesmax * -1:
        allGood = False
      end
      # check for anything that is significantly different than the aligned approach. could indicate a twist is needed. we dont want that
      maxdifference = 150 * pi / 180 
      difference = joint_curr - orig_joints[i]
      if difference > maxdifference or difference * -1 > maxdifference:
        allGood = False
      end
      i = i + 1
    end
    return allGood
  end
  
end

# this function sends a signal to turn extrusion on
def turn_extrusion_on():
  # flush the channel
  resp0 = send_serial_signal(["u", "r", "?"])
  # send the signal
  resp1 = send_serial_signal(["u", "R", "1"])
  # if resp <> "uR1"
  if resp1 != [252,82,49]:
    # turn off extrusion and heating. inform calvin
    resp2 = send_serial_signal(["u", "R", "0"])
    resp3 = send_serial_signal(["u", "H", "0"])
    popuptext = "Error code encountered while trying to start extrusion. Find Calvin. "
    while 1==1:
      popup(popuptext, title="Extrusion Error Code",blocking=True)
      popup(resp1, blocking=True)
    end
  end    
end

# this function sends a signal and receives a response
# signal is a list of 3 strings, 1 character each. first is u. second is the next character. third is final character
def send_serial_signal(signal):
  signal2char = signal[1]
  signal3char = signal[2]
  listsignal = [252, get_corr_number(signal2char), get_corr_number(signal3char)]
  resp1 = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", listsignal, True)
  return resp1
end

# this function converts a letter into its ascii number
def get_corr_number(letter):
  if letter == "A":
    return 65
  elif letter == "H":
    return 72
  elif letter == "R":
    return 82
  elif letter == "M":
    return 77
  elif letter == "E":
    return 69
  elif letter == "a":
    return 97
  elif letter == "b":
    return 98
  elif letter == "h":
    return 104
  elif letter == "r":
    return 114
  elif letter == "s":
    return 115
  elif letter == "m":
    return 109
  elif letter == "0":
    return 48
  elif letter == "1":
    return 49
  elif letter == "2":
    return 50
  elif letter == "3":
    return 51
  elif letter == "4":
    return 52
  elif letter == "5":
    return 53
  elif letter == "6":
    return 54
  elif letter == "7":
    return 55
  elif letter == "8":
    return 56
  elif letter == "9":
    return 57
  elif letter == "?":
    return 63
  end
end

# this function checks whether the welder is in the ready state. 
# to be called at the beginning of Main Program
def welder_state_ready():
  # flush the channel
  resp0 = send_serial_signal(["u", "s", "?"])
  # send the signal
  resp1 = send_serial_signal(["u", "s", "?"])
  # if resp1 == [252,115,49] (us1) then it is ready. otherwise, it is not
  if resp1 != [252,115,49]:
    popuptext = "Welder is not ready for extrusion. Follow the instructions to start heating welder. "
    while 1==1:
      popup(popuptext, title="Welder Not Ready",blocking=True)
    end
  end
  
end

def get_lift_column_height():
  # begin: URCap Program Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  #$ 5 "MachineLogic Get Position"
  while isVentionMovementBusyMachineMotion1==True:
    sleep(0.05)
  end
  if(isVentionMovementBusyMachineMotion1 == False):
    isVentionMovementBusyMachineMotion1 = True
    socket_send_string("estop/status;", "MachineMotion1")
    temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
    while(temp_estop_var_vention=="estop/status true"):
      if temp_estop_var_vention=="estop/status true":
        sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
      end
      socket_send_string("estop/status;", "MachineMotion1")
      temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
      if temp_estop_var_vention=="estop/status true":
        popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
      end
    end
  else:
    popup("resource is being used already: MachineMotion1")
    halt
  end
  socket_send_string("GET im_get_controller_pos_axis_1;", "MachineMotion1")
  temp_drive = socket_read_ascii_float(1, "MachineMotion1",timeout=15)
  global var_1 = temp_drive[1]
  isVentionMovementBusyMachineMotion1 = False
  sleep(0.03)
  # end: URCap Program Node
end

def get_lift_column_height_condensed():
  socket_send_string("GET im_get_controller_pos_axis_1;", "MachineMotion1")
  temp_drive = socket_read_ascii_float(1, "MachineMotion1",timeout=15)
  ret = temp_drive[1]
  return ret
end

# this function takes two rotation matrices, and multiplies them together, returning one matrix. 
# all matrices are in the form of a list.
# all matrix values have constant values (no variables)
def multiply_matrix(matrix1, matrix2):
    # retrieve values
    a11 = matrix1[0]
    a12 = matrix1[1]
    a13 = matrix1[2]
    a21 = matrix1[3]
    a22 = matrix1[4]
    a23 = matrix1[5]
    a31 = matrix1[6]
    a32 = matrix1[7]
    a33 = matrix1[8]
    b11 = matrix2[0]
    b12 = matrix2[1]
    b13 = matrix2[2]
    b21 = matrix2[3]
    b22 = matrix2[4]
    b23 = matrix2[5]
    b31 = matrix2[6]
    b32 = matrix2[7]
    b33 = matrix2[8]
    #calculate c values
    c11 = a11*b11 + a12*b21 + a13*b31
    c12 = a11*b12 + a12*b22 + a13*b32
    c13 = a11*b13 + a12*b23 + a13*b33
    c21 = a21*b11 + a22*b21 + a23*b31
    c22 = a21*b12 + a22*b22 + a23*b32
    c23 = a21*b13 + a22*b23 + a23*b33
    c31 = a31*b11 + a32*b21 + a33*b31
    c32 = a31*b12 + a32*b22 + a33*b32
    c33 = a31*b13 + a32*b23 + a33*b33
    # return resulting matrix
    ret = [c11, c12, c13, c21, c22, c23, c31, c32, c33]
    return ret
end

# this function converts a matrix to axis angle representations
# this matrix is usually a resulting matrix (result of matrix multiplication) in normal use, given as a list
# returns a list of [rx,ry,rz]
def convert_matrix_to_axang(matrix1):
    # retrieve values
    a11 = matrix1[0]
    a12 = matrix1[1]
    a13 = matrix1[2]
    a21 = matrix1[3]
    a22 = matrix1[4]
    a23 = matrix1[5]
    a31 = matrix1[6]
    a32 = matrix1[7]
    a33 = matrix1[8]
    
    # First Half: find the angle    
    # find the trace
    # using the formula: trace = a11 + a22 + a33
    trace = a11 + a22 + a33
    # find the angle using the formula: trace(matrix) = 1 + 2 cos(angle)
    angle = acos((trace - 1.0)/2.0)
    
    # Second Half: calculate the rotation axis
    axisxraw = a32 - a23
    axisyraw = a13 - a31
    axiszraw = a21 - a12
    # normalize axis
    magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    axisxunit = axisxraw / magnitude
    axisyunit = axisyraw / magnitude
    axiszunit = axiszraw / magnitude
    
    # combine axis and angle into rxryrz representation
    rxout = axisxunit * angle
    ryout = axisyunit * angle
    rzout = axiszunit * angle
    return [rxout, ryout, rzout]
end

# this function takes a rotation and calculates the corresponding rotation matrix
# input is (axis, direction, angle in radians)
# example is ("x", 1, pi/6) = a 30 degree turn around the x axis in the positive direction (right hand rule)
# returns a matrix (a list of 9 values)
def get_rotation_matrix_from_description(axis, direction, angle):
    # get the angle
    a = angle * direction
    # get the axis
    if axis == "x" or axis == "X":
        matrix = [1, 0, 0, 0, cos(a), -1 * sin(a), 0, sin(a), cos(a)]
        return matrix
    end
    if axis == "y" or axis == "Y":
        matrix = [cos(a), 0, sin(a), 0, 1, 0, -1*sin(a), 0, cos(a)]
        return matrix
    end
    if axis == "z" or axis == "Z":
        matrix = [cos(a), -1*sin(a), 0, sin(a), cos(a), 0, 0, 0, 1]
        return matrix
    end
    # bad
    popuptext = "Error in get_rotation_matrix_from_description. "
    # infinite loop
    while 1==1:
      popup(popuptext, title="Code Error",blocking=True)
    end
end

# this function takes in a struct of only points. it checks those points for validity. 
# if one of them is not valid, it throws a popup loop
def check_validity_only(struct2):
    validity = check_structofpoints_validity(struct2)
    if not validity:
    # bad
    popuptext = "Not all weldpoints are valid. "
    # infinite loop
    while 1==1:
      popup(popuptext, title="Position Error",blocking=True)
    end
    end
end

def main_calculate_step(p11, p12, p21, p22, p3, p13, p23, noncappingsidewallthick, cappingsidewallthick, tcp_pose_top, leftseam, leftobstacle):
    struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
    list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
    if leftseam:
        if leftobstacle:
            struct2 = calculate_LtUA_step_left(struct1, list1, cappingsidewallthick, noncappingsidewallthick, tcp_pose_top)
            heading1deg = struct1[1] * 180/pi
            if heading1deg < 210:
                popup("Robot is not aligned 45 degree angle from corner. Wrist pinch may bonk, Align robot 45 degrees from corner and try again. ", title="Alignment Error",blocking=True)
            end
        else:
            struct2 = calculate_DAaU_step_left(struct1, list1, cappingsidewallthick, noncappingsidewallthick, tcp_pose_top)
        end
    else:
        if leftobstacle:
            # error: this geometry is impossible for the robot to weld
            popup("Cannot weld a right seam, left obstacle step corner with robot. please weld by hand. ", title="Geometry Error",blocking=True)
        else:
            struct2 = calculate_DAaU_step_right(struct1, list1, noncappingsidewallthick, cappingsidewallthick, tcp_pose_top)
        end
    end
    validity = check_validity_only(struct2)
    return struct2
end

def main_calculate_step_left(p11, p12, p21, p22, p3, p13, p23, noncappingsidewallthick, cappingsidewallthick, tcp_pose_top):
    struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
    list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
    #struct2 = calculate_DOtA_points_right(struct1, list1, chamferover)
    #validity = check_validity_right(struct1, struct2)
    struct2 = calculate_DAaU_step_left(struct1, list1, cappingsidewallthick, noncappingsidewallthick, tcp_pose_top)
    validity = check_validity_only(struct2)
    return struct2
end

# analyze_touchpoints_only()
# it takes 5 arguments as points
# it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
#   FIND HEADINGS
#for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
# so, heading1 finds the angle (from the +x axis) to the position pointing perpendicularly into the box. 
# we need to be +90 degrees of all 3 headings. (but we can ignore heading 2)
def step_right_demo(struct1):
    pointintersect = struct1[0]
    x = pointintersect[0]
    y = pointintersect[1]
    z = pointintersect[2]
    heading1 = struct1[1]
    heading1adj1 = heading1 + pi/2 #(90 deg) (parrallel to edge not perpendicular into
    heading1adj2 = heading1adj1 - pi/2 #(90 deg) (from y+ not x+)
    # heading1 == heading1adj2. ok 
    m1 = get_rotation_matrix_from_description("z", 1, heading1)
    # at this point we would multiply matrices, but there is only one matrix
    rxryrz = convert_matrix_to_axang(m1)
    point_demo = p[x, y, z, rxryrz[0], rxryrz[1], rxryrz[2]]
    popup(point_demo)
    movej(point_demo, a=1.4, v=0.1)
    popup(point_demo)
    ret = struct(point_demo = point_demo)
    return ret
end

# for a left seam step corner, calculate the toolpath points for a L (under) then Up and Around weld. for left obstacle step. 
def calculate_LtUA_step_left(struct1, listleans, rightwallthick, leftwallthick, tcp_pose_top):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance1 = 3 # first path first leg
    welddistance2 = 3 # first path second leg
    welddistance3 = 8 # vertical weld distance
    
    # inches
    wd1 = welddistance1 * 25.4 / 1000
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = tcp_pose_top[2] - pointintersect[2] # the z distance from the corner to the top of the weld
    leftwallthickmm = leftwallthick * 25.4 / 1000 # in this step corner right, this is distance from left edge
    rightwallthickmm =  rightwallthick * 25.4 / 1000 # in this step corner right, this is distance from right edge
    
    
    # weld distance is the distance that it will weld. this will make it start at the z height that the user specified
    #wd1 = tcp_pose_top[2] - pointintersect[2] - zup # this will need to change for step corner right
    
    # point bottom (point of intersection of the two chamfers on the bottom)
    xbottom = pointintersect[0] + l1delxunit * leftwallthickmm + l2delxunit * rightwallthickmm
    ybottom = pointintersect[1] + l1delyunit * leftwallthickmm + l2delyunit * rightwallthickmm
    z = pointintersect[2]
    
    # point 1
    x = xbottom + l1delxunit * wd1
    y = ybottom + l1delyunit * wd1
    
    # get rxryrz for facing along towards the intersection. heading1 +90 deg - 90 deg
    m1 = get_rotation_matrix_from_description("z", 1, heading1)
    # at this point we would multiply matrices, but there is only one matrix
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point1 = p[x, y, z, rx, ry, rz]
    
    # point 2
    point2 = p[xbottom, ybottom, z, rx, ry, rz]
    
    # point 4
    # get rxryrz for facing along the second edge pointed toward the left. heading 3 + 90 - 90
    m1 = get_rotation_matrix_from_description("z", 1, heading3)
    # at this point we would multiply matrices, but there is only one matrix
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point4 = p[xbottom, ybottom, z, rx, ry, rz]
    
    # point 5
    x = xbottom + l2delxunit * wd2
    y = ybottom + l2delyunit * wd2
    point5 = p[x, y, z, rx, ry, rz]
    
    # now calculate the points of the Up Around
    # don't use heading3 at all. 
    #point201 is at the chamfer intersection
    p201x = xbottom
    p201y = ybottom
    p201z = z
    
    # rxryrz is the same 
    m1 = get_rotation_matrix_from_description("z", 1, heading1)
    # at this point we would multiply matrices, but there is only one matrix
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point201 = p[p201x, p201y, p201z, rx, ry, rz]
    
    # find side point (point on the side. where point 203 would be if roundoverdistance was 0)
    sidex = pointintersect[0] + l2delxunit * rightwallthickmm
    sidey = pointintersect[1] + l2delyunit * rightwallthickmm
    sidez = z
    
    # p202
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    p202x = sidex + rod * l1delxunit
    p202y = sidey + rod * l1delyunit
    p202z = sidez
    point202 = p[p202x, p202y, p202z, rx, ry, rz]
    
    # p204 end of circle move
    p204x = sidex
    p204y = sidey
    p204z = sidez + rod
    
    # calculate rxryrz
    # first rotation: 90 degrees about x axis. positive direction. preheat is now facing up, and gun tip is pointed towards y- direction
    m1 = get_rotation_matrix_from_description("x", 1, 90 * pi / 180)
    # second rotation: rotate about z until you are facing into the front face. but only use heading 1
    # heading 1 is about 225 degrees. i need to go about 225 degrees. starting from y- instead of x+ cancels out the extra 90 degrees needed to go into face1 instead of parallel to face1
    m2 = get_rotation_matrix_from_description("z", 1, heading1)
    m3 = multiply_matrix(m2, m1)
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point204 = p[p204x, p204y, p204z, rx, ry, rz]
    
    #p205 (end of straight after cirlce move, before listleans
    straightlength = 1.0 # the moveP blend radius for the circle move was set to 1.0 mm in FloorCorner. we should be more than 2.0mm away from point2
    sld = straightlength * 25.4 / 1000
    point205 = p[p204x, p204y, sidez + sld, rx, ry, rz]
    
    #p206 (top of weld)
    p206x = sidex + wd3 * listleans[0]
    p206y = sidey + wd3 * listleans[1]
    p206z = sidez + wd3
    point206 = p[p206x, p206y, p206z, rx, ry, rz]
    
    # p203 (middle of turn)
    # we know that the angle is exactly 90 degrees
    delta = calc_rod_midpoint_90deg(rod)
    p203z = sidez + delta
    p203x = sidex + delta * l1delxunit
    p203y = sidey + delta * l1delyunit
    
    # calculate rxryrz
    m1 = get_rotation_matrix_from_description("x", 1, 45 * pi / 180)
    m2 = get_rotation_matrix_from_description("z", 1, heading1)
    m3 = multiply_matrix(m2, m1)
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point203 = p[p203x, p203y, p203z, rx, ry, rz]
    
    # form struct
    struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point201=point201, point202=point202, point203=point203, point204=point204, point205=point205, point206=point206)
    return struct2
end

# for a right step corner, calculate the toolpath points for a L (under) then Up and Around weld. 
def calculate_LtUA_step_right(struct1, list1, rightwallthick, leftwallthick, tcp_pose_top):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance1 = 3 # first path first leg
    welddistance2 = 3 # first path second leg
    welddistance3 = 8 # vertical weld distance
    
    # inches
    wd1 = welddistance1 * 25.4 / 1000
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    leftwallthickmm = leftwallthick * 25.4 / 1000 # in this step corner right, this is distance from left edge
    rightwallthickmm =  rightwallthick * 25.4 / 1000 # in this step corner right, this is distance from right edge
    
    
    # weld distance is the distance that it will weld. this will make it start at the z height that the user specified
    #wd1 = tcp_pose_top[2] - pointintersect[2] - zup # this will need to change for step corner right
    
    # point bottom (point of intersection of the two chamfers on the bottom)
    xbottom = pointintersect[0] + l1delxunit * leftwallthickmm + l2delxunit * rightwallthickmm
    ybottom = pointintersect[1] + l1delyunit * leftwallthickmm + l2delyunit * rightwallthickmm
    z = pointintersect[2]
    
    # point 1
    x = xbottom + l1delxunit * wd1
    y = ybottom + l1delyunit * wd1
    
    m1 = get_rotation_matrix_from_description("z", 1, heading1)
    # at this point we would multiply matrices, but there is only one matrix
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point1 = p[x, y, z, rx, ry, rz]
    
    # point 2
    point2 = p[xbottom, ybottom, z, rx, ry, rz]
    
    # point 4
    m1 = get_rotation_matrix_from_description("z", 1, heading3)
    # at this point we would multiply matrices, but there is only one matrix
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point4 = p[xbottom, ybottom, z, rx, ry, rz]
    
    # point 5
    x = xbottom + l2delxunit * wd2
    y = ybottom + l2delyunit * wd2
    point5 = p[x, y, z, rx, ry, rz]
    
    
    # form struct
    struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point1, point_2=point1, point_3=point1, point_4=point1, point_5=point1)
    return struct2
end

# step corner with two seams on bottom face
# vertical seam on left side of corner
# Down Around and Under weld path, then Back Away
# the first path uses backofhole TCP, the second path uses pretend_welder TCP
def calculate_DAaU_step_left(struct1, listleans, rightwallthick, leftwallthick, tcp_pose_top):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance1 = 8 # first path first leg (down)
    welddistance2 = 3 # first path second leg (under) # inches
    welddistance3 = 3 # second path (back away) # inches
    
    wd1 = tcp_pose_top[2] - pointintersect[2] # the touchpoint minus the corner
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    leftwallthickmm = leftwallthick * 25.4 / 1000 # in this step corner right, this is distance from left edge
    rightwallthickmm =  rightwallthick * 25.4 / 1000 # in this step corner right, this is distance from right edge
    
    # first, calculate the location of the bottom of the vertical chamfer (where point2 would be if there weren't any circle motion
    x = pointintersect[0] + l2delxunit * rightwallthickmm
    y = pointintersect[1] + l2delyunit * rightwallthickmm
    z = pointintersect[2]
    pointbottomvcham = p[x, y, z, 0, 0, 0]
    
    # calculate the rxryrz for facing the vertical chamfer, with the preheat down
    rxryrz = convert_heading_to_axang_preheatdown(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # next, calculate point1 using the listleans
    point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
    
    # calculate rxryrz for point2 and point2a (based on heading1). should be very similar to the heading for point1 
    # only use the right side taps for circle move related things
    heading3basedh1 = heading1 - pi/2 # heading1 based on heading3 
    rxryrz = convert_heading_to_axang_preheatdown(heading3basedh1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # the round over distance is the distance from pointbottomvcham to point2 (which will be the same as distance to p4)
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    point2 = p[x, y, z + rod, rx, ry, rz] 
    
    # calculate point2a, which is directly above pointbottomvcham (used to straighten weldpath before circlemove)
    straightlength = 1.0 # the moveP blend radius for the circle move was set to 1.0 mm in FloorCorner. we should be more than 2.0mm away from point2
    sld = straightlength * 25.4 / 1000
    point2a = p[x, y, z + sld, rx, ry, rz]
    
    # calculate the rxryrz for facing the underneath section, with the preheat facing parallel to the right edge (rx and ry should be 0 because gun is facing up)
    # to convert heading1 into the description, subtract 90 degrees to go parallel  instead of into. subtract 90 degrees to start from y+ instead of x+
    heading1descr = heading1 - pi
    m1 = get_rotation_matrix_from_description("z", 1, heading1descr)
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # calculate point4
    p4x = x + l1delxunit * rod
    p4y = y + l1delyunit * rod
    point4 = p[p4x, p4y, z, rx, ry, rz]
    
    # calculate point5
    p5x = x + l1delxunit * wd2
    p5y = y + l1delyunit * wd2
    point5 = p[p5x, p5y, z, rx, ry, rz]
    
    # calculate point3
    # we know that the angle is exactly 90 degrees
    delta = calc_rod_midpoint_90deg(rod)
    p3z = z + delta
    p3x = x + delta * l1delxunit
    p3y = y + delta * l1delyunit
    
    # calculate rxryrz
    m1 = get_rotation_matrix_from_description("x", -1, 45 * pi / 180) # rotation 1: 45 degrees forward about x axis
    m2 = get_rotation_matrix_from_description("z", 1, heading1descr) # rotation 2
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point3 = p[p3x, p3y, p3z, rx, ry, rz]
    
    #todo: calculate trail out point
    
    # calculate back-away (points 201 and 202)
    pushtipforward = 0.006 # 6 millimeters forward. the tip needs to clear the capping wall's angled chamfer to not BONK when getting into position
    p201x = x + l1delxunit * leftwallthickmm + l2delxunit * pushtipforward
    p201y = y + l1delyunit * leftwallthickmm + l2delyunit * pushtipforward
    
    # calculate rxryrz
    m1 = get_rotation_matrix_from_description("z", 1, heading3) 
    # minus pi/2 for the different start point. minus pi/2 for parallel not perpendicular into
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point201 = p[p201x, p201y, z, rx, ry, rz]
    
    # calculate point 202
    p202x = p201x + wd3 * l2delxunit
    p202y = p201y + wd3 * l2delyunit
    point202 = p[p202x, p202y, z, rx, ry, rz]
    
    struct2 = struct(point1=point1, point2a=point2a, point2=point2, point3=point3, point4=point4, point5=point5, point201=point201, point202=point202)
    return struct2
end

# step corner with two seams on bottom face
# vertical seam on right side of corner
# Down Around and Under weld path, then Back Away
# the first path uses backofhole TCP, the second path uses pretend_welder TCP
def calculate_DAaU_step_right(struct1, listleans, rightwallthick, leftwallthick, tcp_pose_top):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance1 = 8 # first path first leg (down)
    welddistance2 = 3 # first path second leg (under) # inches
    welddistance3 = 3 # second path (back away) # inches
    
    wd1 = tcp_pose_top[2] - pointintersect[2] # the touchpoint minus the corner
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    leftwallthickmm = leftwallthick * 25.4 / 1000 # in this step corner right, this is distance from left edge
    rightwallthickmm =  rightwallthick * 25.4 / 1000 # in this step corner right, this is distance from right edge
    
    # first, calculate the location of the bottom of the vertical chamfer (where point2 would be if there weren't any circle motion
    x = pointintersect[0] + l1delxunit * leftwallthickmm
    y = pointintersect[1] + l1delyunit * leftwallthickmm
    z = pointintersect[2]
    pointbottomvcham = p[x, y, z, 0, 0, 0]
    
    # calculate the rxryrz for facing the vertical chamfer, with the preheat down
    rxryrz = convert_heading_to_axang_preheatdown(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # next, calculate point1 using the listleans
    point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
    
    # calculate rxryrz for point2 and point2a (based on heading3). should be very similar to the heading for point1 
    # only use the left side taps for circle move related things
    heading1basedh3 = heading3 + pi/2 # heading1 based on heading3 
    rxryrz = convert_heading_to_axang_preheatdown(heading1basedh3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # the round over distance is the distance from pointbottomvcham to point2 (which will be the same as distance to p4)
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    point2 = p[x, y, z + rod, rx, ry, rz] 
    
    # calculate point2a, which is directly above pointbottomvcham (used to straighten weldpath before circlemove)
    straightlength = 1.0 # the moveP blend radius for the circle move was set to 1.0 mm in FloorCorner. we should be more than 2.0mm away from point2
    sld = straightlength * 25.4 / 1000
    point2a = p[x, y, z + sld, rx, ry, rz]
    
    
    # calculate the rxryrz for facing the underneath section, with the preheat facing parallel to the left edge (rx and ry should be 0 because gun is facing up)
    m1 = get_rotation_matrix_from_description("z", 1, heading3)
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # calculate point4
    p4x = x + l2delxunit * rod
    p4y = y + l2delyunit * rod
    point4 = p[p4x, p4y, z, rx, ry, rz]
    
    # calculate point5
    p5x = x + l2delxunit * wd2
    p5y = y + l2delyunit * wd2
    point5 = p[p5x, p5y, z, rx, ry, rz]
    
    # calculate point3
    # we know that the angle is exactly 90 degrees
    delta = calc_rod_midpoint_90deg(rod)
    p3z = z + delta
    p3x = x + delta * l2delxunit
    p3y = y + delta * l2delyunit
    
    # calculate rxryrz
    m1 = get_rotation_matrix_from_description("x", -1, 45 * pi / 180) # rotation 1: 45 degrees forward about x axis
    m2 = get_rotation_matrix_from_description("z", 1, heading3) # rotation 2
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point3 = p[p3x, p3y, p3z, rx, ry, rz]
    
    #todo: calculate trail out point
    
    # calculate back-away (points 201 and 202)
    pushtipforward = 0.006 # 6 millimeters forward. the tip needs to clear the capping wall's angled chamfer to not BONK when getting into position
    p201x = x + l2delxunit * rightwallthickmm + l1delxunit * pushtipforward
    p201y = y + l2delyunit * rightwallthickmm + l1delyunit * pushtipforward
    
    # calculate rxryrz
    m1 = get_rotation_matrix_from_description("z", 1, heading1 - pi) 
    # minus pi/2 for the different start point. minus pi/2 for parallel not perpendicular into
    rxryrz = convert_matrix_to_axang(m1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point201 = p[p201x, p201y, z, rx, ry, rz]
    
    # calculate point 202
    p202x = p201x + wd3 * l1delxunit
    p202y = p201y + wd3 * l1delyunit
    point202 = p[p202x, p202y, z, rx, ry, rz]
    
    struct2 = struct(point1=point1, point2a=point2a, point2=point2, point3=point3, point4=point4, point5=point5, point201=point201, point202=point202)
    return struct2
end

# given a round over distance (in mm), calculate (based on 90 degrees) the distance from corner (line intersection) to midpoint of arc
# returns a value (in mm) that you need to move from line intersection to midpoint (actual distance will be this times sqrt(2))
def calc_rod_midpoint_90deg(rod):
    # the factor is (1- 1/sqrt(2))
    factor = 0.292893
    ret = rod * factor
    return ret
end

# this is the main entry point for calculations, for Cover Corner.
# it takes in the 4 touchpoints, analyzes the shape of the box. 
# returns the pathpoints
# specifically for Around and Down then Straight (AtS)
# specifically for left-sided boxes (vertical weld on left side of edge)
# leftchoice is a boolean and deepcovercham is a boolean but leftwallthick, rightwallthick are decimals in inches. 
def main_calculate_cover(p11, p12, p21, p3, leftwallthick, rightwallthick, leftchoice, deepcovercham):
    struct1 = analyze_touchpoints_only_cover(p11, p12, p21, p3)
    if leftchoice:
        struct2 = calculate_AtS_points_cover_left(struct1, leftwallthick, rightwallthick, deepcovercham)
    else:
        struct2 = calculate_AtS_points_cover_right(struct1, leftwallthick, rightwallthick, deepcovercham)
    end
    #struct2 = calculate_DOtA_points_left_extended(struct1, list1, chamferover, chamferup, tcp_pose_top)
    #struct3 = check_validity_left(struct1, struct2)
    return struct2
end

def calculate_AtS_points_cover_left(struct1, leftwallthick, rightwallthick, deepcovercham):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance1 = 6 # first path first leg (down)
    welddistance2 = 3 # first path second leg (under) # inches
    welddistance3 = 6 # second path (back away) # inches
    
    wd1 = welddistance1 * 25.4 / 1000
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    leftwallthickmm = leftwallthick * 25.4 / 1000 # in this step corner right, this is distance from left edge
    rightwallthickmm =  rightwallthick * 25.4 / 1000 # in this step corner right, this is distance from right edge
    if deepcovercham:
        deepchambumpmm = 0.09 * 25.4/1000 # if there is a deep chamfer on the cover, bump the welder inwards 0.09 more inches. 
    else:
        deepchambumpmm = 0.0
    end
    
    # first, check if we need a lift column raise
    # (we do, because for maximum reach we want to make the lift pedestal be even with the top of the covers)
    zpi = pointintersect[2]
    if zpi > 0:
        liftcolumnzneeded = zpi * 1000.0 # the robot uses coordinates in meters, but the lift column uses coordinates in mm
        z = 0
    else:
        z = zpi
    end
    
    # first, calculate the location of the top of the vertical chamfer (where point2 would be if there weren't any circle motion)
    x = pointintersect[0] + l2delxunit * rightwallthickmm
    y = pointintersect[1] + l2delyunit * rightwallthickmm
    #z = pointintersect[2] # replaced by z of lift column (directly above)
    pointtopvcham = p[x, y, z, 0, 0, 0]
    
    # calculate the rxryrz for the gun when it's at point1
    # start with rxryrz = 0,0,0 (gun facing up, preheat facing y+ axis.
    # rotate it 180 degrees about x axis. gun facing down, preheat facing y- axis
    # rotate it about 45 degrees ccw about z axis. x+ to heading1 is about 135 degrees. so our angle is heading1 - 90 degrees
    m1 = get_rotation_matrix_from_description("x", -1, 180 * pi / 180) # rotation 1: 180 degrees forward about x axis
    m2 = get_rotation_matrix_from_description("z", 1, heading1 - pi/2) # rotation 2
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # next, calculate point1 (start point on top of cover welding towards corner)
    p1x = x + l1delxunit * wd1 + deepchambumpmm * l2delxunit
    p1y = y + l1delyunit * wd1 + deepchambumpmm * l2delyunit
    point1 = p[p1x, p1y, z, rx, ry, rz]
    
    # the round over distance is the distance from pointbottomvcham to point2 (which will be the same as distance to p4)
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    p2x = x + l1delxunit * rod
    p2y = y + l1delyunit * rod
    point2 = p[p2x, p2y, z, rx, ry, rz] 
    
    # make point2a, colinear between p1 and p2, which will be the place the welder shuts off during motion
    shutofftime = 1.5 # seconds. this is how soon to shut off extrusion before we hit point 2. 
    if deepcovercham:
        speed = 6 # mm/s
        wtod = shutofftime * speed / 1000 #weldturnoffdistance
    else:
        speed = 10 # mm/s
        wtod = shutofftime * speed / 1000
    end
    p2ax = x + l1delxunit * wtod
    p2ay = y + l1delyunit * wtod
    point2a = p[p2ax, p2ay, z, rx, ry, rz]
    
    # calculate the rxryrz for facing the down the left side of the box
    # rotate about x 90 (forward). then rotate about z ~ 45 (ccw)
    m1 = get_rotation_matrix_from_description("x", -1, 90 * pi / 180)
    m2 = get_rotation_matrix_from_description("z", 1, heading1 - pi/2)
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # calculate point4
    point4 = p[x, y, z - rod, rx, ry, rz]
    
    # calculate point5
    point5 = p[x, y, z - wd2, rx, ry, rz]
    
    # calculate point3
    # we know that the angle is exactly 90 degrees
    delta = calc_rod_midpoint_90deg(rod)
    p3z = z - delta
    p3x = x + delta * l1delxunit
    p3y = y + delta * l1delyunit
    
    # calculate rxryrz
    m1 = get_rotation_matrix_from_description("x", -1, 135 * pi / 180) # rotation 1: 135 degrees forward about x axis
    m2 = get_rotation_matrix_from_description("z", 1, heading1 - pi/2)
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point3 = p[p3x, p3y, p3z, rx, ry, rz]
    
    #todo: calculate trail out points
    botvcham = wd2 # where is the bottom of the v chamfer (z distance from top corner)
    tcpdiff = 14 # mm. the difference between backofhole tcp and welder tcp (tip)
    # calculate point5a (point101) (start of tilt back) (start of unflatten)
    dist = 1.5 * 25.4/1000 + tcpdiff # distance from botvcham
    p101x = x
    p101y = y
    p101z = z - wd2 + dist
    p101 = p[p101x, p101y, p101z, rx, ry, rz]
    
    # calculate point5b (point 102) (end of unflatten)
    dist = 0.5 * 25.4 / 1000
    tiltraise = 0.006
    p102x = x + l1delxunit * tiltraise * -1
    p102y = y + l1delyunit * tiltraise * -1
    p102z = z - wd2 + dist
    
    # calculate rxryrz
    tiltangledeg = 10 # ten degree angle of tilt
    m1 = get_rotation_matrix_from_description("x", -1, (90 + tiltangledeg) * pi / 180) # rotation 1: 135 degrees forward about x axis
    m2 = get_rotation_matrix_from_description("z", 1, heading1 - pi/2)
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    p102 = p[p102x, p102y, p102z, rx, ry, rz]
    
    # calculate point 5c (point 103) (end of smear)
    dist = -2 * 25.4/1000
    p103 = p[p102x, p102y, z - wd2 + dist, rx, ry, rz]
    
    # calculate back-away (points 201 and 202)
    pushtipforward = 0.006 # 6 millimeters forward. the tip needs to clear the capping wall's angled chamfer to not BONK when getting into position
    p201x = x + l1delxunit * (leftwallthickmm + deepchambumpmm) + l2delxunit * pushtipforward 
    p201y = y + l1delyunit * (leftwallthickmm + deepchambumpmm) + l2delyunit * pushtipforward
    
    # calculate rxryrz
    # rotate 180 degrees about x. then rotate (90 deg + heading3 degrees) about z ccw
    m1 = get_rotation_matrix_from_description("x", -1, 180 * pi / 180)
    m2 = get_rotation_matrix_from_description("z", 1, heading3 + pi/2)
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point201 = p[p201x, p201y, z, rx, ry, rz]
    
    # calculate point 201's preheat
    pushtipforward2 = 0.012 - pushtipforward + deepchambumpmm # 12 mm forward to clear the existing extrudant (but still have the extrudant from this extrusion join the existing). subtract from previous to make it constant even if you change pushtipforward1
    preheatdistance = 0.010 # 10 mm . above what it would be pushed down
    point201a = p[p201x, p201y, z + preheatdistance, rx, ry, rz]
    p201bx = p201x + l2delxunit * pushtipforward2
    p201by = p201y + l2delyunit * pushtipforward2
    point201b = p[p201bx, p201by, z + preheatdistance, rx, ry, rz]
    point201c = p[p201bx, p201by, z, rx, ry, rz]
    
    # calculate point 202
    p202x = p201x + wd3 * l2delxunit
    p202y = p201y + wd3 * l2delyunit
    point202 = p[p202x, p202y, z, rx, ry, rz]
    
    struct2 = struct(point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, point201=point201, point202=point202, point201a=point201a, point201b=point201b, point201c=point201c, point2a=point2a, point101=point101, point102=point102, point103=point103)
    return struct2
end

def calculate_AtS_points_cover_right(struct1, leftwallthick, rightwallthick):
    # get the stuff from the struct
    pointintersect = struct1[0]
    heading1 = struct1[1]
    heading2 = struct1[2]
    heading3 = struct1[3]
    l1delxunit = struct1[4]
    l1delyunit = struct1[5]
    l2delxunit = struct1[6]
    l2delyunit = struct1[7]
    
    # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance1 = 6 # first path first leg (down)
    welddistance2 = 4 # first path second leg (under) # inches
    welddistance3 = 6 # second path (back away) # inches
    
    wd1 = welddistance1 * 25.4 / 1000
    wd2 = welddistance2 * 25.4 / 1000
    wd3 = welddistance3 * 25.4 / 1000
    leftwallthickmm = leftwallthick * 25.4 / 1000 # in this step corner right, this is distance from left edge
    rightwallthickmm =  rightwallthick * 25.4 / 1000 # in this step corner right, this is distance from right edge
    
    if deepcovercham:
        deepchambumpmm = 0.09 * 25.4/1000 # if there is a deep chamfer on the cover, bump the welder inwards 0.09 more inches. 
    else:
        deepchambumpmm = 0.0
    end
    
    # first, check if we need a lift column raise
    # (we do, because for maximum reach we want to make the lift pedestal be even with the top of the covers)
    zpi = pointintersect[2]
    if zpi > 0:
        liftcolumnzneeded = zpi * 1000.0 # the robot uses coordinates in meters, but the lift column uses coordinates in mm
        z = 0
    else:
        z = zpi
    end

    # first, calculate the location of the top of the vertical chamfer (where point2 would be if there weren't any circle motion)
    x = pointintersect[0] + l1delxunit * leftwallthickmm
    y = pointintersect[1] + l1delyunit * leftwallthickmm
    #z = pointintersect[2] # replaced by z of lift column (directly above)
    pointtopvcham = p[x, y, z, 0, 0, 0]

    # calculate the rxryrz for the gun when it's at point1
    # start with rxryrz = 0,0,0 (gun facing up, preheat facing y+ axis.
    # rotate it 180 degrees about x axis. gun facing down, preheat facing y- axis
    # rotate it about 135 degrees ccw about z axis. x+ to heading3 is about 225 degrees. so our angle is heading3 - 90 degrees
    m1 = get_rotation_matrix_from_description("x", -1, 180 * pi / 180) # rotation 1: 180 degrees forward about x axis
    m2 = get_rotation_matrix_from_description("z", 1, heading3 - pi/2) # rotation 2
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]

    # next, calculate point1 (start point on top of cover welding towards corner)
    p1x = x + l2delxunit * wd1 + deepchambumpmm * l1delxunit
    p1y = y + l2delyunit * wd1 + deepchambumpmm * l1delyunit
    point1 = p[p1x, p1y, z, rx, ry, rz]

    # the round over distance is the distance from pointbottomvcham to point2 (which will be the same as distance to p4)
    roundoverdistance = 0.05
    rod = roundoverdistance * 25.4 / 1000
    p2x = x + l2delxunit * rod
    p2y = y + l2delyunit * rod
    point2 = p[p2x, p2y, z, rx, ry, rz] 
    
    # make point2a, colinear between p1 and p2, which will be the place the welder shuts off during motion
    shutofftime = 1.5 # seconds. this is how soon to shut off extrusion before we hit point 2. 
    if deepcovercham:
        speed = 6 # mm/s
        wtod = shutofftime * speed / 1000 #weldturnoffdistance
    else:
        speed = 10 # mm/s
        wtod = shutofftime * speed / 1000
    end
    p2ax = x + l2delxunit * wtod
    p2ay = y + l2delyunit * wtod
    point2a = p[p2ax, p2ay, z, rx, ry, rz]

    # calculate the rxryrz for facing the down the right side of the box
    # rotate about x 90 (forward). then rotate about z ~ 135 (ccw)
    m1 = get_rotation_matrix_from_description("x", -1, 90 * pi / 180)
    m2 = get_rotation_matrix_from_description("z", 1, heading3 - pi/2)
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]

    # calculate point4
    point4 = p[x, y, z - rod, rx, ry, rz]
    
    # calculate point5
    point5 = p[x, y, z - wd2, rx, ry, rz]

    # calculate point3
    # we know that the angle is exactly 90 degrees
    delta = calc_rod_midpoint_90deg(rod)
    p3z = z - delta
    p3x = x + delta * l2delxunit
    p3y = y + delta * l2delyunit

    # calculate rxryrz
    m1 = get_rotation_matrix_from_description("x", -1, 135 * pi / 180) # rotation 1: 135 degrees forward about x axis
    m2 = get_rotation_matrix_from_description("z", 1, heading3 - pi/2)
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point3 = p[p3x, p3y, p3z, rx, ry, rz]

    #todo: calculate trail out point
    
    # calculate back-away (points 201 and 202)
    pushtipforward = 0.006 # 6 millimeters forward. the tip needs to clear the capping wall's angled chamfer to not BONK when getting into position
    p201x = x + l2delxunit * (rightwallthickmm + deepchambumpmm) + l1delxunit * pushtipforward
    p201y = y + l2delyunit * (rightwallthickmm + deepchambumpmm) + l1delyunit * pushtipforward

    # calculate rxryrz
    # rotate 180 degrees about x. then rotate (90 deg + heading1 degrees) about z ccw
    m1 = get_rotation_matrix_from_description("x", -1, 180 * pi / 180)
    m2 = get_rotation_matrix_from_description("z", 1, heading1 + pi/2)
    m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
    rxryrz = convert_matrix_to_axang(m3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point201 = p[p201x, p201y, z, rx, ry, rz]
    
    # calculate point 201's preheat
    pushtipforward2 = 0.012 - pushtipforward # 12 mm forward to clear the existing extrudant (but still have the extrudant from this extrusion join the existing). subtract from previous to make it constant even if you change pushtipforward1
    preheatdistance = 0.010 # 10 mm . above what it would be pushed down
    point201a = p[p201x, p201y, z + preheatdistance, rx, ry, rz]
    p201bx = p201x + l1delxunit * pushtipforward2
    p201by = p201y + l1delyunit * pushtipforward2
    point201b = p[p201bx, p201by, z + preheatdistance, rx, ry, rz]
    point201c = p[p201bx, p201by, z, rx, ry, rz]

    # calculate point 202
    p202x = p201x + wd3 * l1delxunit
    p202y = p201y + wd3 * l1delyunit
    point202 = p[p202x, p202y, z, rx, ry, rz]

    struct2 = struct(point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, point201=point201, point202=point202, point201a=point201a, point201b=point201b, point201c=point201c, point2a=point2a)
    return struct2
end

def main_calculate_cover_straight(p11, p12, p21, p22, sidewallthick, leftpoint, rightpoint):
    struct1 = analyze_touchpoints_only_cover_straight(p11, p12, p21, p22, leftpoint)
    struct2 = calculate_straight_points_cover(struct1, sidewallthick, leftpoint, rightpoint)
    #struct2 = calculate_DOtA_points_left_extended(struct1, list1, chamferover, chamferup, tcp_pose_top)
    #struct3 = check_validity_left(struct1, struct2)
    return struct2
    
end

# calculates the line of intersection of the sidewall plane (assumed vertical) and the cover plane (assumed perpendicular to sidewall plane)
# returns a struct containing point0 (point on the intersection line, same y as leftpoint) and 3 components of the unit vector left to right and 2 components of the other direction in 2d
def analyze_touchpoints_only_cover_straight(p11, p12, p21, p22, leftpoint):
    # calculate slope of sidewall in x-y plane
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]

    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)

    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
    
    # calculate the cover plane
    # if two planes are perpendicular, then their normal vectors must be perpendicular. 
    # the first planes normal vector is n1, which is taken from the equation of the plane ax + by + cz = d -> <a, b, c>
    # the second plane's normal vector is perpendicular to all vectors contained in the plane
    # p21 to p22 is a vector v contained within plane 2. 
    # n2 is normal to both n1 AND v. to achieve a vector that is normal to both, take the cross product
    
    # plane 1 (y = mx + b) -> (b = -mx +1y +0z)
    n1 = [-1 * ml1, 1, 0]
    
    # v=P2−P1=(x2−x1,y2−y1,z2−z1)
    v = [p21[0]-p22[0], p21[1]-p22[1], p21[2]-p22[2]]
    
    #v n2 = cross product of n1 and v
    n2x = n1[1]*v[2] - n1[2]*v[1]
    n2y = n1[2]*v[0] - n1[0]*v[2]
    n2z = n1[0]*v[1] - n1[1]*v[0]
    n2 = [n2x, n2y, n2z]
    
    # find the d of the second plane
    # n2x * x + n2y * y + n2z * z = d0
    d = n2x * p21[0] + n2y * p21[1] + n2z * p21[2]
    
    # find the intersection line of the two planes
    # find the direction vector of that line by taking the cross product of the normal vector of those two planes
    v3x = n1[1]*n2[2] - n1[2]*n2[1]
    v3y = n1[2]*n2[0] - n1[0]*n2[2]
    v3z = n1[0]*n2[1] - n1[1]*n2[0]
    v3 = [v3x, v3y, v3z]
    
    # normalize the vector so the magnitude is 1
    magnitude2 = v3x * v3x + v3y * v3y + v3z * v3z
    magnitude = sqrt(magnitude2)
    v3xunit = v3x/magnitude
    v3yunit = v3y/magnitude
    v3zunit = v3z/magnitude
    
    # make sure it is going the right way (from left to right). make sure the v3yunit is positive
    if v3yunit < 0:
        v3xunit = v3xunit * -1
        v3yunit = v3yunit * -1
        v3zunit = v3zunit * -1
    end
    
    # next we have to find a point on the line by setting one of the dimensions and solving the system of equations
    # i will pick the y value of the left teach point
    y = leftpoint[1]
    # plane 1: -ml1 * x + 1 * y + 0 * z = bl1
    # -ml1 * x = bl1 - y
    x = (bl1 - y)/ (-1 * ml1)
    # plane 2: d = n2x * x + n2y * y + n2z * z
    # (d - n2x * x - n2y * y) = n2z * z
    z = (d - n2x * x - n2y * y) / n2z
    
    # make point0 into a pose
    point0 = p[x, y, z, 0, 0, 0]
    
    # find heading of main line
    heading1 = convert_uv_to_heading(v3xunit, v3yunit)
    
    # make a unit vector perpendicular to this one in the xy plane pointing x -. will be used to move over the chamfer distance
    ml2 = -1 / ml1
    # y = ml2 * x + unknownB
    # vector = [1, ml2]
    mag2 = 1 + ml2 * ml2
    mag = sqrt(mag2)
    v4xunit = 1 / mag
    v4yunit = ml2 / mag
    # switch is to the x direction is negative
    v4xunit = -1 * v4xunit
    v4yunit = -1 * v4yunit
    
    ret = struct(point0=point0, v3xunit=v3xunit, v3yunit=v3yunit, v3zunit=v3zunit, heading1=heading1, v4xunit=v4xunit, v4yunit=v4yunit)
    return ret
end

def calculate_straight_points_cover(struct1, sidewallthick, leftpointteach, rightpointteach):
    # get the stuff
    point0 = struct1[0]
    p0x = point0[0]
    p0y = point0[1]
    p0z = point0[2]
    v3xunit = struct1[1]
    v3yunit = struct1[2]
    v3zunit = struct1[3]
    heading1 = struct1[4]
    v4xunit = struct1[5]
    v4yunit = struct1[6]
    sidewallthick = sidewallthick
    lpy = leftpointteach[1]
    rpy = rightpointteach[1]
    
    # first, check if we need a lift column raise
    # (we do, because for maximum reach we want to make the lift pedestal be even with the top of the covers)
    zpi = p0z
    if zpi > 0:
        liftcolumnzneeded = zpi * 1000.0 # the robot uses coordinates in meters, but the lift column uses coordinates in mm
        coverz = 0
    else:
        coverz = zpi
    end
    
    # calculate pointtopvcham
    chamferover = sidewallthick * 25.4 / 1000.0
    tiltraise = 0.006 # 6 mm raise needed for the tip to clear the plane during tiltback
    x = p0x + v4xunit * chamferover
    y = p0y + v4yunit * chamferover
    z = coverz + tiltraise
    
    # calculate rxryrz for tilted back
    # 3 rotations to make this happen. 
    # start point is straight up with the preheat pointed in the +y direction. 
    # first rotation is 180 degrees about x direction. gun is now pointing straight down with preheat facing -y direction
    m1 = get_rotation_matrix_from_description("x", 1, 180 * pi / 180) 
    # second rotation is a 10 degree turn about the x axis (negative direction)
    m2 = get_rotation_matrix_from_description("x", -1, 10 * pi / 180)
    # third rotation is about 180 degrees about the z axis. starting from the -y axis, go until you get to heading1. that will equal heading1 plus 90 degrees
    m3 = get_rotation_matrix_from_description("z", 1, pi/2 + heading1)
    # combine them by multiplying m3 * m2 * m1
    # matrix multiplication is not commutative but it IS associative, so you can do this whichever order
    m4 = multiply_matrix(m2, m1)
    m5 = multiply_matrix(m3, m4)
    rxryrzt = convert_matrix_to_axang(m5)
    rxt = rxryrzt[0]
    ryt = rxryrzt[1]
    rzt = rxryrzt[2]
    pointtopvcham = p[x, y, z, rxt, ryt, rzt]
    
    # calculate point1 (preheat)
    dist = -1 * 25.4 / 1000.0 # move back 1 inch from 
    p1x = x + dist * v3xunit
    p1y = y + dist * v3yunit
    p1z = z + dist * v3zunit
    point1 = p[p1x, p1y, p1z, rxt, ryt, rzt]
    
    # calculate point2 (start of flatten)
    dist = 0.5 * 25.4 / 1000.0  # half an inch past the top of v chamfer
    p2x = x + dist * v3xunit
    p2y = y + dist * v3yunit
    p2z = z + dist * v3zunit
    point2 = p[p2x, p2y, p2z, rxt, ryt, rzt]
    
    # calculate rxryrz for nontilted
    # first rotation is 180 degrees about x direction. gun is now pointing straight down with preheat facing -y direction
    m1 = get_rotation_matrix_from_description("x", 1, 180 * pi / 180) 
    # third rotation is about 180 degrees about the z axis. starting from the -y axis, go until you get to heading1. that will equal heading1 plus 90 degrees
    m3 = get_rotation_matrix_from_description("z", 1, pi/2 + heading1)
    m5 = multiply_matrix(m3, m1)
    rxryrz = convert_matrix_to_axang(m5)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    
    # calculate point3 (end of flatten)
    dist = 1.5 * 25.4 / 1000.0  # 1.5 inches past top of v chamfer
    p3x = x + dist * v3xunit
    p3y = y + dist * v3yunit
    p3z = coverz + dist * v3zunit
    point3 = p[p3x, p3y, p3z, rx, ry, rz]
    
    # calculate distance between leftpoint and rightpoint
    # we have the y distance. we need to find the total distance. 
    # the unit vector (v3) should have a magnitude of 1. that's what analyze_touchpoints_only_cover_straight() calculated.
    # so the total distance is y distance * 1 / v3yunit
    ydist = rpy - lpy
    totdist = ydist / v3yunit
    
    # calculate pointtopvcham2
    x2 = x + v3xunit * totdist
    y2 = y + v3yunit * totdist
    z2 = z + v3zunit * totdist
    
    # calculate point4 (start of unflatten)
    dist = -1.5 * 25.4 / 1000.0 
    p4x = x2 + v3xunit * dist
    p4y = y2 + v3yunit * dist
    p4z = z2 + v3zunit * dist - tiltraise
    point4 = p[p4x, p4y, p4z, rx, ry, rz]
    
    # calculate point5 (end of unflatten)
    dist = -0.5 * 25.4 / 1000.0 
    p5x = x2 + v3xunit * dist
    p5y = y2 + v3yunit * dist
    p5z = z2 + v3zunit * dist
    point5 = p[p5x, p5y, p5z, rxt, ryt, rzt]
    
    # calculate point6 (end of smear)
    dist = 2 * 25.4 / 1000.0 
    p6x = x2 + v3xunit * dist
    p6y = y2 + v3yunit * dist
    p6z = z2 + v3zunit * dist
    point6 = p[p6x, p6y, p6z, rxt, ryt, rzt]
    
    
    # return struct
    ret = struct(pointtopvcham=pointtopvcham, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, point6=point6)
    return ret
    
    
end

def main_calculate_floor_straight(p11, p12, p21, p22, floorthick, leftpoint, rightpoint):
    struct1 = analyze_touchpoints_only_cover_straight(p11, p12, p21, p22, leftpoint)
    struct2 = calculate_straight_points_floor(struct1, floorthick, leftpoint, rightpoint)
    #struct2 = calculate_DOtA_points_left_extended(struct1, list1, chamferover, chamferup, tcp_pose_top)
    #struct3 = check_validity_left(struct1, struct2)
    return struct2
    
end

# the path for welding a floor straight weld with v chisels on both sides. 
# start at the right side and move left. 
def calculate_straight_points_floor(struct1, floorthick, leftpointteach, rightpointteach):
    # get the stuff
    point0 = struct1[0]
    p0x = point0[0]
    p0y = point0[1]
    p0z = point0[2]
    v3xunit = struct1[1]
    v3yunit = struct1[2]
    v3zunit = struct1[3]
    heading1 = struct1[4]
    v4xunit = struct1[5]
    v4yunit = struct1[6]
    lpy = leftpointteach[1]
    rpy = rightpointteach[1]
    
    # first, check if we need a lift column raise
    # (we do not, because the floors are low)
    zpi = p0z
    floorz = zpi
    
    # calculate pointtopvcham (left point) (tilted and tiltraised)
    chamferup = floorthick * 25.4 / 1000.0
    tiltraise = 0.006 # 6 mm raise needed for the tip to clear the plane during tiltback
    # on this one, move the tiltraise distance sideways (towards robot) and the chamferover distance up
    x = p0x + v4xunit * tiltraise * -1
    y = p0y + v4yunit * tiltraise * -1
    z = floorz + chamferup
    
    # calculate rxryrz for tilted back
    # 3 rotations to make this happen. 
    # start point is straight up with the preheat pointed in the +y direction. 
    # first rotation is 90 degrees about y axis. positive direction. gun is now pointing in the x+ direction with preheat facing +y direction
    m1 = get_rotation_matrix_from_description("y", 1, 90 * pi / 180) 
    # second rotation is about 180 degrees about the z axis. heading1 plus 90 degrees. gun is now pointing directly into the sidewall
    m2 = get_rotation_matrix_from_description("z", 1, pi/2 + heading1)
    # third rotation is 10 degrees about the z axis. gun is now tilted back 10 degrees from the sidewall
    m3 = get_rotation_matrix_from_description("z", 1, 10 * pi / 180)
    # combine them by multiplying m3 * m2 * m1
    # matrix multiplication is not commutative but it IS associative, so you can do this whichever order
    m4 = multiply_matrix(m2, m1)
    m5 = multiply_matrix(m3, m4)
    rxryrzt = convert_matrix_to_axang(m5)
    rxt = rxryrzt[0]
    ryt = rxryrzt[1]
    rzt = rxryrzt[2]
    # the non tilted angle is just m4
    rxryrz = convert_matrix_to_axang(m4)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    pointtopvcham = p[x, y, z, rxt, ryt, rzt]
    
    # calculate distance between leftpoint and rightpoint
    # we have the y distance. we need to find the total distance. 
    # the unit vector (v3) should have a magnitude of 1. that's what analyze_touchpoints_only_cover_straight() calculated.
    # so the total distance is y distance * 1 / v3yunit
    ydist = rpy - lpy
    totdist = ydist / v3yunit
    
    # calculate pointtopvcham2 (right point) (tilted and tiltraised)
    x2 = x + v3xunit * totdist
    y2 = y + v3yunit * totdist
    z2 = z + v3zunit * totdist
    pointtopvcham2 = p[x2, y2, z2, rxt, ryt, rzt]
    
    # calculate point1 (preheat)
    dist = 1 * 25.4 / 1000.0 # move back 1 inch from ptvc2 (in this case back means positive)
    p1x = x2 + dist * v3xunit
    p1y = y2 + dist * v3yunit
    p1z = z2 + dist * v3zunit
    point1 = p[p1x, p1y, p1z, rxt, ryt, rzt]
    
    # calculate point2 (start of flatten)
    dist = -0.5 * 25.4 / 1000.0  # half an inch past the top of v chamfer
    p2x = x2 + dist * v3xunit
    p2y = y2 + dist * v3yunit
    p2z = z2 + dist * v3zunit
    point2 = p[p2x, p2y, p2z, rxt, ryt, rzt]
    
    # calculate point3 (end of flatten)
    dist = -1.5 * 25.4 / 1000.0  # 1.5 inches past top of v chamfer
    p3x = x2 + dist * v3xunit + tiltraise * v4xunit
    p3y = y2 + dist * v3yunit + tiltraise * v4yunit
    p3z = z2 + dist * v3zunit
    point3 = p[p3x, p3y, p3z, rx, ry, rz]
    
    # calculate point4 (start of unflatten)
    dist = 1.5 * 25.4 / 1000.0 
    p4x = x + v3xunit * dist + tiltraise * v4xunit
    p4y = y + v3yunit * dist + tiltraise * v4yunit
    p4z = z + v3zunit * dist
    point4 = p[p4x, p4y, p4z, rx, ry, rz]
    
    # calculate point5 (end of unflatten)
    dist = 0.5 * 25.4 / 1000.0 
    p5x = x + v3xunit * dist
    p5y = y + v3yunit * dist
    p5z = z + v3zunit * dist
    point5 = p[p5x, p5y, p5z, rxt, ryt, rzt]
    
    # calculate point6 (end of smear)
    dist = -2 * 25.4 / 1000.0 
    p6x = x + v3xunit * dist
    p6y = y + v3yunit * dist
    p6z = z + v3zunit * dist
    point6 = p[p6x, p6y, p6z, rxt, ryt, rzt]
    
    # return struct
    ret = struct(pointtopvcham=pointtopvcham, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, point6=point6)
    return ret
    
end