def Test_Main_Program():
  global _hidden_verificationVariable=0
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_target_payload(0.310000, [0.000000, 0.000000, 0.009500], [0.000219, 0.000219, 0.000219, 0.000000, 0.000000, 0.000000])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb = 0.0
  thread Step_Counter_Thread_70793aa9_04f0_4a00_a81a_f8e9561ae1e6():
    while (True):
      step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb = step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_70793aa9_04f0_4a00_a81a_f8e9561ae1e6()
  global freedrive_m_var=  False  
  global Waypoint_8_p=p[.183612702909, .373491415748, .464002429884, -.000031211095, 3.141572859461, .000004622808]
  global Waypoint_8_q=[-2.527531687413351, -2.1028810940184535, 2.591139856969015, -2.0582763157286585, -1.5713656584369105, 2.1834325790405273]
  global Waypoint_2_p=p[-.545552386461, .384638463642, .171639485768, .668511604681, -1.949272130073, 1.726627182696]
  global Waypoint_2_q=[-1.0565226713763636, -1.0868892234614869, 2.1878750959979456, -1.2335426074317475, -1.0471814314471644, 2.53226637840271]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_3_p=p[.432120633847, .373496143704, .463992564600, -.000014136521, -3.141567738104, -.000014867905]
  global Waypoint_3_q=[-2.7853482405291956, -1.8143698177733363, 2.4549508730517786, -2.210560461083883, -1.5711315313922327, 1.9254603385925293]
  global Waypoint_4_p=p[.432136735069, .373501596410, .340883510249, -.000031606225, -3.141589553529, -.000013823620]
  global Waypoint_4_q=[-2.785483185444967, -1.6431261501707972, 2.568024222050802, -2.49489750484609, -1.5709694067584437, 1.9253177642822266]
  global Waypoint_5_p=p[.432160287104, .281352183882, .340893061994, .000015375091, 3.141574034920, .000032661568]
  global Waypoint_5_q=[-2.9616554419146937, -1.7250400982298792, 2.631975237523214, -2.4769565067686976, -1.5710294882403772, 1.7491776943206787]
  global Waypoint_6_p=p[.432128063058, .281346135716, .478493221894, .000013346378, -3.141574975494, -.000002942308]
  global Waypoint_6_q=[-2.961463991795675, -1.9219290218748988, 2.4929660002337855, -2.141019483605856, -1.571230713521139, 1.7493857145309448]
  def Test_Teach_Position():
    $ 6 "Test_Teach_Position" "noBreak"
    $ 7 "Home"
    movej([-2.5278157671606145, -1.852465766610969, 2.7650339410037645, -2.482569784177298, -1.5711424260709022, 2.183095047178716], a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "MoveL"
    $ 9 "Waypoint_8" "breakAfter"
    movel(Waypoint_8_p, a=1.2, v=0.25)
    $ 10 "'move welder up out of holder'"
    # 'move welder up out of holder'
    $ 11 "MoveJ"
    $ 12 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 13 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 14 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 15 "Popup: Move the robot to the peg center, then click 'Continue'"
    popup("Move the robot to the peg center, then click 'Continue'", "Message", False, False, blocking=True)
    $ 16 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 17 "Wait: 0.25"
    sleep(0.25)
    $ 18 "sync()"
    sync()
    $ 19 "tcp_pose≔get_actual_joint_positions()"
    global tcp_pose= get_actual_joint_positions ()
  end
  def Corner_Homing_BRB():
    $ 20 "Corner_Homing_BRB" "noBreak"
    $ 21 "'Use this program when tool is already positioned close to corner (back right bottom corner)'"
    # 'Use this program when tool is already positioned close to corner (back right bottom corner)'
    $ 22 "'tool flange will seek all 3 sides and then bring tcp to the corner'"
    # 'tool flange will seek all 3 sides and then bring tcp to the corner'
    $ 23 "align_tcp_left()"
    align_tcp_left()
    $ 24 "'right side'"
    # 'right side'
    $ 25 "MoveL"
    $ 26 "Direction: Base X-"
    global move_thread_flag_26=0
    thread move_thread_26():
      enter_critical
      move_thread_flag_26 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_26 = 2
      exit_critical
    end
    move_thread_flag_26 = 0
    move_thread_han_26 = run move_thread_26()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_26 > 1):
        join move_thread_han_26
        $ 27 "Until (distance)"
        break
      end
      sync()
    end
    $ 28 "MoveL"
    $ 29 "Direction: Base Y-"
    global move_thread_flag_29=0
    thread move_thread_29():
      enter_critical
      move_thread_flag_29 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_29 = 2
      exit_critical
    end
    move_thread_flag_29 = 0
    move_thread_han_29 = run move_thread_29()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_29
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 30 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 31 "p11≔get_actual_tcp_pose()"
    global p11= get_actual_tcp_pose ()
    $ 32 "MoveL"
    $ 33 "Direction: Base Y+"
    global move_thread_flag_33=0
    thread move_thread_33():
      enter_critical
      move_thread_flag_33 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_33 = 2
      exit_critical
    end
    move_thread_flag_33 = 0
    move_thread_han_33 = run move_thread_33()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_33 > 1):
        join move_thread_han_33
        $ 34 "Until (distance)"
        break
      end
      sync()
    end
    $ 35 "MoveL"
    $ 36 "Direction: Base X-"
    global move_thread_flag_36=0
    thread move_thread_36():
      enter_critical
      move_thread_flag_36 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_36 = 2
      exit_critical
    end
    move_thread_flag_36 = 0
    move_thread_han_36 = run move_thread_36()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_36 > 1):
        join move_thread_han_36
        $ 37 "Until (distance)"
        break
      end
      sync()
    end
    $ 38 "MoveL"
    $ 39 "Direction: Base Y-"
    global move_thread_flag_39=0
    thread move_thread_39():
      enter_critical
      move_thread_flag_39 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_39 = 2
      exit_critical
    end
    move_thread_flag_39 = 0
    move_thread_han_39 = run move_thread_39()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_39
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 40 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 41 "p12≔get_actual_tcp_pose()"
    global p12= get_actual_tcp_pose ()
    $ 42 "MoveL"
    $ 43 "Direction: Base Y+"
    global move_thread_flag_43=0
    thread move_thread_43():
      enter_critical
      move_thread_flag_43 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_43 = 2
      exit_critical
    end
    move_thread_flag_43 = 0
    move_thread_han_43 = run move_thread_43()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_43 > 1):
        join move_thread_han_43
        $ 44 "Until (distance)"
        break
      end
      sync()
    end
    $ 45 "MoveL"
    $ 46 "Direction: Base X+"
    global move_thread_flag_46=0
    thread move_thread_46():
      enter_critical
      move_thread_flag_46 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_46 = 2
      exit_critical
    end
    move_thread_flag_46 = 0
    move_thread_han_46 = run move_thread_46()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_46 > 1):
        join move_thread_han_46
        $ 47 "Until (distance)"
        break
      end
      sync()
    end
    $ 48 "align_tcp_forward()"
    align_tcp_forward()
    $ 49 "'back side'"
    # 'back side'
    $ 50 "MoveL"
    $ 51 "Direction: Base Y-"
    global move_thread_flag_51=0
    thread move_thread_51():
      enter_critical
      move_thread_flag_51 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_51 = 2
      exit_critical
    end
    move_thread_flag_51 = 0
    move_thread_han_51 = run move_thread_51()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_51 > 1):
        join move_thread_han_51
        $ 52 "Until (distance)"
        break
      end
      sync()
    end
    $ 53 "MoveL"
    $ 54 "Direction: Base X-"
    global move_thread_flag_54=0
    thread move_thread_54():
      enter_critical
      move_thread_flag_54 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_54 = 2
      exit_critical
    end
    move_thread_flag_54 = 0
    move_thread_han_54 = run move_thread_54()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_54
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 55 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 56 "p21≔get_actual_tcp_pose()"
    global p21= get_actual_tcp_pose ()
    $ 57 "MoveL"
    $ 58 "Direction: Base X+"
    global move_thread_flag_58=0
    thread move_thread_58():
      enter_critical
      move_thread_flag_58 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_58 = 2
      exit_critical
    end
    move_thread_flag_58 = 0
    move_thread_han_58 = run move_thread_58()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_58 > 1):
        join move_thread_han_58
        $ 59 "Until (distance)"
        break
      end
      sync()
    end
    $ 60 "MoveL"
    $ 61 "Direction: Base Y-"
    global move_thread_flag_61=0
    thread move_thread_61():
      enter_critical
      move_thread_flag_61 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_61 = 2
      exit_critical
    end
    move_thread_flag_61 = 0
    move_thread_han_61 = run move_thread_61()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_61 > 1):
        join move_thread_han_61
        $ 62 "Until (distance)"
        break
      end
      sync()
    end
    $ 63 "MoveL"
    $ 64 "Direction: Base X-"
    global move_thread_flag_64=0
    thread move_thread_64():
      enter_critical
      move_thread_flag_64 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_64 = 2
      exit_critical
    end
    move_thread_flag_64 = 0
    move_thread_han_64 = run move_thread_64()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_64
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 65 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 66 "p22≔get_actual_tcp_pose()"
    global p22= get_actual_tcp_pose ()
    $ 67 "MoveL"
    $ 68 "Direction: Base X+"
    global move_thread_flag_68=0
    thread move_thread_68():
      enter_critical
      move_thread_flag_68 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_68 = 2
      exit_critical
    end
    move_thread_flag_68 = 0
    move_thread_han_68 = run move_thread_68()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_68 > 1):
        join move_thread_han_68
        $ 69 "Until (distance)"
        break
      end
      sync()
    end
    $ 70 "'regroup for up turn'"
    # 'regroup for up turn'
    $ 71 "MoveL"
    $ 72 "Direction: Base X+"
    global move_thread_flag_72=0
    thread move_thread_72():
      enter_critical
      move_thread_flag_72 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_72 = 2
      exit_critical
    end
    move_thread_flag_72 = 0
    move_thread_han_72 = run move_thread_72()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_72 > 1):
        join move_thread_han_72
        $ 73 "Until (distance)"
        break
      end
      sync()
    end
    $ 74 "Direction: Base Y+"
    global move_thread_flag_74=0
    thread move_thread_74():
      enter_critical
      move_thread_flag_74 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.4)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_74 = 2
      exit_critical
    end
    move_thread_flag_74 = 0
    move_thread_han_74 = run move_thread_74()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_74 > 1):
        join move_thread_han_74
        $ 75 "Until (distance)"
        break
      end
      sync()
    end
    $ 76 "MoveL"
    $ 77 "Direction: Base Z-"
    global move_thread_flag_77=0
    thread move_thread_77():
      enter_critical
      move_thread_flag_77 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_77 = 2
      exit_critical
    end
    move_thread_flag_77 = 0
    move_thread_han_77 = run move_thread_77()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_77 > 1):
        join move_thread_han_77
        $ 78 "Until (distance)"
        break
      end
      sync()
    end
    $ 79 "align_tcp_up()"
    align_tcp_up()
    $ 80 "MoveL"
    $ 81 "Direction: Base X-"
    global move_thread_flag_81=0
    thread move_thread_81():
      enter_critical
      move_thread_flag_81 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.25)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_81 = 2
      exit_critical
    end
    move_thread_flag_81 = 0
    move_thread_han_81 = run move_thread_81()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_81 > 1):
        join move_thread_han_81
        $ 82 "Until (distance)"
        break
      end
      sync()
    end
    $ 83 "Direction: Base Y-"
    global move_thread_flag_83=0
    thread move_thread_83():
      enter_critical
      move_thread_flag_83 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.3)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_83 = 2
      exit_critical
    end
    move_thread_flag_83 = 0
    move_thread_han_83 = run move_thread_83()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_83 > 1):
        join move_thread_han_83
        $ 84 "Until (distance)"
        break
      end
      sync()
    end
    $ 85 "'bottom side'"
    # 'bottom side'
    $ 86 "MoveL"
    $ 87 "Direction: Base Y-"
    global move_thread_flag_87=0
    thread move_thread_87():
      enter_critical
      move_thread_flag_87 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.12)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_87 = 2
      exit_critical
    end
    move_thread_flag_87 = 0
    move_thread_han_87 = run move_thread_87()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_87 > 1):
        join move_thread_han_87
        $ 88 "Until (distance)"
        break
      end
      sync()
    end
    $ 89 "MoveL"
    $ 90 "Direction: Base Z+"
    global move_thread_flag_90=0
    thread move_thread_90():
      enter_critical
      move_thread_flag_90 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_90 = 2
      exit_critical
    end
    move_thread_flag_90 = 0
    move_thread_han_90 = run move_thread_90()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_90
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 91 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 92 "p3≔get_actual_tcp_pose()"
    global p3= get_actual_tcp_pose ()
    $ 93 "MoveL"
    $ 94 "Direction: Base Z-"
    global move_thread_flag_94=0
    thread move_thread_94():
      enter_critical
      move_thread_flag_94 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_94 = 2
      exit_critical
    end
    move_thread_flag_94 = 0
    move_thread_han_94 = run move_thread_94()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_94 > 1):
        join move_thread_han_94
        $ 95 "Until (distance)"
        break
      end
      sync()
    end
    $ 96 "MoveL"
    $ 97 "Direction: Base X+"
    global move_thread_flag_97=0
    thread move_thread_97():
      enter_critical
      move_thread_flag_97 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_97 = 2
      exit_critical
    end
    move_thread_flag_97 = 0
    move_thread_han_97 = run move_thread_97()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_97 > 1):
        join move_thread_han_97
        $ 98 "Until (distance)"
        break
      end
      sync()
    end
    $ 99 "Direction: Base Y+"
    global move_thread_flag_99=0
    thread move_thread_99():
      enter_critical
      move_thread_flag_99 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_99 = 2
      exit_critical
    end
    move_thread_flag_99 = 0
    move_thread_han_99 = run move_thread_99()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_99 > 1):
        join move_thread_han_99
        $ 100 "Until (distance)"
        break
      end
      sync()
    end
  end
  def extrude_knife():
    $ 101 "extrude_knife" "noBreak"
    $ 102 "'Move to bucket'"
    # 'Move to bucket'
    $ 103 "MoveJ"
    $ 104 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 105 "MoveL"
    $ 106 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=1.2, v=0.25)
    $ 107 "'extrude out a foot'"
    # 'extrude out a foot'
    $ 108 "Wait: 6.0"
    sleep(6.0)
    $ 109 "MoveL"
    $ 110 "'slice over knife'"
    # 'slice over knife'
    $ 111 "Waypoint_5" "breakAfter"
    movel(Waypoint_5_p, a=1.2, v=0.04)
    $ 112 "MoveL"
    $ 113 "Waypoint_6" "breakAfter"
    movel(Waypoint_6_p, a=1.2, v=0.25)
    $ 114 "'raise up away from knife'"
    # 'raise up away from knife'
  end
  def align_tcp_left():
    $ 115 "align_tcp_left" "noBreak"
    $ 116 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 117 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 118 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 119 "MoveJ"
    $ 120 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_up():
    $ 121 "align_tcp_up" "noBreak"
    $ 122 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 123 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 124 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 125 "MoveJ"
    $ 126 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_forward():
    $ 127 "align_tcp_forward" "noBreak"
    $ 128 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 129 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 130 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 131 "MoveJ"
    $ 132 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 133 "Thread_1"
  thread Thread_1():
    while (True):
      $ 134 "Loop  True "
      while (  True  ):
        $ 135 "If freedrive_m_var≟ True "
        if (freedrive_m_var ==   True  ):
          $ 136 "freedrive_mode()"
          freedrive_mode()
        else:
          $ 137 "Else" "noBreak"
          $ 138 "end_freedrive_mode()"
          end_freedrive_mode()
        end
        $ 139 "sync()"
        sync()
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 2 "Robot Program"
  $ 3 "Test_Teach_Position()"
  Test_Teach_Position()
  $ 4 "Corner_Homing_BRB()"
  Corner_Homing_BRB()
  $ 5 "extrude_knife()"
  extrude_knife()
end
