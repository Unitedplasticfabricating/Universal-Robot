def Test_Main_Program():
  global _hidden_verificationVariable=0
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_target_payload(0.310000, [0.000000, 0.000000, 0.009500], [0.000219, 0.000219, 0.000219, 0.000000, 0.000000, 0.000000])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb = 0.0
  thread Step_Counter_Thread_70793aa9_04f0_4a00_a81a_f8e9561ae1e6():
    while (True):
      step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb = step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_70793aa9_04f0_4a00_a81a_f8e9561ae1e6()
  global freedrive_m_var=  False  
  global Waypoint_2_p=p[-.545552386461, .384638463642, .171639485768, .668511604681, -1.949272130073, 1.726627182696]
  global Waypoint_2_q=[-1.0565226713763636, -1.0868892234614869, 2.1878750959979456, -1.2335426074317475, -1.0471814314471644, 2.53226637840271]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  def Test_Teach_Position():
    $ 5 "Test_Teach_Position" "noBreak"
    $ 6 "Home"
    movej([-2.5278157671606145, -1.852465766610969, 2.7650339410037645, -2.482569784177298, -1.5711424260709022, 2.183095047178716], a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "MoveJ"
    $ 8 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 10 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 11 "Popup: Move the robot to the peg center, then click 'Continue'"
    popup("Move the robot to the peg center, then click 'Continue'", "Message", False, False, blocking=True)
    $ 12 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 13 "Wait: 0.25"
    sleep(0.25)
    $ 14 "sync()"
    sync()
    $ 15 "tcp_pose≔get_actual_joint_positions()"
    global tcp_pose= get_actual_joint_positions ()
  end
  def Corner_Homing_BRB():
    $ 16 "Corner_Homing_BRB" "noBreak"
    $ 17 "'Use this program when tool is already positioned close to corner (back right bottom corner)'"
    # 'Use this program when tool is already positioned close to corner (back right bottom corner)'
    $ 18 "'tool flange will seek all 3 sides and then bring tcp to the corner'"
    # 'tool flange will seek all 3 sides and then bring tcp to the corner'
    $ 19 "align_tcp_left()"
    align_tcp_left()
    $ 20 "'right side'"
    # 'right side'
    $ 21 "MoveL"
    $ 22 "Direction: Base X-"
    global move_thread_flag_22=0
    thread move_thread_22():
      enter_critical
      move_thread_flag_22 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_22 = 2
      exit_critical
    end
    move_thread_flag_22 = 0
    move_thread_han_22 = run move_thread_22()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_22 > 1):
        join move_thread_han_22
        $ 23 "Until (distance)"
        break
      end
      sync()
    end
    $ 24 "MoveL"
    $ 25 "Direction: Base Y-"
    global move_thread_flag_25=0
    thread move_thread_25():
      enter_critical
      move_thread_flag_25 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_25 = 2
      exit_critical
    end
    move_thread_flag_25 = 0
    move_thread_han_25 = run move_thread_25()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_25
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 26 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 27 "p11≔get_actual_tcp_pose()"
    global p11= get_actual_tcp_pose ()
    $ 28 "MoveL"
    $ 29 "Direction: Base Y+"
    global move_thread_flag_29=0
    thread move_thread_29():
      enter_critical
      move_thread_flag_29 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_29 = 2
      exit_critical
    end
    move_thread_flag_29 = 0
    move_thread_han_29 = run move_thread_29()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_29 > 1):
        join move_thread_han_29
        $ 30 "Until (distance)"
        break
      end
      sync()
    end
    $ 31 "MoveL"
    $ 32 "Direction: Base X-"
    global move_thread_flag_32=0
    thread move_thread_32():
      enter_critical
      move_thread_flag_32 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_32 = 2
      exit_critical
    end
    move_thread_flag_32 = 0
    move_thread_han_32 = run move_thread_32()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_32 > 1):
        join move_thread_han_32
        $ 33 "Until (distance)"
        break
      end
      sync()
    end
    $ 34 "MoveL"
    $ 35 "Direction: Base Y-"
    global move_thread_flag_35=0
    thread move_thread_35():
      enter_critical
      move_thread_flag_35 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_35 = 2
      exit_critical
    end
    move_thread_flag_35 = 0
    move_thread_han_35 = run move_thread_35()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_35
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 36 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 37 "p12≔get_actual_tcp_pose()"
    global p12= get_actual_tcp_pose ()
    $ 38 "MoveL"
    $ 39 "Direction: Base Y+"
    global move_thread_flag_39=0
    thread move_thread_39():
      enter_critical
      move_thread_flag_39 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_39 = 2
      exit_critical
    end
    move_thread_flag_39 = 0
    move_thread_han_39 = run move_thread_39()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_39 > 1):
        join move_thread_han_39
        $ 40 "Until (distance)"
        break
      end
      sync()
    end
    $ 41 "MoveL"
    $ 42 "Direction: Base X+"
    global move_thread_flag_42=0
    thread move_thread_42():
      enter_critical
      move_thread_flag_42 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_42 = 2
      exit_critical
    end
    move_thread_flag_42 = 0
    move_thread_han_42 = run move_thread_42()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_42 > 1):
        join move_thread_han_42
        $ 43 "Until (distance)"
        break
      end
      sync()
    end
    $ 44 "align_tcp_forward()"
    align_tcp_forward()
    $ 45 "'back side'"
    # 'back side'
    $ 46 "MoveL"
    $ 47 "Direction: Base Y-"
    global move_thread_flag_47=0
    thread move_thread_47():
      enter_critical
      move_thread_flag_47 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_47 = 2
      exit_critical
    end
    move_thread_flag_47 = 0
    move_thread_han_47 = run move_thread_47()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_47 > 1):
        join move_thread_han_47
        $ 48 "Until (distance)"
        break
      end
      sync()
    end
    $ 49 "MoveL"
    $ 50 "Direction: Base X-"
    global move_thread_flag_50=0
    thread move_thread_50():
      enter_critical
      move_thread_flag_50 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_50 = 2
      exit_critical
    end
    move_thread_flag_50 = 0
    move_thread_han_50 = run move_thread_50()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_50
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 51 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 52 "p21≔get_actual_tcp_pose()"
    global p21= get_actual_tcp_pose ()
    $ 53 "MoveL"
    $ 54 "Direction: Base X+"
    global move_thread_flag_54=0
    thread move_thread_54():
      enter_critical
      move_thread_flag_54 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_54 = 2
      exit_critical
    end
    move_thread_flag_54 = 0
    move_thread_han_54 = run move_thread_54()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_54 > 1):
        join move_thread_han_54
        $ 55 "Until (distance)"
        break
      end
      sync()
    end
    $ 56 "MoveL"
    $ 57 "Direction: Base Y-"
    global move_thread_flag_57=0
    thread move_thread_57():
      enter_critical
      move_thread_flag_57 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_57 = 2
      exit_critical
    end
    move_thread_flag_57 = 0
    move_thread_han_57 = run move_thread_57()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_57 > 1):
        join move_thread_han_57
        $ 58 "Until (distance)"
        break
      end
      sync()
    end
    $ 59 "MoveL"
    $ 60 "Direction: Base X-"
    global move_thread_flag_60=0
    thread move_thread_60():
      enter_critical
      move_thread_flag_60 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_60 = 2
      exit_critical
    end
    move_thread_flag_60 = 0
    move_thread_han_60 = run move_thread_60()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_60
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 61 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 62 "p22≔get_actual_tcp_pose()"
    global p22= get_actual_tcp_pose ()
    $ 63 "MoveL"
    $ 64 "Direction: Base X+"
    global move_thread_flag_64=0
    thread move_thread_64():
      enter_critical
      move_thread_flag_64 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_64 = 2
      exit_critical
    end
    move_thread_flag_64 = 0
    move_thread_han_64 = run move_thread_64()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_64 > 1):
        join move_thread_han_64
        $ 65 "Until (distance)"
        break
      end
      sync()
    end
    $ 66 "'regroup for up turn'"
    # 'regroup for up turn'
    $ 67 "MoveL"
    $ 68 "Direction: Base X+"
    global move_thread_flag_68=0
    thread move_thread_68():
      enter_critical
      move_thread_flag_68 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_68 = 2
      exit_critical
    end
    move_thread_flag_68 = 0
    move_thread_han_68 = run move_thread_68()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_68 > 1):
        join move_thread_han_68
        $ 69 "Until (distance)"
        break
      end
      sync()
    end
    $ 70 "Direction: Base Y+"
    global move_thread_flag_70=0
    thread move_thread_70():
      enter_critical
      move_thread_flag_70 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.4)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_70 = 2
      exit_critical
    end
    move_thread_flag_70 = 0
    move_thread_han_70 = run move_thread_70()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_70 > 1):
        join move_thread_han_70
        $ 71 "Until (distance)"
        break
      end
      sync()
    end
    $ 72 "MoveL"
    $ 73 "Direction: Base Z-"
    global move_thread_flag_73=0
    thread move_thread_73():
      enter_critical
      move_thread_flag_73 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_73 = 2
      exit_critical
    end
    move_thread_flag_73 = 0
    move_thread_han_73 = run move_thread_73()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_73 > 1):
        join move_thread_han_73
        $ 74 "Until (distance)"
        break
      end
      sync()
    end
    $ 75 "align_tcp_up()"
    align_tcp_up()
    $ 76 "MoveL"
    $ 77 "Direction: Base X-"
    global move_thread_flag_77=0
    thread move_thread_77():
      enter_critical
      move_thread_flag_77 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.25)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_77 = 2
      exit_critical
    end
    move_thread_flag_77 = 0
    move_thread_han_77 = run move_thread_77()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_77 > 1):
        join move_thread_han_77
        $ 78 "Until (distance)"
        break
      end
      sync()
    end
    $ 79 "Direction: Base Y-"
    global move_thread_flag_79=0
    thread move_thread_79():
      enter_critical
      move_thread_flag_79 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.3)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_79 = 2
      exit_critical
    end
    move_thread_flag_79 = 0
    move_thread_han_79 = run move_thread_79()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_79 > 1):
        join move_thread_han_79
        $ 80 "Until (distance)"
        break
      end
      sync()
    end
    $ 81 "'bottom side'"
    # 'bottom side'
    $ 82 "MoveL"
    $ 83 "Direction: Base Y-"
    global move_thread_flag_83=0
    thread move_thread_83():
      enter_critical
      move_thread_flag_83 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.12)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_83 = 2
      exit_critical
    end
    move_thread_flag_83 = 0
    move_thread_han_83 = run move_thread_83()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_83 > 1):
        join move_thread_han_83
        $ 84 "Until (distance)"
        break
      end
      sync()
    end
    $ 85 "MoveL"
    $ 86 "Direction: Base Z+"
    global move_thread_flag_86=0
    thread move_thread_86():
      enter_critical
      move_thread_flag_86 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_86 = 2
      exit_critical
    end
    move_thread_flag_86 = 0
    move_thread_han_86 = run move_thread_86()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_86
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 87 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 88 "p3≔get_actual_tcp_pose()"
    global p3= get_actual_tcp_pose ()
    $ 89 "MoveL"
    $ 90 "Direction: Base Z-"
    global move_thread_flag_90=0
    thread move_thread_90():
      enter_critical
      move_thread_flag_90 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_90 = 2
      exit_critical
    end
    move_thread_flag_90 = 0
    move_thread_han_90 = run move_thread_90()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_90 > 1):
        join move_thread_han_90
        $ 91 "Until (distance)"
        break
      end
      sync()
    end
    $ 92 "MoveL"
    $ 93 "Direction: Base X+"
    global move_thread_flag_93=0
    thread move_thread_93():
      enter_critical
      move_thread_flag_93 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_93 = 2
      exit_critical
    end
    move_thread_flag_93 = 0
    move_thread_han_93 = run move_thread_93()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_93 > 1):
        join move_thread_han_93
        $ 94 "Until (distance)"
        break
      end
      sync()
    end
    $ 95 "Direction: Base Y+"
    global move_thread_flag_95=0
    thread move_thread_95():
      enter_critical
      move_thread_flag_95 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_95 = 2
      exit_critical
    end
    move_thread_flag_95 = 0
    move_thread_han_95 = run move_thread_95()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_95 > 1):
        join move_thread_han_95
        $ 96 "Until (distance)"
        break
      end
      sync()
    end
  end
  def align_tcp_left():
    $ 97 "align_tcp_left" "noBreak"
    $ 98 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 99 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 100 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 101 "MoveJ"
    $ 102 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_up():
    $ 103 "align_tcp_up" "noBreak"
    $ 104 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 105 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 106 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 107 "MoveJ"
    $ 108 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_forward():
    $ 109 "align_tcp_forward" "noBreak"
    $ 110 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 111 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 112 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 113 "MoveJ"
    $ 114 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 115 "Thread_1"
  thread Thread_1():
    while (True):
      $ 116 "Loop  True "
      while (  True  ):
        $ 117 "If freedrive_m_var≟ True "
        if (freedrive_m_var ==   True  ):
          $ 118 "freedrive_mode()"
          freedrive_mode()
        else:
          $ 119 "Else" "noBreak"
          $ 120 "end_freedrive_mode()"
          end_freedrive_mode()
        end
        $ 121 "sync()"
        sync()
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 2 "Robot Program"
  $ 3 "Test_Teach_Position()"
  Test_Teach_Position()
  $ 4 "Corner_Homing_BRB()"
  Corner_Homing_BRB()
end
