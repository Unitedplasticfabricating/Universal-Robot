def test_approach():
  global _hidden_verificationVariable=0
  step_count_054f3189_5318_4801_84bd_11f9ca30010b = 0.0
  thread Step_Counter_Thread_f68a657e_fa44_45a8_91bb_d295c1250127():
    while (True):
      step_count_054f3189_5318_4801_84bd_11f9ca30010b = step_count_054f3189_5318_4801_84bd_11f9ca30010b + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_f68a657e_fa44_45a8_91bb_d295c1250127()
  set_tcp(p[-0.005492233754671227,-0.3325814034474486,0.10639335834084135,1.2092,-1.2092,1.2092])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(8.700000, [-0.001000, -0.057000, 0.067000], [0.056650, 0.056650, 0.056650, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-.693756081485, .141369193308, .218584735520, -.851978179689, -1.646001533937, 1.646008371360]
  global Waypoint_1_q=[-1.1533568541156214, -1.4924076360515137, 2.8518698851214808, 4.922323781042852, -4.910887185727255, 1.5719373226165771]
  global newhome_p=p[.381328894249, .374761626184, .274441753302, 3.008632745367, .117497306456, .008191258520]
  global newhome_q=[-2.350030485783712, -1.9299365482726039, 2.324834648762838, 5.886971938401022, -3.999796692525045, -0.13146716753114873]
  global newhome_face_sa_p=p[.405676678270, .434281964297, .274451205065, 2.292149705238, 2.093788563169, -.002352375293]
  global newhome_face_sa_q=[-3.180808130894796, -1.837815900842184, 2.278774086629049, 6.2995948670204065, -6.226085465644495, -0.48309547105898076]
  global oldhome_p=p[.397683836105, .356251384911, .315246899233, 2.316304177919, 2.057561756051, .074146544723]
  global oldhome_q=[-3.457960907612936, -2.0569125614561976, 2.326589886342184, -0.22707636774096684, -0.19935208955873662, -0.10534269014467412]
  global newhome_face_nr_p=p[.431376111164, .411556831507, .274165103922, 2.416511386757, 1.988870843284, .000683516032]
  global newhome_face_nr_q=[-3.2494357267962855, -1.938770433465475, 2.322603766118185, 5.972415435105123, -6.197997708116667, -0.08223230043520147]
  global Waypoint_2_p=p[.852537780449, .365246206837, .985644848958, .971733290149, .788507935709, 1.356975021191]
  global Waypoint_2_q=[-3.2494240442859095, -1.9387814007201136, 2.322604242955343, 3.9818588930317382, -6.198000256215231, -0.08223468462099248]
  global Waypoint_3_p=p[.687527620967, .415165960724, .537921070000, 2.127101811831, 1.929915403723, .470130777221]
  global Waypoint_3_q=[-3.249424997960226, -1.9387947521605433, 2.32263428369631, 3.9818588930317382, -6.198007937763826, 1.5286580324172974]
  global Waypoint_4_p=p[.695155464390, .367451880816, .502522491683, 2.093108370749, 1.857548644474, .308841595089]
  global Waypoint_4_q=[-3.249415699635641, -1.9387923679747523, 2.3226097265826624, 3.981850786800049, -0.05697328249086553, 1.5286790132522583]
  global Waypoint_5_p=p[.400807442417, .414190795515, .275291245022, 2.367635245525, 2.027190977347, .008842787895]
  global Waypoint_5_q=[-3.2493746916400355, -1.9387556515135707, 2.3248568216906946, -0.15823991716418462, 0.04766135290265083, -0.25002986589540654]
  global Waypoint_6_p=p[-1.171715831382, .324077696965, .060780921587, .420446994336, -1.582955741245, .541017695067]
  global Waypoint_6_q=[-0.7166827360736292, -0.3868658107570191, 1.9000046888934534, 3.2967397409626464, -4.728135530148641, 1.326094627380371]
  global Waypoint_10_p=p[-.489525998267, 1.090477402900, .212437418352, -1.932598743274, -1.343146653093, 1.455310443894]
  global Waypoint_10_q=[-1.5737574736224573, -1.0704620641520997, 1.6232522169696253, 0.006955190295837355, 1.5781803131103516, 1.0890856981277466]
  global Waypoint_9_p=p[-.390339723607, .842096442489, .760827365374, -.181683435701, .075187428739, -2.999521944384]
  global Waypoint_9_q=[-1.5940449873553675, -1.0729992550662537, 1.7600467840777796, -0.05384536207232671, -0.2011044661151331, 2.459686756134033]
  global Waypoint_7_p=p[-.308539216010, .606069751424, .242399406714, 1.369860289804, 1.066870704958, -1.257186820878]
  global Waypoint_7_q=[-1.4936402479754847, -0.926392213707306, 1.5482872168170374, 0.9572552877613525, 1.6576772928237915, 0.237884521484375]
  global Waypoint_8_p=p[-.574227210366, .239847068393, .185455130098, 1.895275212532, .480619704838, -1.824921893533]
  global Waypoint_8_q=[-1.3344686667071741, -1.24955769002948, 2.270522419606344, 0.6269542413898925, 1.6112184524536133, 1.2250633239746094]
  while (True):
    $ 2 "Robot Program"
    $ 3 "'this program details the steps to get from the old home to the new home'"
    # 'this program details the steps to get from the old home to the new home'
    $ 5 "MoveJ"
    $ 6 "Waypoint_1" "breakAfter"
    movej(Waypoint_1_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "newhome" "breakAfter"
    movej(newhome_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "newhome_face_sa" "breakAfter"
    movej(newhome_face_sa_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "oldhome" "breakAfter"
    movej(oldhome_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 14 "MoveJ"
    $ 15 "newhome_face_nr" "breakAfter"
    movej(newhome_face_nr_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 16 "Waypoint_2" "breakAfter"
    movej(Waypoint_2_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 17 "Waypoint_3" "breakAfter"
    movej(Waypoint_3_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 18 "Waypoint_4" "breakAfter"
    movej(Waypoint_4_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 19 "Waypoint_5" "breakAfter"
    movej(Waypoint_5_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "oldhome" "breakAfter"
    movej(oldhome_q, a=1.3962634015954636, v=1.0471975511965976)
    $ 21 "MoveJ"
    $ 22 "oldhome" "breakAfter"
    movej(get_inverse_kin(oldhome_p, qnear=oldhome_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 24 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 26 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 27 "'approach for right weld in between 2 and 3'"
    # 'approach for right weld in between 2 and 3'
    $ 28 "MoveJ"
    $ 29 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 30 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 31 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 32 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 33 "Comment"
    # Comment
    $ 34 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
