def Step_Corner_Right_Down_Around_under():
  global _hidden_verificationVariable=0
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_006946d5_eb6f_4e81_9231_e18e9c0d8667 = 0.0
  thread Step_Counter_Thread_42086dbd_a5be_40b4_9402_896bf89b8afc():
    while (True):
      step_count_006946d5_eb6f_4e81_9231_e18e9c0d8667 = step_count_006946d5_eb6f_4e81_9231_e18e9c0d8667 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_42086dbd_a5be_40b4_9402_896bf89b8afc()
  global Waypoint_4_p=p[-1.367410924649, .416276638633, .317190444725, -.782231809423, -1.662887046957, 1.614423593215]
  global Waypoint_4_q=[-0.5939717180531252, -0.6910851113199428, 1.7496414148415138, 2.016713442804543, -1.9191844954032966, -1.5928419918552095]
  global Waypoint_3_p=p[-1.382401593278, .435382459728, -.070389819773, -.782231809423, -1.662887046957, 1.614423593215]
  global Waypoint_3_q=[-0.6013784334598284, -0.2628315983130527, 1.5404446272527414, 1.79774176387853, -1.9115977679178258, -1.5926333565532147]
  global Waypoint_2_p=p[-1.382401593424, .435382459677, -.070389819767, -.400423625440, -.943451215396, 2.017645200071]
  global Waypoint_2_q=[-0.5386092356370646, 0.00385819960748357, 1.2390866657659632, 1.830621850018609, -1.974091493727128, -0.8716245470844157]
  global Waypoint_1_p=p[-1.382401594144, .433690604072, -.070389819775, .056095851639, -.060211212273, 2.255976054527]
  global Waypoint_1_q=[-0.37248447451667044, 0.23604392560564902, 0.7501008864029286, 2.085017450129145, -2.0817193719018636, -0.06063247492770607]
  global Waypoint_5_p=p[-1.491969147625, .344099224635, -.073835126975, .056095851639, -.060211212273, 2.255976054527]
  global Waypoint_5_q=[-0.27837067094701506, 0.3751899277327292, 0.3748668818737464, 2.316738371645799, -2.175500466802095, -0.06852547922060381]
  global Waypoint_6_p=p[-.841019660872, -.062951324808, .227761650739, .000377646430, -.057716833962, .654103204587]
  global Waypoint_6_q=[-2.7354732195483606, -2.569040437737936, -1.6992708444595337, -2.071319719354147, 1.322867512702942, 3.1380066871643066]
  global Waypoint_7_p=p[-1.284618532050, .489384405229, -.089320742834, .000377646418, -.057716833947, .654103204587]
  global Waypoint_7_q=[-3.2289505473708626, -3.40350138950879, -0.1403779355693553, -2.8136150454206987, 0.8294931312207785, 3.1741295020771756]
  global Waypoint_8_p=p[-1.268871418987, .489382029957, -.089348939074, -.002713361891, -.057342009322, .546479968036]
  global Waypoint_8_q=[-3.2425761852733888, -3.470016567044393, 0.0066935674667694236, -2.8885420563316373, 0.9232200658743608, 3.1653805372764943]
  global Waypoint_11_p=p[-1.308945458467, .528973264892, .183362064698, -.781392864245, -1.661328547532, 1.615626686494]
  global Waypoint_11_q=[-0.7180022611783077, -0.5504330920206044, 1.721116176574968, 1.907157581174572, -1.7953589963059393, -1.5828945692511915]
  global Waypoint_10_p=p[-1.308945458661, .528973264928, -.082602317530, -.778821240822, -1.656555928701, 1.619284489464]
  global Waypoint_10_q=[-0.7182049079464861, -0.25434128179227855, 1.5694649929230127, 1.7626771890966348, -1.795007345686093, -1.577939424511463]
  global Waypoint_9_p=p[-1.308945458315, .528973264979, -.082602317737, -.284378562941, -.721108514707, 2.091805748331]
  global Waypoint_9_q=[-0.6061699289196243, 0.07290054281615725, 1.1727598529076966, 1.8297498005808495, -1.9067147803673983, -0.6559356505917231]
  global Waypoint_12_p=p[-1.308945458145, .528973264869, -.082602318031, .038193808408, -.094996781491, 2.196221349460]
  global Waypoint_12_q=[-0.4662468739516079, 0.21391680463807017, 0.8529741126827133, 2.0041723319897464, -2.046280289663927, -0.08875419496741088]
  global Waypoint_13_p=p[-1.404768958457, .459806560595, -.089047959561, .038193808407, -.094996781490, 2.196221349460]
  global Waypoint_13_q=[-0.38221163798476443, 0.2958107830993026, 0.6162283532036961, 2.1554432538497106, -2.1300554079481557, -0.09564412085827634]
  global Waypoint_14_p=p[-1.186907731877, .296959163860, -.072676771430, .000377646407, -.057716833933, .654103204587]
  global Waypoint_14_q=[-3.0955496223595813, -3.109975602582278, -0.8242839899464052, -2.4157078912343355, 0.9629459432101425, 3.162170696064752]
  global Waypoint_15_p=p[-1.186907732188, .296959163205, -.072676771200, .005087399585, -.058075334140, .815725410061]
  global Waypoint_15_q=[-3.0741579455456165, -3.079424279087461, -0.9078896136952039, -2.3707137463261034, 0.823047260817078, 3.174913703907872]
  global i3inchesback_p=p[-1.232314548017, .339713147400, -.073790688181, .005087399584, -.058075334138, .815725410060]
  global i3inchesback_q=[-3.1073136516950512, -3.1356548463990332, -0.7585572406433396, -2.4662272743751537, 0.7899002489267763, 3.178381369452999]
  global i7inchesback_p=p[-1.307925316413, .410908227817, -.075645102005, .005087399583, -.058075334138, .815725410060]
  global i7inchesback_q=[-3.157716777010304, -3.284469244262926, -0.3931378694683767, -2.6869828822410113, 0.739448593688687, 3.1841092765307017]
  global asfaraswecango_p=p[-1.335405316955, .436787312414, -.076320399662, .005087398753, -.058075333724, .815725411815]
  global asfaraswecango_q=[-3.174614510942268, -3.4601054509860134, 0.0036683169457717266, -2.90968082898495, 0.7224011213338093, 3.1861549776638896]
  global Waypoint_19_p=p[-1.150141002069, .298642933883, .275062744043, -.768428732528, -1.722518637025, 1.719465672249]
  global Waypoint_19_q=[-0.6683920091118365, -0.769066059684377, 2.123206146272266, 1.784234384286698, -1.7463113459902182, -1.5733497175923503]
  global Waypoint_18_p=p[-1.150656920427, .299267201557, .057140587090, -.768428732527, -1.722518637025, 1.719465672249]
  global Waypoint_18_q=[-0.6687523523535663, -0.4803410667219232, 2.0342797900717993, 1.584394734395568, -1.745814747742891, -1.5735907300169245]
  global Waypoint_20_p=p[-1.151009437910, .299695361529, -.098244706549, -.768428732528, -1.722518637025, 1.719465672248]
  global Waypoint_20_q=[-0.6690308785747394, -0.2835619739639279, 1.9235407650741791, 1.498334823712658, -1.7454292256821846, -1.5737094732532704]
  global Waypoint_21_p=p[-1.151009437732, .299695361586, -.098244706610, -.430782556490, -.971304495816, 2.126604840221]
  global Waypoint_21_q=[-0.5781727728208708, -0.027316925251185786, 1.6657508325996364, 1.4995944190975028, -1.8361648051538886, -0.858426363523277]
  global Waypoint_22_p=p[-1.151009437620, .299695361558, -.098244706772, -.007906939079, -.028623864532, 2.298511277787]
  global Waypoint_22_q=[-0.3295397457554152, 0.11754197740694097, 1.3188450759082322, 1.700764154261617, -2.0848185435351496, -0.027447972670483267]
  global Waypoint_23_p=p[-1.293478030212, .172756387833, -.102692341815, -.007906939080, -.028623864532, 2.298511277787]
  global Waypoint_23_q=[-0.1742730959244021, 0.1631974396732266, 1.0701023497126592, 1.9030703367765078, -2.2400990319181595, -0.028232294541744807]
  global Waypoint_25_p=p[-1.150667376004, .299412044434, .314715994920, -.763018778057, -1.768620752058, 1.709756048611]
  global Waypoint_25_q=[-3.3167600039999487, -1.9298933551697495, -2.0690453445317214, -2.27604288260728, -0.9253880746364285, 1.5342790661058583]
  global Waypoint_26_p=p[-1.142969062958, .309681176026, -.087506342534, -.763018778057, -1.768620752058, 1.709756048611]
  global Waypoint_26_q=[-3.3312880046963205, -2.4183533064479903, -2.1136011829341834, -1.742904653043265, -0.9398954019001788, 1.5340643910964111]
  global Waypoint_27_p=p[-1.142969062733, .309681176123, -.087506342636, -.372298588436, -.873316177993, 2.183446685328]
  global Waypoint_27_q=[-3.2394640827144907, -2.748134211024931, -1.9326456433597663, -1.5933237431349205, -0.8482232698489582, 2.376603754433258]
  global Waypoint_28_p=p[-1.142969062602, .309681176120, -.087506342858, -.042044734980, -.114498430322, 2.319103888679]
  global Waypoint_28_q=[-3.0867125010822827, -2.8709768945500898, -1.7096838968080332, -1.6918580866273238, -0.6955682381866541, 3.036816984767722]
  global Waypoint_29_p=p[-1.319930528998, .144752829606, -.110858709690, -.042044734980, -.114498430322, 2.319103888680]
  global Waypoint_29_q=[-2.946580717804411, -2.9438563522958976, -1.4191712066417912, -1.9072532802664242, -0.5555720533923898, 3.034151655487964]
  global Waypoint_35_p=p[-1.168533785707, .251879029523, .303711787743, -1.438846698817, -.669531398814, .600292056863]
  global Waypoint_35_q=[-2.8167580504634815, -2.2499617138359556, -1.563914378503359, -2.531389993403751, 1.0802489298103204, 1.615658542536667]
  global Waypoint_34_p=p[-1.158878631728, .270560480050, -.071906159864, -1.438846698817, -.669531398814, .600292056863]
  global Waypoint_34_q=[-2.830040560850053, -2.570049292663704, -1.6029055770171192, -2.1728222111374764, 1.0670193635645946, 1.616719713888142]
  global Waypoint_33_p=p[-1.158878631942, .270560480176, -.071906159869, -.701678645834, -.360625450087, .754303667428]
  global Waypoint_33_q=[-2.9074949492307747, -2.8389054885189844, -1.4032786189907185, -2.1066442802533443, 0.9895971558039096, 2.410373002251802]
  global Waypoint_32_p=p[-1.158878632026, .270560480199, -.071906159798, .003051220350, -.058957699352, .815658633372]
  global Waypoint_32_q=[-3.0521058395299203, -3.050016281207205, -0.9894496187878907, -2.3170843262983873, 0.8450897556990761, 3.170565933795089]
  global Waypoint_30_p=p[-1.186907732188, .296959163205, -.072676771200, .005087399585, -.058075334140, .815725410061]
  global Waypoint_30_q=[-3.0741579455456165, -3.0794242790874673, -0.9078896136951844, -2.370713746326114, 0.8230472608170771, 3.1749137039078725]
  global Waypoint_31_p=p[-1.232314548017, .339713147400, -.073790688181, .005087399584, -.058075334138, .815725410060]
  global Waypoint_31_q=[-3.1073136516950512, -3.135654846399037, -0.7585572406433281, -2.4662272743751608, 0.7899002489267763, 3.1783813694529996]
  global Waypoint_36_p=p[-1.232314547746, .339713147486, -.073790688397, -.137475309309, -.115261147431, .810324291392]
  global Waypoint_36_q=[-3.0808454188098953, -3.0840499635091523, -0.8832168430053287, -2.3859235848977747, 0.8159881142240963, 3.022561774922373]
  global Waypoint_37_p=p[-1.319930528926, .144752829604, -.110858709816, -.120534213617, -.294980601792, 2.305842129501]
  global Waypoint_37_q=[-2.971544606480787, -2.9185600551608006, -1.4916928013922917, -1.8605053584386404, -0.580498210249127, 2.8788944873082336]
  while (True):
    $ 2 "Robot Program"
    $ 3 "dummy points"
    $ 4 "MoveJ"
    $ 5 "'wrist from the bottom'"
    # 'wrist from the bottom'
    $ 6 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 10 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 11 "MoveJ"
    $ 12 "'align for legback'"
    # 'align for legback'
    $ 13 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 14 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 15 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 16 "'this is the farthest it can go on the right'"
    # 'this is the farthest it can go on the right'
    $ 17 "MoveJ"
    $ 18 "'wrist from the bottom'"
    # 'wrist from the bottom'
    $ 19 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 21 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 22 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 24 "MoveJ"
    $ 25 "'align legback at 41 inches from corner'"
    # 'align legback at 41 inches from corner'
    $ 26 "Waypoint_14" "breakAfter"
    movej(get_inverse_kin(Waypoint_14_p, qnear=Waypoint_14_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 27 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 28 "i3inchesback" "breakAfter"
    movej(get_inverse_kin(i3inchesback_p, qnear=i3inchesback_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 29 "i7inchesback" "breakAfter"
    movej(get_inverse_kin(i7inchesback_p, qnear=i7inchesback_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 30 "asfaraswecango" "breakAfter"
    movej(get_inverse_kin(asfaraswecango_p, qnear=asfaraswecango_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 31 "'8 inches back is as far as it can go'"
    # '8 inches back is as far as it can go'
    $ 32 "'good clearance on the wrist not hitting'"
    # 'good clearance on the wrist not hitting'
    $ 33 "MoveJ"
    $ 34 "'41 inches away right down and around  (normal)'"
    # '41 inches away right down and around  (normal)'
    $ 36 "Waypoint_19" "breakAfter"
    movej(get_inverse_kin(Waypoint_19_p, qnear=Waypoint_19_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 37 "Waypoint_18" "breakAfter"
    movej(get_inverse_kin(Waypoint_18_p, qnear=Waypoint_18_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 38 "Waypoint_20" "breakAfter"
    movej(get_inverse_kin(Waypoint_20_p, qnear=Waypoint_20_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 39 "Waypoint_21" "breakAfter"
    movej(get_inverse_kin(Waypoint_21_p, qnear=Waypoint_21_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 40 "Waypoint_22" "breakAfter"
    movej(get_inverse_kin(Waypoint_22_p, qnear=Waypoint_22_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 41 "Waypoint_23" "breakAfter"
    movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 43 "MoveJ"
    $ 44 "'try the right down and around while already elbow shoulder flipped. save time in between weld segments.'"
    # 'try the right down and around while already elbow shoulder flipped. save time in between weld segments.'
    $ 46 "Waypoint_25" "breakAfter"
    movej(get_inverse_kin(Waypoint_25_p, qnear=Waypoint_25_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 47 "Waypoint_26" "breakAfter"
    movej(get_inverse_kin(Waypoint_26_p, qnear=Waypoint_26_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 48 "Waypoint_27" "breakAfter"
    movej(get_inverse_kin(Waypoint_27_p, qnear=Waypoint_27_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 49 "Waypoint_28" "breakAfter"
    movej(get_inverse_kin(Waypoint_28_p, qnear=Waypoint_28_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 50 "Waypoint_29" "breakAfter"
    movej(get_inverse_kin(Waypoint_29_p, qnear=Waypoint_29_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 51 "MoveJ"
    $ 52 "'left side down and around'"
    # 'left side down and around'
    $ 53 "Waypoint_35" "breakAfter"
    movej(get_inverse_kin(Waypoint_35_p, qnear=Waypoint_35_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 54 "Waypoint_34" "breakAfter"
    movej(get_inverse_kin(Waypoint_34_p, qnear=Waypoint_34_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 55 "Waypoint_33" "breakAfter"
    movej(get_inverse_kin(Waypoint_33_p, qnear=Waypoint_33_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 56 "Waypoint_32" "breakAfter"
    movej(get_inverse_kin(Waypoint_32_p, qnear=Waypoint_32_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 57 "Waypoint_30" "breakAfter"
    movej(get_inverse_kin(Waypoint_30_p, qnear=Waypoint_30_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 58 "Waypoint_31" "breakAfter"
    movej(get_inverse_kin(Waypoint_31_p, qnear=Waypoint_31_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 59 "MoveJ"
    $ 60 "'ramping endpoints'"
    # 'ramping endpoints'
    $ 61 "Waypoint_36" "breakAfter"
    movej(get_inverse_kin(Waypoint_36_p, qnear=Waypoint_36_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 62 "'above is ramping for backaway on theright side of box'"
    # 'above is ramping for backaway on theright side of box'
    $ 63 "Waypoint_37" "breakAfter"
    movej(get_inverse_kin(Waypoint_37_p, qnear=Waypoint_37_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 64 "'above is ramping for the backaway on left side of box'"
    # 'above is ramping for the backaway on left side of box'
  end
end
