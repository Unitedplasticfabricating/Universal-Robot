def move_path_cover_LtAD():
  global _hidden_verificationVariable=0
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 = 0.0
  thread Step_Counter_Thread_5cae079c_b6a8_4d9c_956a_44e16054eccd():
    while (True):
      step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 = step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_5cae079c_b6a8_4d9c_956a_44e16054eccd()
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  while (True):
    $ 2 "Robot Program"
    $ 3 "Comment"
    # Comment
    $ 4 "align_for_cover_left()"
    align_for_cover_left()
    $ 5 "Set"
    set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 6 "Comment"
    # Comment
    $ 7 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 8 "p2≔pathturn[1]"
    global p2=pathturn[1]
    $ 9 "p3≔pathturn[2]"
    global p3=pathturn[2]
    $ 10 "p4≔pathturn[3]"
    global p4=pathturn[3]
    $ 12 "pa1≔p[p1[0],p1[1],p1[2]+0.05,p1[3],p1[4],p1[5]]"
    global pa1=p[p1[0],p1[1],p1[2]+0.05,p1[3],p1[4],p1[5]]
    $ 13 "pa2≔p[p4[0],p4[1],p4[2]+0.05,p4[3],p4[4],p4[5]]"
    global pa2=p[p4[0],p4[1],p4[2]+0.05,p4[3],p4[4],p4[5]]
    $ 16 "p2u≔p[p2[0],p2[1],p2[2]+0.0016,p2[3],p2[4],p2[5]]"
    global p2u=p[p2[0],p2[1],p2[2]+0.0016,p2[3],p2[4],p2[5]]
    $ 17 "p3u≔p[p3[0],p3[1],p3[2]+0.0016,p3[3],p3[4],p3[5]]"
    global p3u=p[p3[0],p3[1],p3[2]+0.0016,p3[3],p3[4],p3[5]]
    $ 18 "MoveJ"
    $ 19 "pa1" "breakAfter"
    movej(pa1, a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "MoveL"
    $ 21 "p1" "breakAfter"
    movel(p1, a=0.05, v=0.05)
    $ 22 "Wait: 8.0"
    sleep(8.0)
    $ 23 "turn ext on"
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 24 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 25 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 26 "Wait: 1.0"
    sleep(1.0)
    $ 28 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 29 "MoveL"
    $ 30 "p2" "breakAfter"
    movel(p2, a=0.1, v=0.007)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 32 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 33 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 34 "MoveL"
    $ 35 "p2u" "breakAfter"
    movel(p2u, a=1.2, v=0.1)
    $ 36 "p3u" "breakAfter"
    movel(p3u, a=1.2, v=0.1)
    $ 37 "p3" "breakAfter"
    movel(p3, a=1.2, v=0.1)
    $ 38 "turn ext on"
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 39 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 40 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 41 "Wait: 1.0"
    sleep(1.0)
    $ 43 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 48 "MoveL"
    $ 49 "p4" "breakAfter"
    movel(p4, a=0.05, v=0.007)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 55 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 56 "Wait: 2.0"
    sleep(2.0)
    $ 57 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 58 "MoveL"
    $ 59 "pa2" "breakAfter"
    movel(pa2, a=1.2, v=0.05)
    $ 60 "Comment"
    # Comment
    $ 64 "p_1≔pathturn[4]"
    global p_1=pathturn[4]
    $ 65 "p_2≔pathturn[5]"
    global p_2=pathturn[5]
    $ 66 "p_3≔pathturn[6]"
    global p_3=pathturn[6]
    $ 67 "p_4≔pathturn[7]"
    global p_4=pathturn[7]
    $ 68 "p_5≔pathturn[8]"
    global p_5=pathturn[8]
    $ 76 "p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2]+0.01,p_3[3],p_3[4],p_3[5]]"
    global p_preheat=p[p_3[0]+.01,p_3[1],p_3[2]+0.01,p_3[3],p_3[4],p_3[5]]
    $ 77 "p_pre_ret≔p[p_1[0],p_1[1],p_1[2]+0.05,p_1[3],p_1[4],p_1[5]]"
    global p_pre_ret=p[p_1[0],p_1[1],p_1[2]+0.05,p_1[3],p_1[4],p_1[5]]
    $ 78 "p_pre_ret2≔p[p_3[0]+.1,p_3[1],p_3[2]+.1,p_3[3],p_3[4],p_3[5]]"
    global p_pre_ret2=p[p_3[0]+.1,p_3[1],p_3[2]+.1,p_3[3],p_3[4],p_3[5]]
    $ 79 "Set"
    set_tcp(p[0.00451,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 80 "MoveJ"
    $ 81 "p_pre_ret" "breakAfter"
    movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
    $ 82 "MoveL"
    $ 84 "p_pre_ret2" "breakAfter"
    movel(p_pre_ret2, a=0.05, v=0.05)
    $ 85 "p_preheat" "breakAfter"
    movel(p_preheat, a=0.05, v=0.05)
    $ 86 "Wait: 6.0"
    sleep(6.0)
    $ 87 "MoveL"
    $ 88 "p_pre_ret2" "breakAfter"
    movel(p_pre_ret2, a=1.2, v=0.25)
    $ 89 "p_pre_ret" "breakAfter"
    movel(p_pre_ret, a=1.2, v=0.25)
    $ 90 "MoveL"
    $ 91 "p_1" "breakAfter"
    movel(p_1, a=1.2, v=0.02)
    $ 92 "turn ext on"
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 93 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 94 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 95 "Wait: 1.0"
    sleep(1.0)
    $ 97 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 98 "MoveL"
    $ 99 "p_2" "breakAfter"
    movel(p_2, a=1.2, v=0.01)
    $ 100 "MoveP"
    $ 101 "CircleMove"
    $ 102 "p_3" "noBreak"
    
    $ 103 "p_4" "breakAfter"
    movec(p_3, p_4, a=1.2, v=5.0E-4, r=0.0, mode=1)
    $ 104 "MoveL"
    $ 105 "p_5" "breakAfter"
    movel(p_5, a=1.2, v=0.01)
    $ 106 "Set"
    set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 107 "p102≔pathturn[9]"
    global p102=pathturn[9]
    $ 108 "p103≔pathturn[10]"
    global p103=pathturn[10]
    $ 109 "MoveL"
    $ 110 "p102" "breakAfter"
    movel(p102, a=1.2, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 111 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 112 "MoveL"
    $ 113 "p103" "breakAfter"
    movel(p103, a=1.2, v=0.01)
    $ 114 "MoveL"
    $ 115 "Direction: Base X+"
    global move_thread_flag_115=0
    thread move_thread_115():
      enter_critical
      move_thread_flag_115 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.15)
      movel(towardsPos, a=1.2, v=0.01)
      move_thread_flag_115 = 2
      exit_critical
    end
    move_thread_flag_115 = 0
    move_thread_han_115 = run move_thread_115()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_115 > 1):
        join move_thread_han_115
        $ 116 "Until (distance)"
        break
      end
      sync()
    end
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 149 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 150 "Wait: 2.0"
    sleep(2.0)
    $ 151 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
  end
end
