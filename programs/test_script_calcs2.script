def test_script_calcs2():
  global _hidden_verificationVariable=0
  step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 = 0.0
  thread Step_Counter_Thread_1612d609_c27e_4fb2_a3a6_b8d1164a790d():
    while (True):
      step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 = step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_1612d609_c27e_4fb2_a3a6_b8d1164a790d()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.310000, [0.000000, 0.000000, 0.009500], [0.000219, 0.000219, 0.000219, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  while (True):
    $ 2 "Robot Program"
    $ 3 "point1≔get_actual_tcp_pose()"
    global point1= get_actual_tcp_pose ()
    $ 4 "point2≔get_actual_tcp_pose()"
    global point2= get_actual_tcp_pose ()
    $ 5 "point3≔get_actual_tcp_pose()"
    global point3= get_actual_tcp_pose ()
    $ 6 "point4≔get_actual_tcp_pose()"
    global point4= get_actual_tcp_pose ()
    $ 7 "Script: analyze_touchpoints.script"
    # comment get the z
    zcoord=p3[2]
    
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
    
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
    
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
    
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
    
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
    
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
    
    
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
    
    
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance = 8
    roundoverdistance = .25
    zup = .375
    # inches
    wd = welddistance * 25.4 / 1000
    rod = roundoverdistance * 25.4 / 1000
    zup = zup * 25.4 / 1000
    
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
    
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
    
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l1delxunit * wd
    y = yintersect + l1delyunit * wd
    z = zcoord + zup
    
    point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
    
    x = xintersect + l1delxunit * rod
    y = yintersect + l1delyunit * rod
    
    point2 = p[x,y,z,1.570796,0,0]
    
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
    
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
    
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l2delxunit * wd
    y = yintersect + l2delyunit * wd
    
    point4 = p[x,y,z,0,-1.570796,0]
    
    x = xintersect + l2delxunit * rod
    y = yintersect + l2delyunit * rod
    
    point3 = p[x,y,z,0,-1.570796,0]
    
    pointintersect = p[xintersect,yintersect,zcoord,1.570796,0,0]
    pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
    pointapproach2 = p[point1[0] + 0.1, point1[1], point1[2], point1[3], point1[4], point1[5]]
    
    
    # the orthogonal direction 1 IS the vector direction 2 (and vice versa)
    
    # but for now, just use orthogonal angles
    
    
    
    
    
    $ 8 "Script: move_weld_brb.script"
    # this script actually moves the robot along the path
    # for testing. no welder attached, no orientation decided
    
    movej(pointapproach1, a=1.2, v=0.25)
    
    movel(pointapproach2, a=1.2, v=0.25)
    
    movel(point1, a=1.2, v=0.25)
    
    movel(point2, a=1.2, v=0.25)
    
    movel(point3, a=1.2, v=0.25)
    
    movel(point4, a=1.2, v=0.25)
    
    movel(pointapproach1, a=1.2, v=0.25)
  end
end
