def demo_peg():
  global _hidden_verificationVariable=0
  step_count_2f499d59_ce4f_417b_bac8_1e264bb882ee = 0.0
  thread Step_Counter_Thread_9ba0b380_111f_45b8_aa82_6756fc3de38a():
    while (True):
      step_count_2f499d59_ce4f_417b_bac8_1e264bb882ee = step_count_2f499d59_ce4f_417b_bac8_1e264bb882ee + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_9ba0b380_111f_45b8_aa82_6756fc3de38a()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[-0.0095,-0.328,0.105,1.2092,-1.2092,1.2092])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_1_p=p[.439488291023, .377651133715, .439882304084, 2.296548003389, 2.095070833464, -.064444183553]
  global Waypoint_1_q=[-3.2982399227469408, -1.6869866629004306, 2.321899940866662, 1.7986929609496611, 0.08275917652692975, -2.431212411529109]
  global Waypoint_2_p=p[-.567049013380, .119271761819, .439882304084, -.856813970855, 2.968909698347, .016424286016]
  global Waypoint_2_q=[-1.073829803656987, -1.6869866629004306, 2.321899940866662, 1.7986929609496611, 0.08275917652692975, -2.431212411529109]
  global Waypoint_13_p=p[-.820614795303, .235066599767, -.600712014654, 2.788970272795, -.398402105472, -1.179883498377]
  global Waypoint_13_q=[-0.6344014345366524, -0.49167038092430815, 2.1714451986284242, -2.4597477103615764, -1.7494300273178194, -0.42573648797660724]
  global Waypoint_14_p=p[-.933005923956, .247304254396, -.556073372586, 2.880341906638, -.066130249196, -1.230194573270]
  global Waypoint_14_q=[-0.5158586283097799, -0.5527913860734417, 2.071402294861347, -2.3774332267686886, -1.8798700141428775, -0.3741446825320738]
  global Waypoint_15_p=p[-1.155522576512, .247304255352, -.556073372562, .107496200150, 2.331994643957, -.011811996768]
  global Waypoint_15_q=[-0.3522416004512925, -0.22417573490188847, 1.4245226792197414, -3.5192886576508875, -1.4036558589659123, -3.356968747927858]
  global Waypoint_18_p=p[-.939675094691, .242158588783, -.688931462624, .185799497490, 2.440305612427, -.033098608278]
  global Waypoint_18_q=[-0.4515305576865245, -0.11677251965064173, 1.6881370959121385, -3.9971850927625523, -1.3521673519742698, -3.362576251916517]
  global Waypoint_19_p=p[-.939675094808, .242158588839, -.719895844863, .185799497490, 2.440305612427, -.033098608278]
  global Waypoint_19_q=[-0.4515511797556293, -0.0806390875363796, 1.65622806465098, -4.001401618123724, -1.3521450501635721, -3.36261226131543]
  global ViaPoint_5_p=p[-.907204912708, .264784629769, -.719899998261, 1.873840104138, 1.759389353393, -.653102831148]
  global ViaPoint_5_q=[-0.5060214920474859, -0.13422991229719727, 1.7933217739942342, -3.6954069419041238, -2.345412265203656, -2.2272789958369668]
  global EndPoint_3_p=p[-.881393083068, .236091509244, -.719899996517, -2.921622237405, .223511391958, 1.059696386990]
  global EndPoint_3_q=[-0.4941922498240361, -0.366528207137808, 1.9775970148489037, -2.331322828366682, -1.8226773511189238, -0.24684150245642034]
  global ViaPoint_6_p=p[-.912548255351, .210580021925, -.719899997267, -1.717734049029, 1.909100649376, .647845411495]
  global ViaPoint_6_q=[-0.4341768676385165, -0.2852496793703114, 1.9498451544777904, -2.8758681558316064, -0.7528071078937408, 1.0640994632694927]
  $ 2 "Robot Program"
  $ 3 "'leave home'"
  # 'leave home'
  $ 4 "Set"
  set_tcp(p[-0.0095,-0.328,0.105,1.2092,-1.2092,1.2092])
  # begin: URCap Program Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  $ 5 "MachineLogic Move to Position"
  while isVentionMovementBusyMachineMotion1==True:
  sleep(0.05)
  end
  if(isVentionMovementBusyMachineMotion1 == False):
  isVentionMovementBusyMachineMotion1 = True
  socket_send_string("estop/status;", "MachineMotion1")
  temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
  while(temp_estop_var_vention=="estop/status true"):
  if temp_estop_var_vention=="estop/status true":
  sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
  end
  socket_send_string("estop/status;", "MachineMotion1")
  temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
  if temp_estop_var_vention=="estop/status true":
  popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
  end
  end
  else:
  popup("resource is being used already: MachineMotion1")
  halt
  end
  sendString("SET speed_v2 3000000.000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 50000.000", "Ack", "MachineMotion1")
  sendString("SET de_move_abs_1 750000.000", "Ack", "MachineMotion1")
  sendString("de_move_abs_exec", "Ack", "MachineMotion1")
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  pollString("isMotionCompleted", "MachineMotion isMotionCompleted = true", "MachineMotion1")
  isVentionMovementBusyMachineMotion1 = False
  sleep(0.03)
  # end: URCap Program Node
  $ 6 "MoveJ"
  $ 7 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 8 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 9 "'spin?'"
  # 'spin?'
  $ 10 "'points'"
  # 'points'
  $ 100 "fifth (backofhole)"
  $ 101 "'worked pretty good. my 4 points were not a circle so it moved kind of wonky. but still spun'"
  # 'worked pretty good. my 4 points were not a circle so it moved kind of wonky. but still spun'
  $ 102 "Set"
  set_tcp(p[0.00451,-0.328,0.105,1.2092,-1.2092,1.2092])
  $ 103 "MoveJ"
  $ 104 "Waypoint_13" "breakAfter"
  movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 105 "MoveL"
  $ 106 "Waypoint_14" "breakAfter"
  movel(Waypoint_14_p, a=1.2, v=0.25)
  $ 107 "MoveJ"
  $ 108 "Waypoint_15" "breakAfter"
  movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 109 "MoveL"
  $ 110 "Waypoint_18" "breakAfter"
  movel(Waypoint_18_p, a=1.2, v=0.25)
  $ 111 "Waypoint_19" "breakAfter"
  movel(Waypoint_19_p, a=1.2, v=0.25)
  $ 112 "Wait: 2.0"
  sleep(2.0)
  $ 113 "MoveP"
  $ 114 "CircleMove"
  $ 115 "ViaPoint_5" "noBreak"
  
  $ 116 "EndPoint_3" "breakAfter"
  movec(ViaPoint_5_p, EndPoint_3_p, a=1.2, v=0.01, r=0.025, mode=1)
  $ 117 "CircleMove"
  $ 118 "ViaPoint_6" "noBreak"
  
  $ 119 "Waypoint_19" "breakAfter"
  movec(ViaPoint_6_p, Waypoint_19_p, a=1.2, v=0.01, r=0.025, mode=1)
  $ 120 "CircleMove"
  $ 121 "ViaPoint_5" "noBreak"
  
  $ 122 "EndPoint_3" "breakAfter"
  movec(ViaPoint_5_p, EndPoint_3_p, a=1.2, v=0.01, r=0.025, mode=1)
end
