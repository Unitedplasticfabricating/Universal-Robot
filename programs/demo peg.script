def demo_peg():
  global _hidden_verificationVariable=0
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[-0.0095,-0.328,0.105,1.2092,-1.2092,1.2092])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_0cc7afbf_6516_41c6_843e_91f95ca3e8d5 = 0.0
  thread Step_Counter_Thread_e1bda70e_1a11_4498_863e_16a3844aa06c():
    while (True):
      step_count_0cc7afbf_6516_41c6_843e_91f95ca3e8d5 = step_count_0cc7afbf_6516_41c6_843e_91f95ca3e8d5 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_e1bda70e_1a11_4498_863e_16a3844aa06c()
  global Waypoint_1_p=p[.439488291023, .377651133715, .439882304084, 2.296548003389, 2.095070833464, -.064444183553]
  global Waypoint_1_q=[-3.2982399227469408, -1.6869866629004306, 2.321899940866662, 1.7986929609496611, 0.08275917652692975, -2.431212411529109]
  global Waypoint_2_p=p[-.567049013380, .119271761819, .439882304084, -.856813970855, 2.968909698347, .016424286016]
  global Waypoint_2_q=[-1.073829803656987, -1.6869866629004306, 2.321899940866662, 1.7986929609496611, 0.08275917652692975, -2.431212411529109]
  global Waypoint_3_p=p[-.782322536389, .119271761701, .439882304398, -.140949624631, -2.654339151425, -.057854625841]
  global Waypoint_3_q=[-0.670764243163811, -2.069479061592209, 2.4177055999697608, -0.9080010034216315, 1.074414093080244, 0.2723781118970452]
  global Waypoint_4_p=p[-.839555068472, .157819577259, .059483314354, -.135903553394, -2.576003259695, -.062120422904]
  global Waypoint_4_q=[-0.674957066647103, -1.2450149637802417, 2.7559975551282374, -2.156552460365175, 1.0931662005021288, 0.31377421275526773]
  global Waypoint_5_p=p[-.839555068452, .157819577243, .154032670476, -.135903553394, -2.576003259695, -.062120422904]
  global Waypoint_5_q=[-0.6747962542624064, -1.5138316503549856, 2.704456268539227, -1.8362637157793156, 1.0935100079692632, 0.31392497911065603]
  global Waypoint_6_p=p[-.930504374989, .247449023892, .154032670425, 1.726421895026, -2.025070567204, .481321832390]
  global Waypoint_6_q=[-0.8281170567754037, -0.7718327521404635, 1.8951474502440178, -3.4761935626737177, 0.8482017503260986, 2.5357190432451375]
  global Waypoint_7_p=p[-1.008946715792, .181991855168, .154032670314, 2.873696203366, -.493625856121, .826665525420]
  global Waypoint_7_q=[-0.3752913571192611, -0.48040284760358265, 1.1932621019866314, -3.2918799608211424, 1.6039408541601696, 3.1449691616977447]
  global Waypoint_8_p=p[-1.005760099784, .182332832686, .166843858369, 2.997181673097, -.386870863123, .813317296281]
  global Waypoint_8_q=[-0.3404532319613942, -0.47255379120221264, 0.7066779322013534, 0.29034040872971933, -1.6281992474301, 0.09376878173212067]
  global Waypoint_9_p=p[-1.005760099504, .135994823917, -.301870497741, -2.950946615181, -.165259046045, -.785324234460]
  global Waypoint_9_q=[-0.2081474647616952, -0.17024017112395384, 0.740512865404068, -0.02638691796766679, -1.8318174758440673, 0.21566785377219944]
  global Waypoint_13_p=p[-.820614795303, .235066599767, -.600712014654, 2.788970272795, -.398402105472, -1.179883498377]
  global Waypoint_13_q=[-0.6344014345366524, -0.49167038092430815, 2.1714451986284242, -2.4597477103615764, -1.7494300273178194, -0.42573648797660724]
  global Waypoint_12_p=p[-1.004069956591, .104198623471, -.600712014730, -1.742346992338, 1.879947582291, .910092082796]
  global Waypoint_12_q=[-0.28163753864209085, -0.37108975433136493, 2.026415487881917, -3.117728954500461, -0.7720667712342326, 1.1685741683988269]
  global Waypoint_11_p=p[-1.004069956675, .251363005784, -.600712014720, .228747654790, 2.337932908381, .154649264750]
  global Waypoint_11_q=[-0.35009770556742126, -0.20559470255037837, 1.6354114925450094, -3.80455893271186, -1.5340600969285223, 2.8511689051319413]
  global Waypoint_10_p=p[-.813178159950, .367752003732, -.600712014795, 1.820793629066, 1.594986373174, -.573546659365]
  global Waypoint_10_q=[-0.643436785238741, -0.27855319774792164, 1.8603197226654729, -3.5448870508744097, -2.295247763071051, 3.9002607877978406]
  global Waypoint_14_p=p[-.933005923956, .247304254396, -.556073372586, 2.880341906638, -.066130249196, -1.230194573270]
  global Waypoint_14_q=[-0.5158586283097799, -0.5527913860734417, 2.071402294861347, -2.3774332267686886, -1.8798700141428775, -0.3741446825320738]
  global ViaPoint_1_p=p[-.997805923747, .207514981750, -.556073372515, -1.687646300666, 1.802442344780, .746556476495]
  global ViaPoint_1_q=[-0.3544191268928074, -0.4667515387359842, 1.9707395990685779, -2.8206632092917148, -0.8424882862815117, 1.1641915746833593]
  global EndPoint_1_p=p[-1.049868209434, .270629300910, -.561339534668, .132561136798, 2.330783628654, -.022526510027]
  global EndPoint_1_q=[-0.40502098312170887, -0.2535113743667008, 1.5890663190752168, -3.650305236514269, -1.3824400976638938, 2.902827818313524]
  global ViaPoint_2_p=p[-.979336833396, .322736756750, -.561339534526, 1.807928505304, 1.682028902286, -.746990773540]
  global ViaPoint_2_q=[-0.555615208220245, -0.32600813936075124, 1.780156226303216, -3.432711965446565, -2.2378381072314006, 4.065409681025963]
  $ 2 "Robot Program"
  $ 3 "'leave home'"
  # 'leave home'
  $ 4 "Set"
  set_tcp(p[-0.0095,-0.328,0.105,1.2092,-1.2092,1.2092])
  # begin: URCap Program Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  $ 5 "MachineLogic Move to Position"
  while isVentionMovementBusyMachineMotion1==True:
  sleep(0.05)
  end
  if(isVentionMovementBusyMachineMotion1 == False):
  isVentionMovementBusyMachineMotion1 = True
  socket_send_string("estop/status;", "MachineMotion1")
  temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
  while(temp_estop_var_vention=="estop/status true"):
  if temp_estop_var_vention=="estop/status true":
  sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
  end
  socket_send_string("estop/status;", "MachineMotion1")
  temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
  if temp_estop_var_vention=="estop/status true":
  popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
  end
  end
  else:
  popup("resource is being used already: MachineMotion1")
  halt
  end
  sendString("SET speed_v2 3000000.000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 50000.000", "Ack", "MachineMotion1")
  sendString("SET de_move_abs_1 750000.000", "Ack", "MachineMotion1")
  sendString("de_move_abs_exec", "Ack", "MachineMotion1")
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  pollString("isMotionCompleted", "MachineMotion isMotionCompleted = true", "MachineMotion1")
  isVentionMovementBusyMachineMotion1 = False
  sleep(0.03)
  # end: URCap Program Node
  $ 6 "MoveJ"
  $ 7 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 8 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 9 "'spin?'"
  # 'spin?'
  $ 10 "'points'"
  # 'points'
  $ 11 "If 1≟2"
  if (1 == 2):
    $ 12 "'tilt'"
    # 'tilt'
    $ 13 "MoveJ"
    $ 14 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 15 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 16 "MoveJ"
    $ 17 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 18 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 19 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 21 "MoveJ"
    $ 22 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "'actual'"
    # 'actual'
    $ 24 "MoveJ"
    $ 25 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 26 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 27 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 28 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 29 "If 1≟2"
  if (1 == 2):
    $ 30 "first try"
    $ 31 "'worked pretty good. my 4 points were not a circle so it moved kind of wonky. but still spun'"
    # 'worked pretty good. my 4 points were not a circle so it moved kind of wonky. but still spun'
    $ 32 "MoveJ"
    $ 33 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 34 "MoveP"
    $ 35 "CircleMove"
    $ 36 "Waypoint_12" "noBreak"
    
    $ 37 "Waypoint_11" "breakAfter"
    movec(Waypoint_12_p, Waypoint_11_p, a=1.2, v=0.01, r=0.025, mode=1)
    $ 38 "CircleMove"
    $ 39 "Waypoint_10" "noBreak"
    
    $ 40 "Waypoint_13" "breakAfter"
    movec(Waypoint_10_p, Waypoint_13_p, a=1.2, v=0.01, r=0.0, mode=1)
  end
  $ 41 "second try"
  $ 42 "'worked pretty good. my 4 points were not a circle so it moved kind of wonky. but still spun'"
  # 'worked pretty good. my 4 points were not a circle so it moved kind of wonky. but still spun'
  $ 43 "MoveJ"
  $ 44 "Waypoint_13" "breakAfter"
  movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 45 "MoveL"
  $ 46 "Waypoint_14" "breakAfter"
  movel(Waypoint_14_p, a=1.2, v=0.25)
  $ 47 "MoveP"
  $ 48 "CircleMove"
  $ 49 "ViaPoint_1" "noBreak"
  
  $ 50 "EndPoint_1" "breakAfter"
  movec(ViaPoint_1_p, EndPoint_1_p, a=1.2, v=0.01, r=0.025, mode=1)
  $ 51 "CircleMove"
  $ 52 "ViaPoint_2" "noBreak"
  
  $ 53 "Waypoint_14" "breakAfter"
  movec(ViaPoint_2_p, Waypoint_14_p, a=1.2, v=0.01, r=0.025, mode=1)
  $ 54 "CircleMove"
  $ 55 "ViaPoint_1" "noBreak"
  
  $ 56 "EndPoint_1" "breakAfter"
  movec(ViaPoint_1_p, EndPoint_1_p, a=1.2, v=0.01, r=0.025, mode=1)
end
