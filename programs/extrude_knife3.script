def extrude_knife3():
  global _hidden_verificationVariable=0
  step_count_34c56969_024b_4e9f_8ae3_bf70adbab6f2 = 0.0
  thread Step_Counter_Thread_d76e9671_c5a1_4ada_8a26_f2b1a85ca49b():
    while (True):
      step_count_34c56969_024b_4e9f_8ae3_bf70adbab6f2 = step_count_34c56969_024b_4e9f_8ae3_bf70adbab6f2 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_d76e9671_c5a1_4ada_8a26_f2b1a85ca49b()
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(10.450000, [0.000000, -0.064000, 0.064000], [0.076889, 0.076889, 0.076889, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_1_p=p[.397380247322, .356253634699, .319820846021, 2.316316320871, 2.057594704604, .074118471609]
  global Waypoint_1_q=[-3.457949940358297, -2.056894441644186, 2.32658034959902, -0.2270551484874268, -0.19935208955873662, -0.10533696809877569]
  global Waypoint_3_p=p[.454852104155, .405448828659, .064015413765, 2.316807606413, 2.051392071696, .076664825947]
  global Waypoint_3_q=[-3.274653975163595, -1.5604325172356148, 2.467809502278463, -0.34438879907641606, -0.014281574879781544, -0.6303489843951624]
  global Waypoint_2_p=p[.439080613327, .405451327202, .061343367777, 2.316821026391, 2.051408078617, .076639537657]
  global Waypoint_2_q=[-3.2805586496936243, -1.6217113933958949, 2.5062666575061243, -0.4847274583629151, -0.019731823598043263, -0.467142407094137]
  global Waypoint_4_p=p[.430139206229, .405442865710, .064313039550, 2.316835244447, 2.051367743016, .076649924073]
  global Waypoint_4_q=[-3.284172598515646, -1.655306955377096, 2.5217352549182337, -0.5282495778850098, -0.02314788499941045, -0.4054973761187952]
  global Waypoint_6_p=p[.430152545350, .405437911340, .066013265307, 2.316844314970, 2.051349610740, .076650144188]
  global Waypoint_6_q=[-3.2841761747943323, -1.6579028568663539, 2.5203173796283167, -0.5243228238872071, -0.023137394581929982, -0.4054144064532679]
  global Waypoint_5_p=p[.412417603701, .405437232275, .065226644408, 2.316830409933, 2.051326957505, .076672130031]
  global Waypoint_5_q=[-3.291912857686178, -1.705691476861471, 2.551997963582174, -0.5933647912791749, -0.0306323210345667, -0.32026607195009404]
  while (True):
    $ 2 "Robot Program"
    $ 3 "Home"
    movej([-3.263871279528736, -1.215675136732635, 1.6661372679627775, 0.6518080188827131, -0.009357010780473018, -1.165813237683837], a=1.3962634015954636, v=1.0471975511965976)
    $ 4 "Set"
    set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
    $ 5 "MoveJ"
    $ 6 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 8 "'move above bucket'"
    # 'move above bucket'
    $ 9 "MoveJ"
    $ 10 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 11 "'extrude out a foot'"
    # 'extrude out a foot'
    $ 15 "'slice'"
    # 'slice'
    $ 16 "MoveL"
    $ 17 "Waypoint_2" "breakAfter"
    movel(Waypoint_2_p, a=0.05, v=0.03)
    $ 18 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=0.05, v=0.03)
    $ 19 "Waypoint_6" "breakAfter"
    movel(Waypoint_6_p, a=0.05, v=0.03)
    $ 20 "Waypoint_5" "breakAfter"
    movel(Waypoint_5_p, a=0.05, v=0.03)
    $ 21 "MoveJ"
    $ 22 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 24 "Home"
    movej([-3.263871279528736, -1.215675136732635, 1.6661372679627775, 0.6518080188827131, -0.009357010780473018, -1.165813237683837], a=1.3962634015954636, v=1.0471975511965976)
  end
end
