def straight_top_demo():
  global _hidden_verificationVariable=0
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_gravity([0.0, 0.0, 9.82])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_935dbc96_cd99_4121_ab5b_d3d6ef4dec80 = 0.0
  thread Step_Counter_Thread_73284af6_db75_4028_af7c_79f71c37ba19():
    while (True):
      step_count_935dbc96_cd99_4121_ab5b_d3d6ef4dec80 = step_count_935dbc96_cd99_4121_ab5b_d3d6ef4dec80 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_73284af6_db75_4028_af7c_79f71c37ba19()
  global approach_p=p[-1.245427089291, -.117910587430, .443766749061, .115341915577, 3.114598670938, .265717910023]
  global approach_q=[0.0016610372042508523, -1.2424780514467066, 1.4152662723346925, -0.1662824334254358, 1.6480608027368087, -0.16916892742292955]
  global Waypoint_2_p=p[-1.245427089328, -.117910587191, .394891560155, .115341828692, 3.114598671493, .265717939985]
  global Waypoint_2_q=[0.0016352206161416305, -1.23084320150154, 1.4675904201855958, -0.23024391501807884, 1.6480604174574802, -0.16920140213883883]
  global Waypoint_4_p=p[-1.242204989780, -.074853776233, .391738683919, .117015706461, 3.132438203570, -.012126404753]
  global Waypoint_4_q=[-0.10132611669012803, -1.2579299430461397, 1.5006190481047734, -0.23628379321890058, 1.5451038614321506, 0.008104656852220948]
  global Waypoint_6_p=p[-1.227078195972, .127460809782, .390228426537, .117015706544, 3.132438203567, -.012126404752]
  global Waypoint_6_q=[-0.3105366410100334, -1.2748171220256426, 1.5258183835544266, -0.24458835221616138, 1.3359007914435628, 0.006760954663175056]
  global Waypoint_7_p=p[-1.221787701117, .199926785966, .401073027018, .114795357049, 3.105878084820, .336910767958]
  global Waypoint_7_q=[-0.31050889645947244, -1.2749939079280823, 1.5244548404925427, -0.24290261598699558, 1.335966032547895, -0.21712502001859058]
  global Waypoint_8_p=p[-1.221787701046, .199926785944, .420618588977, .114795357049, 3.105878084820, .336910767958]
  global Waypoint_8_q=[-0.3104985864602092, -1.2803217574975179, 1.5040417587872579, -0.2171649671280953, 1.3359662583158471, -0.21711094341820125]
  while (True):
    $ 2 "Robot Program"
    $ 3 "demo points"
    $ 7 "MoveJ"
    $ 8 "approach" "breakAfter"
    movej(get_inverse_kin(approach_p, qnear=approach_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 19 "MoveL"
    $ 21 "Waypoint_2" "breakAfter"
    movel(Waypoint_2_p, a=1.2, v=0.012)
    $ 24 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=1.2, v=0.012)
    $ 25 "Waypoint_6" "breakAfter"
    movel(Waypoint_6_p, a=1.2, v=0.012)
    $ 26 "Waypoint_7" "breakAfter"
    movel(Waypoint_7_p, a=1.2, v=0.012)
    $ 27 "Waypoint_8" "breakAfter"
    movel(Waypoint_8_p, a=1.2, v=0.012)
  end
end
