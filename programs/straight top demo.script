def straight_top_demo():
  global _hidden_verificationVariable=0
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_gravity([0.0, 0.0, 9.82])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_935dbc96_cd99_4121_ab5b_d3d6ef4dec80 = 0.0
  thread Step_Counter_Thread_73284af6_db75_4028_af7c_79f71c37ba19():
    while (True):
      step_count_935dbc96_cd99_4121_ab5b_d3d6ef4dec80 = step_count_935dbc96_cd99_4121_ab5b_d3d6ef4dec80 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_73284af6_db75_4028_af7c_79f71c37ba19()
  global approach_p=p[-1.245427089291, -.117910587430, .443766749061, .115341915577, 3.114598670938, .265717910023]
  global approach_q=[0.0016610372042508523, -1.2424780514467066, 1.4152662723346925, -0.1662824334254358, 1.6480608027368087, -0.16916892742292955]
  global Waypoint_2_p=p[-1.245427089328, -.117910587191, .394891560155, .115341828692, 3.114598671493, .265717939985]
  global Waypoint_2_q=[0.0016352206161416305, -1.23084320150154, 1.4675904201855958, -0.23024391501807884, 1.6480604174574802, -0.16920140213883883]
  global Waypoint_4_p=p[-1.242204989780, -.074853776233, .391738683919, .117015706461, 3.132438203570, -.012126404753]
  global Waypoint_4_q=[-0.10132611669012803, -1.2579299430461397, 1.5006190481047734, -0.23628379321890058, 1.5451038614321506, 0.008104656852220948]
  global endofstraight_p=p[-1.217811580524, .251074172899, .389295881206, .117015706461, 3.132438203569, -.012126404753]
  global endofstraight_q=[-0.4339124849484399, -1.2614036150658476, 1.5088474502741933, -0.24088299178735362, 1.2125279266228892, 0.005918330109492054]
  global andmoved_p=p[-1.213760371905, .305752916645, .399276532234, .115455614526, 3.116137222714, .251261254886]
  global andmoved_q=[-0.4337758588668166, -1.26260082414354, 1.5046237016629, -0.23546264465126576, 1.2126637831496927, -0.16273671612757212]
  global Waypoint_5_p=p[-1.213760371841, .305752916205, .427713225740, .115455614670, 3.116137222702, .251261254952]
  global Waypoint_5_q=[-0.43376086358527743, -1.2699382989367898, 1.474577688701726, -0.19808645575653383, 1.212664002615762, -0.16271592275936708]
  while (True):
    $ 2 "Robot Program"
    $ 3 "demo points"
    $ 7 "MoveJ"
    $ 8 "approach" "breakAfter"
    movej(get_inverse_kin(approach_p, qnear=approach_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "MoveL"
    $ 11 "Waypoint_2" "breakAfter"
    movel(Waypoint_2_p, a=0.05, v=0.012)
    $ 14 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=0.05, v=0.012)
    $ 15 "endofstraight" "breakAfter"
    movel(endofstraight_p, a=0.05, v=0.012)
    $ 17 "andmoved" "breakAfter"
    movel(andmoved_p, a=0.05, v=0.012)
    $ 18 "Waypoint_5" "breakAfter"
    movel(Waypoint_5_p, a=0.05, v=0.012)
  end
end
