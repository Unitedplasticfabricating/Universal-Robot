def Corner_Homing_45():
  global _hidden_verificationVariable=0
  step_count_d163db0e_cd2c_44d8_b9ae_56dc188ffc9c = 0.0
  thread Step_Counter_Thread_266cc33b_ccd5_40a7_b5eb_615250b80b83():
    while (True):
      step_count_d163db0e_cd2c_44d8_b9ae_56dc188ffc9c = step_count_d163db0e_cd2c_44d8_b9ae_56dc188ffc9c + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_266cc33b_ccd5_40a7_b5eb_615250b80b83()
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_safety_mode_transition_hardness(1)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_4_p=p[-.658264763546, .299530128456, .030909835036, .426821001551, -1.621505068649, .437070885767]
  global Waypoint_4_q=[-1.350241486226217, -0.9702387017062684, 2.492185179387228, -1.7834822140135707, -0.33723670641054326, 1.8489984273910522]
  global Waypoint_13_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_13_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  global Waypoint_6_p=p[-.343952006258, .632142227456, .615174722551, -.025016780489, .033118613186, -3.068519793995]
  global Waypoint_6_q=[-1.3432858302651205, -0.8819789687502322, 2.478150442072055, -3.1920490209023007, 1.5816449765089289, -0.1549241290366341]
  global Waypoint_14_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_14_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  global Waypoint_41_p=p[.392127936214, .533269017847, .644148583936, .057822570580, 2.125982462550, 2.134033989912]
  global Waypoint_41_q=[-3.4579578081714075, -2.0569120846190394, 2.3265841642962855, -0.22706885755572515, -0.1993349234210413, -0.10534984270204717]
  $ 2 "Robot Program"
  $ 3 "'Use this program when tool is already positioned close to corner at 45deg'"
  # 'Use this program when tool is already positioned close to corner at 45deg'
  $ 4 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
  # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
  $ 5 "Set"
  set_tcp(p[-3.4459194423430706E-4,-0.016122577745637523,0.2834979079810125,0.0,0.0,0.0])
  $ 14 "Wait: 1.0"
  sleep(1.0)
  $ 15 "tp≔get_actual_tcp_pose()"
  global tp= get_actual_tcp_pose ()
  $ 19 "path_pre≔get_corner_homing_45_pathpoints(tp,tcp_pose_top)"
  global path_pre=get_corner_homing_45_pathpoints(tp,tcp_pose_top)
  $ 20 "ph1≔path_pre[0]"
  global ph1=path_pre[0]
  $ 21 "ph2≔path_pre[1]"
  global ph2=path_pre[1]
  $ 22 "ph3≔path_pre[2]"
  global ph3=path_pre[2]
  $ 23 "ph4≔path_pre[3]"
  global ph4=path_pre[3]
  $ 24 "ph5≔path_pre[4]"
  global ph5=path_pre[4]
  $ 25 "ph6≔path_pre[5]"
  global ph6=path_pre[5]
  $ 26 "ph7≔path_pre[6]"
  global ph7=path_pre[6]
  $ 27 "ph2up≔path_pre[7]"
  global ph2up=path_pre[7]
  $ 28 "ph4up≔path_pre[8]"
  global ph4up=path_pre[8]
  $ 29 "MoveL"
  $ 30 "ph1" "breakAfter"
  movel(ph1, a=0.2, v=0.25)
  $ 31 "ph2" "breakAfter"
  movel(ph2, a=0.2, v=0.25)
  $ 32 "MoveL"
  $ 33 "Direction: Base"
  global move_thread_flag_33=0
  thread move_thread_33():
    enter_critical
    move_thread_flag_33 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.02)
    move_thread_flag_33 = 2
    exit_critical
  end
  move_thread_flag_33 = 0
  move_thread_han_33 = run move_thread_33()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_33
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 34 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 35 "p11≔get_actual_tcp_pose()"
  global p11= get_actual_tcp_pose ()
  $ 36 "MoveJ"
  $ 37 "ph2" "breakAfter"
  movej(ph2, a=1.3962634015954636, v=1.0471975511965976)
  $ 38 "ph2up" "breakAfter"
  movej(ph2up, a=1.3962634015954636, v=1.0471975511965976)
  $ 39 "MoveL"
  $ 40 "Direction: Base"
  global move_thread_flag_40=0
  thread move_thread_40():
    enter_critical
    move_thread_flag_40 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.02)
    move_thread_flag_40 = 2
    exit_critical
  end
  move_thread_flag_40 = 0
  move_thread_han_40 = run move_thread_40()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_40
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 41 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 42 "p13≔get_actual_tcp_pose()"
  global p13= get_actual_tcp_pose ()
  $ 43 "MoveJ"
  $ 44 "ph2up" "breakAfter"
  movej(ph2up, a=1.3962634015954636, v=1.0471975511965976)
  $ 45 "ph3" "breakAfter"
  movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
  $ 46 "MoveL"
  $ 47 "Direction: Base"
  global move_thread_flag_47=0
  thread move_thread_47():
    enter_critical
    move_thread_flag_47 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.02)
    move_thread_flag_47 = 2
    exit_critical
  end
  move_thread_flag_47 = 0
  move_thread_han_47 = run move_thread_47()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_47
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 48 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 49 "p12≔get_actual_tcp_pose()"
  global p12= get_actual_tcp_pose ()
  $ 53 "MoveJ"
  $ 54 "ph3" "breakAfter"
  movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
  $ 55 "ph1" "breakAfter"
  movej(ph1, a=1.3962634015954636, v=1.0471975511965976)
  $ 60 "MoveL"
  $ 61 "ph4" "breakAfter"
  movel(ph4, a=1.2, v=0.25)
  $ 62 "MoveL"
  $ 63 "Direction: Base"
  global move_thread_flag_63=0
  thread move_thread_63():
    enter_critical
    move_thread_flag_63 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.02)
    move_thread_flag_63 = 2
    exit_critical
  end
  move_thread_flag_63 = 0
  move_thread_han_63 = run move_thread_63()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_63
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 64 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 65 "p21≔get_actual_tcp_pose()"
  global p21= get_actual_tcp_pose ()
  $ 66 "MoveL"
  $ 67 "ph4" "breakAfter"
  movel(ph4, a=1.2, v=0.25)
  $ 68 "ph4up" "breakAfter"
  movel(ph4up, a=1.2, v=0.25)
  $ 69 "MoveL"
  $ 70 "Direction: Base"
  global move_thread_flag_70=0
  thread move_thread_70():
    enter_critical
    move_thread_flag_70 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.02)
    move_thread_flag_70 = 2
    exit_critical
  end
  move_thread_flag_70 = 0
  move_thread_han_70 = run move_thread_70()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_70
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 71 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 72 "p23≔get_actual_tcp_pose()"
  global p23= get_actual_tcp_pose ()
  $ 73 "MoveL"
  $ 74 "ph4up" "breakAfter"
  movel(ph4up, a=1.2, v=0.25)
  $ 75 "ph5" "breakAfter"
  movel(ph5, a=1.2, v=0.25)
  $ 76 "MoveL"
  $ 77 "Direction: Base"
  global move_thread_flag_77=0
  thread move_thread_77():
    enter_critical
    move_thread_flag_77 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.02)
    move_thread_flag_77 = 2
    exit_critical
  end
  move_thread_flag_77 = 0
  move_thread_han_77 = run move_thread_77()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_77
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 78 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 79 "p22≔get_actual_tcp_pose()"
  global p22= get_actual_tcp_pose ()
  $ 90 "MoveJ"
  $ 91 "ph5" "breakAfter"
  movej(ph5, a=1.3962634015954636, v=1.0471975511965976)
  $ 92 "MoveL"
  $ 93 "ph4" "breakAfter"
  movel(ph4, a=1.2, v=0.25)
  $ 94 "ph1" "breakAfter"
  movel(ph1, a=1.2, v=0.25)
  $ 95 "MoveJ"
  $ 96 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 97 "Waypoint_13" "breakAfter"
  movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 98 "Waypoint_6" "breakAfter"
  movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 99 "ph6" "breakAfter"
  movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
  $ 100 "ph7" "breakAfter"
  movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
  $ 104 "MoveL"
  $ 105 "Direction: Base Z+"
  global move_thread_flag_105=0
  thread move_thread_105():
    enter_critical
    move_thread_flag_105 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.02)
    move_thread_flag_105 = 2
    exit_critical
  end
  move_thread_flag_105 = 0
  move_thread_han_105 = run move_thread_105()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_105
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 106 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 107 "p3≔get_actual_tcp_pose()"
  global p3= get_actual_tcp_pose ()
  $ 108 "MoveJ"
  $ 109 "ph7" "breakAfter"
  movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
  $ 110 "ph6" "breakAfter"
  movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
  $ 111 "Waypoint_14" "breakAfter"
  movej(get_inverse_kin(Waypoint_14_p, qnear=Waypoint_14_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 112 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 113 "Waypoint_41" "breakAfter"
  movej(get_inverse_kin(Waypoint_41_p, qnear=Waypoint_41_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 114 "'above waypoint is home'"
  # 'above waypoint is home'
  $ 116 "Comment"
  # Comment
  $ 117 "Comment"
  # Comment
  $ 118 "Comment"
  # Comment
  $ 119 "Comment"
  # Comment
  $ 120 "Comment"
  # Comment
  $ 121 "Comment"
  # Comment
end
