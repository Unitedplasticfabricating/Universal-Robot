def Corner_Homing_45():
  global _hidden_verificationVariable=0
  set_tcp(p[0.0,0.0,0.246,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(2.760000, [0.004000, -0.022000, 0.072000], [0.008360, 0.008360, 0.008360, 0.000000, 0.000000, 0.000000])
  global Plane_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  step_count_36668321_2322_45b9_bd38_48230500a914 = 0.0
  thread Step_Counter_Thread_630e5f72_4ff5_4f1c_ac29_29e86c9f50a2():
    while (True):
      step_count_36668321_2322_45b9_bd38_48230500a914 = step_count_36668321_2322_45b9_bd38_48230500a914 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_630e5f72_4ff5_4f1c_ac29_29e86c9f50a2()
  global Waypoint_1_p=p[-.726759535842, .313857108743, -.003219018564, -.130205597847, -1.660489874131, -.140331173900]
  global Waypoint_1_q=[-1.1356399695025843, -0.8834679287723084, 2.671961847935812, -1.629258771935934, 0.611339807510376, 1.4263536930084229]
  global Waypoint_2_p=p[-1.013668324414, .283773644431, .013403841505, -.130236373715, -1.660514510662, -.140312305297]
  global Waypoint_2_q=[-0.6423338095294397, -0.9283088010600586, 2.3237603346454065, -1.2926811438849946, 1.1005513668060303, 1.510843276977539]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  def align_tcp_45l():
    $ 96 "align_tcp_45l" "noBreak"
    $ 97 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 98 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 99 "aligned_y_pose≔p[cp[0],cp[1],cp[2],.445,-1.562,.483]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],.445,-1.562,.483]
    $ 100 "MoveJ"
    $ 101 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_left():
    $ 102 "align_tcp_left" "noBreak"
    $ 103 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 104 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 105 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 106 "MoveJ"
    $ 107 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_up():
    $ 108 "align_tcp_up" "noBreak"
    $ 109 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 110 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 111 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 112 "MoveJ"
    $ 113 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_forward():
    $ 114 "align_tcp_forward" "noBreak"
    $ 115 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 116 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 117 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 118 "MoveJ"
    $ 119 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 2 "Robot Program"
  $ 3 "'Use this program when tool is already positioned close to corner at 45deg'"
  # 'Use this program when tool is already positioned close to corner at 45deg'
  $ 4 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
  # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
  $ 5 "Set"
  set_tcp(p[0.0,0.0,0.246,0.0,0.0,0.0])
  $ 6 "'dummy move below for debug'"
  # 'dummy move below for debug'
  $ 7 "Home"
  movej([-3.523764549353853, -1.8742328384451357, 2.4457816539194326, 0.058650484450722296, -0.22275931369636837, -0.6273979632655688], a=1.3962634015954636, v=1.0471975511965976)
  $ 8 "MoveJ"
  $ 9 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 10 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 11 "Wait: 1.0"
  sleep(1.0)
  $ 12 "tp≔get_actual_tcp_pose()"
  global tp= get_actual_tcp_pose ()
  $ 13 "'back up'"
  # 'back up'
  $ 14 "MoveL"
  $ 15 "Direction: Base X+"
  global move_thread_flag_15=0
  thread move_thread_15():
    enter_critical
    move_thread_flag_15 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_15 = 2
    exit_critical
  end
  move_thread_flag_15 = 0
  move_thread_han_15 = run move_thread_15()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_15 > 1):
      join move_thread_han_15
      $ 16 "Until (distance)"
      break
    end
    sync()
  end
  $ 17 "Call align_tcp_45l"
  align_tcp_45l()
  $ 18 "MoveL"
  $ 19 "Direction: Base X+"
  global move_thread_flag_19=0
  thread move_thread_19():
    enter_critical
    move_thread_flag_19 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_19 = 2
    exit_critical
  end
  move_thread_flag_19 = 0
  move_thread_han_19 = run move_thread_19()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_19 > 1):
      join move_thread_han_19
      $ 20 "Until (distance)"
      break
    end
    sync()
  end
  $ 21 "align_tcp_left()"
  align_tcp_left()
  $ 22 "'right side'"
  # 'right side'
  $ 23 "MoveL"
  $ 24 "Direction: Base X-"
  global move_thread_flag_24=0
  thread move_thread_24():
    enter_critical
    move_thread_flag_24 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_24 = 2
    exit_critical
  end
  move_thread_flag_24 = 0
  move_thread_han_24 = run move_thread_24()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_24 > 1):
      join move_thread_han_24
      $ 25 "Until (distance)"
      break
    end
    sync()
  end
  $ 26 "MoveL"
  $ 27 "Direction: Base Y-"
  global move_thread_flag_27=0
  thread move_thread_27():
    enter_critical
    move_thread_flag_27 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_27 = 2
    exit_critical
  end
  move_thread_flag_27 = 0
  move_thread_han_27 = run move_thread_27()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_27
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 28 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 29 "p11≔get_actual_tcp_pose()"
  global p11= get_actual_tcp_pose ()
  $ 30 "MoveL"
  $ 31 "Direction: Base Y+"
  global move_thread_flag_31=0
  thread move_thread_31():
    enter_critical
    move_thread_flag_31 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_31 = 2
    exit_critical
  end
  move_thread_flag_31 = 0
  move_thread_han_31 = run move_thread_31()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_31 > 1):
      join move_thread_han_31
      $ 32 "Until (distance)"
      break
    end
    sync()
  end
  $ 33 "MoveL"
  $ 34 "Direction: Base X-"
  global move_thread_flag_34=0
  thread move_thread_34():
    enter_critical
    move_thread_flag_34 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.15)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_34 = 2
    exit_critical
  end
  move_thread_flag_34 = 0
  move_thread_han_34 = run move_thread_34()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_34 > 1):
      join move_thread_han_34
      $ 35 "Until (distance)"
      break
    end
    sync()
  end
  $ 36 "MoveL"
  $ 37 "Direction: Base Y-"
  global move_thread_flag_37=0
  thread move_thread_37():
    enter_critical
    move_thread_flag_37 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_37 = 2
    exit_critical
  end
  move_thread_flag_37 = 0
  move_thread_han_37 = run move_thread_37()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_37
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 38 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 39 "p12≔get_actual_tcp_pose()"
  global p12= get_actual_tcp_pose ()
  $ 40 "MoveL"
  $ 41 "Direction: Base Y+"
  global move_thread_flag_41=0
  thread move_thread_41():
    enter_critical
    move_thread_flag_41 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_41 = 2
    exit_critical
  end
  move_thread_flag_41 = 0
  move_thread_han_41 = run move_thread_41()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_41 > 1):
      join move_thread_han_41
      $ 42 "Until (distance)"
      break
    end
    sync()
  end
  $ 43 "MoveL"
  $ 44 "Direction: Base X+"
  global move_thread_flag_44=0
  thread move_thread_44():
    enter_critical
    move_thread_flag_44 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.3)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_44 = 2
    exit_critical
  end
  move_thread_flag_44 = 0
  move_thread_han_44 = run move_thread_44()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_44 > 1):
      join move_thread_han_44
      $ 45 "Until (distance)"
      break
    end
    sync()
  end
  $ 46 "align_tcp_forward()"
  align_tcp_forward()
  $ 47 "'back side'"
  # 'back side'
  $ 48 "MoveL"
  $ 49 "Direction: Base Y-"
  global move_thread_flag_49=0
  thread move_thread_49():
    enter_critical
    move_thread_flag_49 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_49 = 2
    exit_critical
  end
  move_thread_flag_49 = 0
  move_thread_han_49 = run move_thread_49()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_49 > 1):
      join move_thread_han_49
      $ 50 "Until (distance)"
      break
    end
    sync()
  end
  $ 51 "MoveL"
  $ 52 "Direction: Base X-"
  global move_thread_flag_52=0
  thread move_thread_52():
    enter_critical
    move_thread_flag_52 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_52 = 2
    exit_critical
  end
  move_thread_flag_52 = 0
  move_thread_han_52 = run move_thread_52()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_52
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 53 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 54 "p21≔get_actual_tcp_pose()"
  global p21= get_actual_tcp_pose ()
  $ 55 "MoveL"
  $ 56 "Direction: Base X+"
  global move_thread_flag_56=0
  thread move_thread_56():
    enter_critical
    move_thread_flag_56 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_56 = 2
    exit_critical
  end
  move_thread_flag_56 = 0
  move_thread_han_56 = run move_thread_56()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_56 > 1):
      join move_thread_han_56
      $ 57 "Until (distance)"
      break
    end
    sync()
  end
  $ 58 "MoveL"
  $ 59 "Direction: Base Y-"
  global move_thread_flag_59=0
  thread move_thread_59():
    enter_critical
    move_thread_flag_59 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.15)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_59 = 2
    exit_critical
  end
  move_thread_flag_59 = 0
  move_thread_han_59 = run move_thread_59()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_59 > 1):
      join move_thread_han_59
      $ 60 "Until (distance)"
      break
    end
    sync()
  end
  $ 61 "MoveL"
  $ 62 "Direction: Base X-"
  global move_thread_flag_62=0
  thread move_thread_62():
    enter_critical
    move_thread_flag_62 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_62 = 2
    exit_critical
  end
  move_thread_flag_62 = 0
  move_thread_han_62 = run move_thread_62()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_62
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 63 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 64 "p22≔get_actual_tcp_pose()"
  global p22= get_actual_tcp_pose ()
  $ 65 "MoveL"
  $ 66 "Direction: Base X+"
  global move_thread_flag_66=0
  thread move_thread_66():
    enter_critical
    move_thread_flag_66 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_66 = 2
    exit_critical
  end
  move_thread_flag_66 = 0
  move_thread_han_66 = run move_thread_66()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_66 > 1):
      join move_thread_han_66
      $ 67 "Until (distance)"
      break
    end
    sync()
  end
  $ 68 "'regroup for up turn'"
  # 'regroup for up turn'
  $ 69 "MoveL"
  $ 70 "Direction: Base X+"
  global move_thread_flag_70=0
  thread move_thread_70():
    enter_critical
    move_thread_flag_70 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_70 = 2
    exit_critical
  end
  move_thread_flag_70 = 0
  move_thread_han_70 = run move_thread_70()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_70 > 1):
      join move_thread_han_70
      $ 71 "Until (distance)"
      break
    end
    sync()
  end
  $ 72 "Direction: Base Y+"
  global move_thread_flag_72=0
  thread move_thread_72():
    enter_critical
    move_thread_flag_72 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.5)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_72 = 2
    exit_critical
  end
  move_thread_flag_72 = 0
  move_thread_han_72 = run move_thread_72()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_72 > 1):
      join move_thread_han_72
      $ 73 "Until (distance)"
      break
    end
    sync()
  end
  $ 74 "MoveL"
  $ 75 "Direction: Base Z-"
  global move_thread_flag_75=0
  thread move_thread_75():
    enter_critical
    move_thread_flag_75 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_75 = 2
    exit_critical
  end
  move_thread_flag_75 = 0
  move_thread_han_75 = run move_thread_75()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_75 > 1):
      join move_thread_han_75
      $ 76 "Until (distance)"
      break
    end
    sync()
  end
  $ 77 "align_tcp_up()"
  align_tcp_up()
  $ 78 "MoveL"
  $ 79 "Direction: Base X-"
  global move_thread_flag_79=0
  thread move_thread_79():
    enter_critical
    move_thread_flag_79 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.25)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_79 = 2
    exit_critical
  end
  move_thread_flag_79 = 0
  move_thread_han_79 = run move_thread_79()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_79 > 1):
      join move_thread_han_79
      $ 80 "Until (distance)"
      break
    end
    sync()
  end
  $ 81 "Direction: Base Y-"
  global move_thread_flag_81=0
  thread move_thread_81():
    enter_critical
    move_thread_flag_81 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.32)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_81 = 2
    exit_critical
  end
  move_thread_flag_81 = 0
  move_thread_han_81 = run move_thread_81()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_81 > 1):
      join move_thread_han_81
      $ 82 "Until (distance)"
      break
    end
    sync()
  end
  $ 83 "'bottom side'"
  # 'bottom side'
  $ 84 "MoveL"
  $ 85 "Direction: Base Z+"
  global move_thread_flag_85=0
  thread move_thread_85():
    enter_critical
    move_thread_flag_85 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_85 = 2
    exit_critical
  end
  move_thread_flag_85 = 0
  move_thread_han_85 = run move_thread_85()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_85
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 86 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 87 "p3≔get_actual_tcp_pose()"
  global p3= get_actual_tcp_pose ()
  $ 88 "MoveL"
  $ 89 "Direction: Base Z-"
  global move_thread_flag_89=0
  thread move_thread_89():
    enter_critical
    move_thread_flag_89 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_89 = 2
    exit_critical
  end
  move_thread_flag_89 = 0
  move_thread_han_89 = run move_thread_89()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_89 > 1):
      join move_thread_han_89
      $ 90 "Until (distance)"
      break
    end
    sync()
  end
  $ 91 "MoveL"
  $ 92 "Direction: Base X+"
  global move_thread_flag_92=0
  thread move_thread_92():
    enter_critical
    move_thread_flag_92 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_92 = 2
    exit_critical
  end
  move_thread_flag_92 = 0
  move_thread_han_92 = run move_thread_92()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_92 > 1):
      join move_thread_han_92
      $ 93 "Until (distance)"
      break
    end
    sync()
  end
  $ 94 "Direction: Base Y+"
  global move_thread_flag_94=0
  thread move_thread_94():
    enter_critical
    move_thread_flag_94 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_94 = 2
    exit_critical
  end
  move_thread_flag_94 = 0
  move_thread_han_94 = run move_thread_94()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_94 > 1):
      join move_thread_han_94
      $ 95 "Until (distance)"
      break
    end
    sync()
  end
end
