def test_circ_motion4():
  global _hidden_verificationVariable=0
  set_target_payload(0.310000, [0.000000, 0.000000, 0.009500], [0.000219, 0.000219, 0.000219, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  step_count_88b408a8_f57a_446b_aeee_631535929c84 = 0.0
  thread Step_Counter_Thread_055b7fc0_c20d_40a4_a8ce_648065994981():
    while (True):
      step_count_88b408a8_f57a_446b_aeee_631535929c84 = step_count_88b408a8_f57a_446b_aeee_631535929c84 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_055b7fc0_c20d_40a4_a8ce_648065994981()
  global Waypoint_1_p=p[-.810733714873, .917064869395, -.008085438231, 1.570802898921, .000001938154, .000008532701]
  global Waypoint_1_q=[-1.0780537764178675, -0.4461757701686402, 1.1242221037494105, -0.676286594276764, -1.0790436903582972, -0.0022457281695764664]
  global Waypoint_2_p=p[-.721778137045, .917058112064, -.008078580142, 1.570806723857, -.000006249805, -.000004683238]
  global Waypoint_2_q=[-1.138480011616842, -0.49531693876300054, 1.241819206868307, -0.744908944969513, -1.1394627729998987, -0.002099339162008107]
  global ViaPoint_1_p=p[-.639229014880, .922809611707, -.011188349773, 1.500986907415, -.563042117379, -.640289302482]
  global ViaPoint_1_q=[-1.2814462820636194, -0.602560357456543, 1.517494026814596, -0.9024275106242676, -0.5144766012774866, -0.061864678059713185]
  global Waypoint_3_p=p[-.639419512624, .922506004733, -.011177953536, 1.211732536580, -1.277508326220, -1.316449854837]
  global Waypoint_3_q=[-1.2901642958270472, -0.7005200547030945, 1.7754252592669886, -1.032356397514679, 0.38643574714660645, -0.09245616594423467]
  global Waypoint_4_p=p[-.639413676601, .818708808525, -.011176303552, 1.211719639940, -1.277519656775, -1.316467057197]
  global Waypoint_4_q=[-1.2583888212787073, -0.7492066782763978, 1.9240811506854456, -1.135259525184967, 0.41821926832199097, -0.08922225633730108]
  while (True):
    $ 2 "Robot Program"
    $ 3 "MoveP"
    $ 4 "Waypoint_1" "breakAfter"
    movep(Waypoint_1_p, a=1.2, v=0.02, r=0.025)
    $ 5 "Waypoint_2" "breakAfter"
    movep(Waypoint_2_p, a=1.2, v=0.02, r=0.025)
    $ 6 "CircleMove"
    $ 7 "ViaPoint_1" "noBreak"
    $ 8 "Waypoint_3" "breakAfter"
    movec(ViaPoint_1_p, Waypoint_3_p, a=1.2, v=0.02, r=0.025, mode=1)
    $ 9 "Waypoint_4" "breakAfter"
    movep(Waypoint_4_p, a=1.2, v=0.02, r=0.0)
    $ 10 "MoveJ"
    $ 11 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
