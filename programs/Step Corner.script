def Step_Corner():
  global _hidden_verificationVariable=0
  step_count_685bc924_3197_4e47_896c_29f255d2cf80 = 0.0
  thread Step_Counter_Thread_5ef88261_d528_45d4_88a9_6006a74928fc():
    while (True):
      step_count_685bc924_3197_4e47_896c_29f255d2cf80 = step_count_685bc924_3197_4e47_896c_29f255d2cf80 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_5ef88261_d528_45d4_88a9_6006a74928fc()
  set_safety_mode_transition_hardness(1)
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global free_dr_already=  False  
  global freedrive_m_var=  False  
  global Waypoint_76_p=p[.886939072471, .356263001241, .442999104957, 2.316306590719, 2.057646408592, .074101958719]
  global Waypoint_76_q=[-3.2647881984118814, -1.2522049299371645, 1.5824044773896437, 0.9175786249801816, -0.008369636028316307, -1.3112608249927966]
  global Waypoint_50_p=p[-.568711442653, .230601791901, .220208834751, -1.519093932087, -.535128035721, .573965472012]
  global Waypoint_50_q=[-0.021522347127095998, -1.2794721287539979, 2.4323821703540247, 5.090870934515753, -2.2996109167682093, 1.533644199371338]
  global Waypoint_51_p=p[-.689649894186, .139001107022, .230693120258, -.852023156701, -1.645963115617, 1.645984943001]
  global Waypoint_51_q=[-1.1454814116107386, -1.5427037247321387, 2.8454700152026575, 4.979047852545538, -4.902958456669943, 1.5718834400177002]
  global Waypoint_52_p=p[-.160992057407, .970528182050, .722037363514, -.554955923310, .106486629259, .328544950173]
  global Waypoint_52_q=[-1.2978580633746546, -1.3217003357461472, 2.2583277861224573, 3.7025129038044433, -2.952825371419088, 0.9627944231033325]
  global Waypoint_53_p=p[-.157624488365, .513351401913, .815670293526, -.672704566373, -1.852329693545, -.055423312366]
  global Waypoint_53_q=[-2.7676661650287073, -1.8206430874266566, 2.312763277684347, 1.0122546392628173, -1.0765226523028772, -0.8102834860431116]
  global Waypoint_54_p=p[-.308528116178, .606080777007, .242371251996, -2.133736658076, .349438277129, 2.130953356703]
  global Waypoint_54_q=[-1.9617512861834925, -1.2994225782207032, 2.207935158406393, 0.745708628291748, 1.5955500602722168, 1.41863214969635]
  global Waypoint_65_p=p[-.850299549699, -.229060500451, .580194265918, -.066683564301, -1.566406749139, -.045536147896]
  global Waypoint_65_q=[0.11527767777442932, -1.206728772526123, 2.660132948552267, 3.2525827127644042, -4.69939905801882, -0.18521625200380498]
  global Waypoint_55_p=p[-.850295942693, .369353811615, .580190947871, -.066690142153, -1.566409865149, -.045506050424]
  global Waypoint_55_q=[-0.89636737505068, -1.198587493305542, 2.6061368624316614, 3.3119169908710937, -4.700617257748739, 0.826545238494873]
  global Waypoint_59_p=p[-.689650832419, .138973473550, .230700469426, -.851985360280, -1.645991124348, 1.645990580233]
  global Waypoint_59_q=[-1.1454528013812464, -1.5427289356342335, 2.8454795519458216, 4.979044186859884, -4.902960960065023, 1.5718833208084106]
  global Waypoint_71_p=p[-.289684660393, .534258475721, .757199031184, -.295236718653, -.653013693815, .389426431276]
  global Waypoint_71_q=[-1.3941848913775843, -1.6550847492613734, 2.7336130777942103, 4.156678839320801, -3.798194471989767, 1.7310842275619507]
  global Waypoint_58_p=p[.191120239889, .567518478899, .815512910186, -.135765364935, .396070873472, .208834263225]
  global Waypoint_58_q=[-1.651280705128805, -1.7712346516051234, 2.617981735860006, 3.3066598612019042, -2.656208101903097, 0.8563313484191895]
  global Waypoint_56_p=p[-.254568281661, .502958752129, 1.135400507516, -.261908057482, -.749714619963, 1.349050618455]
  global Waypoint_56_q=[-2.0344861189471644, -1.9012485943236292, 2.469647232686178, 2.2012061315723876, -1.1677187124835413, -0.5094392935382288]
  global Waypoint_57_p=p[-.009221327687, .593713365169, .505808930157, -1.424394189587, -2.344106819810, -.527597949261]
  global Waypoint_57_q=[-2.920837704335348, -1.9932075939574183, 2.3856611887561243, 0.6815890508839111, -0.5688460508929651, -1.1506975332843226]
  global Waypoint_67_p=p[-.339169194335, .114271165560, .051007401747, -.434162127311, 1.872717119498, -1.885153895998]
  global Waypoint_67_q=[-1.410516087208883, -0.9778240484050293, 2.47756010690798, -1.72361483196401, -0.3956816832171839, 1.808600902557373]
  global Waypoint_69_p=p[-.760826542313, -.049762698068, .082649581767, -1.026233921905, -1.612699318499, 1.547123897415]
  global Waypoint_69_q=[-0.22154647508730108, -1.118469015961029, 2.7561236063586634, -1.5568565337783475, -3.851987902318136, 1.559481143951416]
  global Waypoint_70_p=p[-.154414768496, .636923137577, .016979120256, -.302753655748, 1.486961848367, .122240024639]
  global Waypoint_70_q=[-1.1281922499286097, -1.0678585332683106, 2.4290812651263636, -2.7994214497008265, -1.6034835020648401, 1.7401196956634521]
  global Waypoint_49_p=p[.397354147848, .356263001249, .319808682466, 2.316306590727, 2.057646408591, .074101958728]
  global Waypoint_49_q=[-3.4579480330096644, -2.0568953953185023, 2.3266006151782435, -0.2270372670939942, -0.1993797461139124, -0.10534602800478154]
  global Waypoint_75_p=p[.886939072471, .356263001241, .442999104957, 2.316306590719, 2.057646408592, .074101958719]
  global Waypoint_75_q=[-3.2647881984118814, -1.2522049299371645, 1.5824044773896437, 0.9175786249801816, -0.008369636028316307, -1.3112608249927966]
  global Waypoint_46_p=p[.894107867742, .351078231601, .354456446052, 2.326366960603, 2.052510258679, .057358671808]
  global Waypoint_46_q=[-3.266944233571188, -1.1744955343059083, 1.6532734076129358, 1.003952904338501, -0.002457443867818654, -1.5361955801593226]
  global Waypoint_8_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_8_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global raa1_p=p[-.689643170661, .139073527807, .230690921608, -.852069296672, -1.645944888292, 1.645881185303]
  global raa1_q=[-1.1455705801593226, -1.5426994071206828, 2.8454588095294397, 4.979022520571508, -4.9029627482043665, 1.5718539953231812]
  global raa2_p=p[-.114157470946, .855108345894, .597477301975, -.505907028801, .325764798924, .388694870300]
  global raa2_q=[-1.2560303846942347, -1.339010552769043, 2.4151175657855433, 3.6540276247211914, -2.7377544085132044, 1.1360299587249756]
  global raa3_p=p[-.308547482234, .387797636904, .242407099860, 1.976327760240, .350206946999, -1.916000398832]
  global raa3_q=[-1.8931763807879847, -1.3096025747111817, 2.212959591542379, 0.7217818933674316, 1.639076590538025, 0.8125834465026855]
  global raa4_p=p[-.733576132099, .077690893520, .242409727900, 1.976419296976, .350069431278, -1.916084616091]
  global raa4_q=[-0.8909156958209437, -1.3431089532426377, 2.273750130330221, 0.7266384798237304, 1.5611975193023682, 1.8127720355987549]
  global Waypoint_23_p=p[-.540166575654, .215949141041, .034631452617, -1.505795438113, 1.057579835594, 1.573514753692]
  global Waypoint_23_q=[-0.46167117754091436, -1.1365486842444916, 2.508885685597555, 0.15223841249432368, 1.4952874183654785, 3.819530963897705]
  global Waypoint_24_p=p[-.308525559537, .606096497354, .242373144855, -2.133742737559, .349425192770, 2.130939839044]
  global Waypoint_24_q=[-1.8709262053119105, -1.2877716285041352, 2.192875687276022, 0.7510036665150146, 1.5878156423568726, 1.5091480016708374]
  global Waypoint_39_p=p[.397377312153, .356253310648, .319810281486, 2.316317670744, 2.057592854035, .074120023159]
  global Waypoint_39_q=[-3.4579551855670374, -2.0568958721556605, 2.3265963236438196, -0.22706706941638188, -0.19935590425600225, -0.10534030595888311]
  global Waypoint_37_p=p[.397366630181, .356258644196, .319813668943, 2.316299214281, 2.057614642521, .074125657910]
  global Waypoint_37_q=[-3.4579508940326136, -2.056904455224508, 2.3265963236438196, -0.2270481151393433, -0.19937020937074834, -0.10535222688783819]
  global Waypoint_15_p=p[-.157621040248, .513353603496, .815677694745, -.672699538592, -1.852318447516, -.055422773001]
  global Waypoint_15_q=[-2.770456854497091, -1.8207680187621058, 2.3065691629992884, 1.0170823770710449, -1.0767205397235315, -0.8071182409869593]
  global Waypoint_25_p=p[-.161036555831, .970524399959, .722042384791, -.554954311189, .106465018540, .328580879483]
  global Waypoint_25_q=[-1.3071630636798304, -1.3366777312806626, 2.2083633581744593, 3.7187773424335937, -2.9519384543048304, 0.9132363796234131]
  global Waypoint_72_p=p[-.289685725237, .534256396594, .757196155975, -.295237726329, -.653009715205, .389435972469]
  global Waypoint_72_q=[-1.394179646168844, -1.6550847492613734, 2.7336154619800013, 4.156686468715332, -3.7981911341296595, 1.731092095375061]
  global Waypoint_26_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_26_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_27_p=p[-.568724745609, .230601805298, .220208295176, -1.519097711196, -.535155391172, .573964121010]
  global Waypoint_27_q=[-0.04883271852602178, -1.2753942471793671, 2.4771457354175013, 5.041022258787908, -2.326899592076437, 1.532160997390747]
  global Waypoint_28_p=p[-.568724745609, .230601805298, .220208295176, -1.519097711196, -.535155391172, .573964121010]
  global Waypoint_28_q=[-0.04883271852602178, -1.2753942471793671, 2.4771457354175013, 5.041022258787908, -2.326899592076437, 1.532160997390747]
  global Waypoint_29_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_29_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_30_p=p[-.853851193668, .133266829906, .060418082908, -.274178222953, -2.359710051999, .046821166283]
  global Waypoint_30_q=[-0.608560864125387, -1.0122360748103638, 2.787060801182882, 3.7283646303364257, -4.940747324620382, 0.3777344226837158]
  global Waypoint_31_p=p[-.979398188272, -.259625449453, .211289397035, -.673010443572, -1.459355862765, -.640164958946]
  global Waypoint_31_q=[0.36968713998794556, -0.5732358259013672, 2.138303581868307, 3.1253925996967773, -4.70385724702944, -1.2100523153888147]
  global Waypoint_32_p=p[-.826865752305, .369357632284, .043113676955, .574997346548, -1.492225541214, .597128135378]
  global Waypoint_32_q=[-1.0355513731585901, -0.33930082738909917, 2.126244846974508, 2.9386045175739746, -4.711197797452108, 1.7860286235809326]
  global Waypoint_33_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_33_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_73_p=p[-.289671192632, .534275423553, .757232902417, -.295189983811, -.652980753171, .389398176275]
  global Waypoint_73_q=[-1.39418870607485, -1.65509094814443, 2.7335642019854944, 4.156684561366699, -3.7981610933886927, 1.731088399887085]
  global Waypoint_16_p=p[.191112811238, .567512170908, .815514010937, -.135771161622, .396053809900, .208825693369]
  global Waypoint_16_q=[-1.6536315123187464, -1.762029310266012, 2.6225650946246546, 3.2891055780598144, -2.6549678484546106, 0.8520665764808655]
  global Waypoint_17_p=p[-.254565633623, .502963426820, 1.135401557820, -.261910507478, -.749716086887, 1.349041636154]
  global Waypoint_17_q=[-2.035229508076803, -1.8928028545775355, 2.468372408543722, 2.19391576826062, -1.167032543812887, -0.5091407934771937]
  global Waypoint_18_p=p[-.009208376822, .593717720951, .505810027228, -1.424406033077, -2.344120510145, -.527630245278]
  global Waypoint_18_q=[-2.9172328154193323, -1.9945279560484828, 2.3804522196399134, 0.6930715280720214, -0.5671199003802698, -1.1566088835345667]
  global Waypoint_38_p=p[.397379749540, .356252016937, .319817140705, 2.316310534508, 2.057580214841, .074134378577]
  global Waypoint_38_q=[-3.457958761845724, -2.0569073162474574, 2.3265913168536585, -0.22705944002185063, -0.19935638109316045, -0.10534793535341436]
  global Waypoint_40_p=p[.360688403366, .270119715397, .646144746546, .057805349154, 2.125995180379, 2.134053153683]
  global Waypoint_40_q=[-3.4579489866839808, -2.0569035015501917, 2.3265796343432825, -0.22706706941638188, -0.1993501822101038, -0.10534793535341436]
  global Waypoint_2_p=p[-.548957282596, .386284559177, .143710178207, 1.570800598292, -.000025190822, .000004803470]
  global Waypoint_2_q=[-1.0516188780414026, -1.010990933781006, 2.1562450567828577, -1.143702046280243, -1.0526168982135218, -0.0017235914813440445]
  global r1_ek_oldhome_p=p[.397380247322, .356253634699, .319820846021, 2.316316320871, 2.057594704604, .074118471609]
  global r1_ek_oldhome_q=[-3.457949940358297, -2.056894441644186, 2.32658034959902, -0.2270551484874268, -0.19935208955873662, -0.10533696809877569]
  global r1_ek_extrude_p=p[.454852104155, .405448828659, .064015413765, 2.316807606413, 2.051392071696, .076664825947]
  global r1_ek_extrude_q=[-3.274653975163595, -1.5604325172356148, 2.467809502278463, -0.34438879907641606, -0.014281574879781544, -0.6303489843951624]
  global r1_ek_front_p=p[.439064809878, .405452261046, .065996139932, 2.316843937268, 2.051427632497, .076607106393]
  global r1_ek_front_q=[-3.280560557042257, -1.6287623844542445, 2.502561871205465, -0.47416289270434575, -0.019731823598043263, -0.4669149557696741]
  global r1_ek_middle_p=p[.419010105608, .404850828431, .065994665459, 2.309574128677, 2.044678176343, .089098333896]
  global r1_ek_middle_q=[-3.290863100682394, -1.70143522838735, 2.548208538685934, -0.589385525589325, -0.029501263295308888, -0.3372734228717249]
  global r1_ek_middle2_p=p[.417011768852, .405435328663, .065002627117, 2.316867113472, 2.051334925313, .076628493429]
  global r1_ek_middle2_q=[-3.289830032979147, -1.6934038601317347, 2.5445857683764856, -0.579618052845337, -0.028589550648824513, -0.33885270753969365]
  global r1_ek_bottom_p=p[.413071667620, .405431286494, .067999701073, 2.316819721954, 2.051304037200, .076688572349]
  global r1_ek_bottom_q=[-3.2916205565081995, -1.708447118798727, 2.5485368410693567, -0.5849895042232056, -0.03033763567079717, -0.32244998613466436]
  global r1_ek_end_p=p[.389998638281, .405443674081, .068004818811, 2.316851991921, 2.051367741778, .076612018685]
  global r1_ek_end_q=[-3.3030064741717737, -1.7640062771239222, 2.5831297079669397, -0.63420523822818, -0.04154044786562139, -0.2521465460406702]
  global r2_ek_oldhome_p=p[.397380247322, .356253634699, .319820846021, 2.316316320871, 2.057594704604, .074118471609]
  global r2_ek_oldhome_q=[-3.461132842686933, -2.062320779349874, 2.32916033290004, -0.21924456446492258, -0.20097883707844666, -0.11039879152527199]
  global r2_ek_extrude_p=p[.612885745678, .429305279732, .100477107124, 2.149994969793, 2.225764025207, .087353352584]
  global r2_ek_extrude_q=[-3.199475796455825, -1.4862854517875999, 2.263543898005424, -0.6928175084157413, -0.09183293866530295, -0.15653548683830643]
  global r2_ek_front_p=p[.556405415915, .429305279815, .076984362723, -2.170411249256, -2.268200695165, -.015853660170]
  global r2_ek_front_q=[-3.2029012478485694, -1.4943971905029905, 2.3176866046272355, -0.727203417516419, -0.10461513056100813, -0.1013922369747533]
  global r2_ek_middle_p=p[.550033970532, .429305279917, .076253920653, -2.170411249261, -2.268200695170, -.015853660159]
  global r2_ek_middle_q=[-3.2036200175167613, -1.5006788185274456, 2.326226188945654, -0.730095076239345, -0.10533288811000929, -0.10075548926859312]
  global r2_ek_bottom_p=p[.546594660555, .429305280025, .080868477599, -2.170411249265, -2.268200695174, -.015853660149]
  global r2_ek_bottom_q=[-3.204010221105431, -1.5099366263094405, 2.3272215014458872, -0.722096275899732, -0.10572512264357048, -0.10049057923478166]
  global r2_ek_end_p=p[.537335106646, .429305280055, .080868477459, -2.170411249266, -2.268200695175, -.015853660146]
  global r2_ek_end_q=[-3.205098875769389, -1.5204959829395506, 2.3387656715508855, -0.724001524008818, -0.10681294496314919, -0.09956563917089412]
  global goalpt2_p=p[-1.080053541010, .352632940315, -.086722122575, .034138323661, -.000794950937, -2.630970910212]
  global goalpt2_q=[-0.7288746434602373, 0.09414474833129827, 1.3534511747335065, 1.7769157751222373, -0.33301002562846893, -0.07220727355382905]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_4_p=p[-.658264763546, .299530128456, .030909835036, .426821001551, -1.621505068649, .437070885767]
  global Waypoint_4_q=[-1.350241486226217, -0.9702387017062684, 2.492185179387228, -1.7834822140135707, -0.33723670641054326, 1.8489984273910522]
  global Waypoint_5_p=p[-.448862677341, .524599667441, -.175967040878, 2.473330473302, -1.874382924863, .205319206046]
  global Waypoint_5_q=[-1.1354392210589808, -1.0039964479259034, 2.441021744404928, -2.875528474847311, -1.6043828169452112, 1.7329596281051636]
  global Waypoint_10_p=p[-.559130451394, .259233925829, .102445980692, -.822649281727, -1.486064670292, -.881476138414]
  global Waypoint_10_q=[-0.556256119404928, -1.0744255942157288, 2.9114087263690394, -1.7763501606383265, -4.185837809239523, 1.5288889408111572]
  global Waypoint_11_p=p[-.559130451394, .259233925829, .102445980692, -.822649281727, -1.486064670292, -.881476138414]
  global Waypoint_11_q=[-0.556256119404928, -1.0744255942157288, 2.9114087263690394, -1.7763501606383265, -4.185837809239523, 1.5288889408111572]
  global Waypoint_12_p=p[-.448862677341, .524599667441, -.175967040878, 2.473330473302, -1.874382924863, .205319206046]
  global Waypoint_12_q=[-1.1354392210589808, -1.0039964479259034, 2.441021744404928, -2.875528474847311, -1.6043828169452112, 1.7329596281051636]
  global Waypoint_13_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_13_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  global Waypoint_14_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_14_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  global Waypoint_41_p=p[.392127936214, .533269017847, .644148583936, .057822570580, 2.125982462550, 2.134033989912]
  global Waypoint_41_q=[-3.4579578081714075, -2.0569120846190394, 2.3265841642962855, -0.22706885755572515, -0.1993349234210413, -0.10534984270204717]
  def move_path_step_right():
    $ 130 "move_path_step_right" "noBreak"
    $ 131 "'this is the path for Down, Over, then Back Around'"
    # 'this is the path for Down, Over, then Back Around'
    $ 132 "Comment"
    # Comment
    $ 141 "align_for_step()"
    align_for_step()
    $ 142 "Comment"
    # Comment
    $ 143 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 144 "p2≔pathturn[1]"
    global p2=pathturn[1]
    $ 145 "p4≔pathturn[2]"
    global p4=pathturn[2]
    $ 146 "p5≔pathturn[3]"
    global p5=pathturn[3]
    $ 147 "pa1≔p[p1[0],p1[1],p1[2]-0.05,p1[3],p1[4],p1[5]]"
    global pa1=p[p1[0],p1[1],p1[2]-0.05,p1[3],p1[4],p1[5]]
    $ 148 "MoveJ"
    $ 149 "pa1" "breakAfter"
    movej(pa1, a=1.3962634015954636, v=0.3490658503988659)
    $ 150 "MoveL"
    $ 151 "p1" "breakAfter"
    movel(p1, a=0.2, v=0.05)
    $ 152 "Wait: 8.0"
    sleep(8.0)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 153 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 154 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 155 "Wait: 1.0"
    sleep(1.0)
    $ 157 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 158 "MoveL"
    $ 159 "p2" "breakAfter"
    movel(p2, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 160 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 161 "Wait: 0.5"
    sleep(0.5)
    $ 162 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 163 "MoveL"
    $ 164 "p4" "breakAfter"
    movel(p4, a=0.01, v=0.12)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 165 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 166 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 167 "Wait: 1.0"
    sleep(1.0)
    $ 169 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 170 "MoveL"
    $ 171 "p5" "breakAfter"
    movel(p5, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 172 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 173 "Wait: 2.0"
    sleep(2.0)
    $ 174 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 175 "Comment"
    # Comment
    $ 176 "pret1≔p[p5[0],p5[1],p5[2]-0.05,p5[3],p5[4],p5[5]]"
    global pret1=p[p5[0],p5[1],p5[2]-0.05,p5[3],p5[4],p5[5]]
    $ 177 "p_1≔pathturn[4]"
    global p_1=pathturn[4]
    $ 178 "p_2≔pathturn[5]"
    global p_2=pathturn[5]
    $ 179 "p_3≔pathturn[6]"
    global p_3=pathturn[6]
    $ 180 "p_4≔pathturn[7]"
    global p_4=pathturn[7]
    $ 181 "p_5≔pathturn[8]"
    global p_5=pathturn[8]
    $ 182 "p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_preheat=p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 183 "p_pre_ret≔p[p_1[0]+.03,p_1[1]+.03,p_1[2],p_1[3],p_1[4],p_1[5]]"
    global p_pre_ret=p[p_1[0]+.03,p_1[1]+.03,p_1[2],p_1[3],p_1[4],p_1[5]]
    $ 184 "p_pre_ret2≔p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_pre_ret2=p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 185 "'twist'"
    # 'twist'
    $ 186 "MoveJ"
    $ 187 "pret1" "breakAfter"
    movej(pret1, a=1.3962634015954636, v=1.3962634015954636)
    $ 188 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 190 "MoveJ"
    $ 191 "raa1" "breakAfter"
    movej(get_inverse_kin(raa1_p, qnear=raa1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 192 "raa2" "breakAfter"
    movej(get_inverse_kin(raa2_p, qnear=raa2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 193 "raa3" "breakAfter"
    movej(get_inverse_kin(raa3_p, qnear=raa3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 194 "raa4" "breakAfter"
    movej(get_inverse_kin(raa4_p, qnear=raa4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 196 "raise lift column"
    $ 197 "liftcolumnz≔liftcolumnzneeded"
    global liftcolumnz=liftcolumnzneeded
    # begin: URCap Program Node
    #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
    #   Type: MachineLogic for Universal Robots
    $ 198 "MachineLogic Move to Position"
    while isVentionMovementBusyMachineMotion1==True:
    sleep(0.05)
    end
    if(isVentionMovementBusyMachineMotion1 == False):
    isVentionMovementBusyMachineMotion1 = True
    socket_send_string("estop/status;", "MachineMotion1")
    temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
    while(temp_estop_var_vention=="estop/status true"):
    if temp_estop_var_vention=="estop/status true":
    sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
    end
    socket_send_string("estop/status;", "MachineMotion1")
    temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
    if temp_estop_var_vention=="estop/status true":
    popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
    end
    end
    else:
    popup("resource is being used already: MachineMotion1")
    halt
    end
    sendString("SET speed_v2 600000.000", "Ack", "MachineMotion1")
    sendString("SET acceleration_v2 50000.000", "Ack", "MachineMotion1")
    string_vention=intToString(liftcolumnz*1000,"MachineMotion1")
    sendString("SET de_move_abs_1 "+string_vention, "Ack", "MachineMotion1")
    sendString("de_move_abs_exec", "Ack", "MachineMotion1")
    isVentionParallelMovementSendingScriptMachineMotion1 = False
    pollString("isMotionCompleted", "MachineMotion isMotionCompleted = true", "MachineMotion1")
    isVentionMovementBusyMachineMotion1 = False
    sleep(0.03)
    # end: URCap Program Node
    $ 199 "If liftcolumnz≠0.0"
    if (liftcolumnz != 0.0):
      # begin: URCap Program Node
      #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
      #   Type: MachineLogic for Universal Robots
      $ 200 "MachineLogic Homing"
      while isVentionMovementBusyMachineMotion1==True:
      sleep(0.05)
      end
      if(isVentionMovementBusyMachineMotion1 == False):
      isVentionMovementBusyMachineMotion1 = True
      socket_send_string("estop/status;", "MachineMotion1")
      temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
      while(temp_estop_var_vention=="estop/status true"):
      if temp_estop_var_vention=="estop/status true":
      sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
      end
      socket_send_string("estop/status;", "MachineMotion1")
      temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
      if temp_estop_var_vention=="estop/status true":
      popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
      end
      end
      else:
      popup("resource is being used already: MachineMotion1")
      halt
      end
      isVentionMovementBusyMachineMotion1 = True
      sendString("im_home_axis_1", "MachineMotion im_home_axis_1 = completed", "MachineMotion1")
      isVentionMovementBusyMachineMotion1 = False
      sendString("SET im_set_encoder_pos_aux_1 0.000", "Ack", "MachineMotion1")
      isVentionMovementBusyMachineMotion1 = False
      sleep(0.03)
      # end: URCap Program Node
    end
    $ 201 "'preheat'"
    # 'preheat'
    $ 204 "MoveL"
    $ 205 "p_pre_ret2" "breakAfter"
    movel(p_pre_ret2, a=1.2, v=0.25)
    $ 206 "p_preheat" "breakAfter"
    movel(p_preheat, a=1.2, v=0.25)
    $ 207 "Wait: 6.0"
    sleep(6.0)
    $ 208 "MoveL"
    $ 209 "p_pre_ret2" "breakAfter"
    movel(p_pre_ret2, a=1.2, v=0.25)
    $ 210 "p_pre_ret" "breakAfter"
    movel(p_pre_ret, a=1.2, v=0.25)
    $ 211 "Set"
    set_tcp(p[0.00451,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 212 "MoveL"
    $ 213 "p_1" "breakAfter"
    movel(p_1, a=1.2, v=0.05)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 214 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 215 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 216 "Wait: 1.0"
    sleep(1.0)
    $ 217 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 219 "Wait: 1.0"
    sleep(1.0)
    $ 220 "MoveL"
    $ 221 "p_2" "breakAfter"
    movel(p_2, a=1.2, v=0.01)
    $ 222 "MoveP"
    $ 223 "CircleMove"
    $ 224 "p_3" "noBreak"
    
    $ 225 "p_4" "breakAfter"
    movec(p_3, p_4, a=0.01, v=5.0E-4, r=0.0, mode=1)
    $ 226 "MoveL"
    $ 227 "p_5" "breakAfter"
    movel(p_5, a=1.2, v=0.012)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 228 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 229 "Wait: 2.0"
    sleep(2.0)
    $ 230 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 231 "MoveL"
    $ 232 "Waypoint_23" "breakAfter"
    movel(Waypoint_23_p, a=1.2, v=0.25)
    $ 233 "MoveJ"
    $ 234 "Waypoint_24" "breakAfter"
    movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 235 "Waypoint_39" "breakAfter"
    movej(get_inverse_kin(Waypoint_39_p, qnear=Waypoint_39_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 236 "'above waypoint is home'"
    # 'above waypoint is home'
  end
  def move_path_3left():
    $ 237 "move_path_3left" "noBreak"
    $ 238 "'this is the path for Down, Over, then Back Around'"
    # 'this is the path for Down, Over, then Back Around'
    $ 239 "Comment"
    # Comment
    $ 240 "MoveJ"
    $ 241 "Waypoint_37" "breakAfter"
    movej(get_inverse_kin(Waypoint_37_p, qnear=Waypoint_37_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 242 "'above point is home'"
    # 'above point is home'
    $ 243 "liftcolumnz≔liftcolumnzneeded"
    global liftcolumnz=liftcolumnzneeded
    # begin: URCap Program Node
    #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
    #   Type: MachineLogic for Universal Robots
    $ 244 "MachineLogic Move to Position"
    while isVentionMovementBusyMachineMotion1==True:
    sleep(0.05)
    end
    if(isVentionMovementBusyMachineMotion1 == False):
    isVentionMovementBusyMachineMotion1 = True
    socket_send_string("estop/status;", "MachineMotion1")
    temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
    while(temp_estop_var_vention=="estop/status true"):
    if temp_estop_var_vention=="estop/status true":
    sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
    end
    socket_send_string("estop/status;", "MachineMotion1")
    temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
    if temp_estop_var_vention=="estop/status true":
    popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
    end
    end
    else:
    popup("resource is being used already: MachineMotion1")
    halt
    end
    sendString("SET speed_v2 600000.000", "Ack", "MachineMotion1")
    sendString("SET acceleration_v2 50000.000", "Ack", "MachineMotion1")
    string_vention=intToString(liftcolumnz*1000,"MachineMotion1")
    sendString("SET de_move_abs_1 "+string_vention, "Ack", "MachineMotion1")
    sendString("de_move_abs_exec", "Ack", "MachineMotion1")
    isVentionParallelMovementSendingScriptMachineMotion1 = False
    pollString("isMotionCompleted", "MachineMotion isMotionCompleted = true", "MachineMotion1")
    isVentionMovementBusyMachineMotion1 = False
    sleep(0.03)
    # end: URCap Program Node
    $ 245 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 246 "Waypoint_25" "breakAfter"
    movej(get_inverse_kin(Waypoint_25_p, qnear=Waypoint_25_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 247 "Waypoint_72" "breakAfter"
    movej(get_inverse_kin(Waypoint_72_p, qnear=Waypoint_72_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 248 "Waypoint_26" "breakAfter"
    movej(get_inverse_kin(Waypoint_26_p, qnear=Waypoint_26_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 249 "Waypoint_27" "breakAfter"
    movej(get_inverse_kin(Waypoint_27_p, qnear=Waypoint_27_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 254 "Comment"
    # Comment
    $ 255 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 256 "p2≔pathturn[1]"
    global p2=pathturn[1]
    $ 257 "p4≔pathturn[2]"
    global p4=pathturn[2]
    $ 258 "p5≔pathturn[3]"
    global p5=pathturn[3]
    $ 259 "pa1≔p[p1[0]+0.05,p1[1]-0.05,p1[2],p1[3],p1[4],p1[5]]"
    global pa1=p[p1[0]+0.05,p1[1]-0.05,p1[2],p1[3],p1[4],p1[5]]
    $ 260 "MoveJ"
    $ 261 "pa1" "breakAfter"
    movej(pa1, a=1.3962634015954636, v=1.0471975511965976)
    $ 262 "MoveL"
    $ 263 "p1" "breakAfter"
    movel(p1, a=0.1, v=0.05)
    $ 264 "Wait: 8.0"
    sleep(8.0)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 265 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 266 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 267 "Wait: 1.0"
    sleep(1.0)
    $ 269 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 270 "MoveL"
    $ 271 "p2" "breakAfter"
    movel(p2, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 272 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 273 "Wait: 0.5"
    sleep(0.5)
    $ 274 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 275 "MoveL"
    $ 276 "p4" "breakAfter"
    movel(p4, a=0.01, v=0.12)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 277 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 278 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 279 "Wait: 1.0"
    sleep(1.0)
    $ 281 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 282 "MoveL"
    $ 283 "p5" "breakAfter"
    movel(p5, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 284 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 285 "Wait: 2.0"
    sleep(2.0)
    $ 286 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 287 "Comment"
    # Comment
    $ 288 "pret1≔p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]"
    global pret1=p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]
    $ 289 "p_1≔pathturn[4]"
    global p_1=pathturn[4]
    $ 290 "p_2≔pathturn[5]"
    global p_2=pathturn[5]
    $ 291 "p_3≔pathturn[6]"
    global p_3=pathturn[6]
    $ 292 "p_4≔pathturn[7]"
    global p_4=pathturn[7]
    $ 293 "p_5≔pathturn[8]"
    global p_5=pathturn[8]
    $ 294 "p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_preheat=p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 295 "p_pre_ret≔p[p_1[0]+.03,p_1[1]-.03,p_1[2],p_1[3],p_1[4],p_1[5]]"
    global p_pre_ret=p[p_1[0]+.03,p_1[1]-.03,p_1[2],p_1[3],p_1[4],p_1[5]]
    $ 296 "p_pre_ret2≔p[p_3[0]+.03,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_pre_ret2=p[p_3[0]+.03,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 297 "MoveJ"
    $ 298 "pret1" "breakAfter"
    movej(pret1, a=1.3962634015954636, v=1.3962634015954636)
    $ 299 "Waypoint_28" "breakAfter"
    movej(get_inverse_kin(Waypoint_28_p, qnear=Waypoint_28_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 300 "If liftcolumnz≠0.0"
    if (liftcolumnz != 0.0):
      # begin: URCap Program Node
      #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
      #   Type: MachineLogic for Universal Robots
      $ 301 "MachineLogic Homing"
      while isVentionMovementBusyMachineMotion1==True:
      sleep(0.05)
      end
      if(isVentionMovementBusyMachineMotion1 == False):
      isVentionMovementBusyMachineMotion1 = True
      socket_send_string("estop/status;", "MachineMotion1")
      temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
      while(temp_estop_var_vention=="estop/status true"):
      if temp_estop_var_vention=="estop/status true":
      sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
      end
      socket_send_string("estop/status;", "MachineMotion1")
      temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
      if temp_estop_var_vention=="estop/status true":
      popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
      end
      end
      else:
      popup("resource is being used already: MachineMotion1")
      halt
      end
      isVentionMovementBusyMachineMotion1 = True
      sendString("im_home_axis_1", "MachineMotion im_home_axis_1 = completed", "MachineMotion1")
      isVentionMovementBusyMachineMotion1 = False
      sendString("SET im_set_encoder_pos_aux_1 0.000", "Ack", "MachineMotion1")
      isVentionMovementBusyMachineMotion1 = False
      sleep(0.03)
      # end: URCap Program Node
    end
    $ 302 "'now go into the ccw weld position'"
    # 'now go into the ccw weld position'
    $ 303 "Waypoint_29" "breakAfter"
    movej(get_inverse_kin(Waypoint_29_p, qnear=Waypoint_29_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 304 "Comment"
    # Comment
    $ 305 "Waypoint_30" "breakAfter"
    movej(get_inverse_kin(Waypoint_30_p, qnear=Waypoint_30_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 306 "Waypoint_31" "breakAfter"
    movej(get_inverse_kin(Waypoint_31_p, qnear=Waypoint_31_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 315 "MoveL"
    $ 316 "p_pre_ret" "breakAfter"
    movel(p_pre_ret, a=1.2, v=0.25)
    $ 317 "p_pre_ret2" "breakAfter"
    movel(p_pre_ret2, a=1.2, v=0.25)
    $ 318 "p_preheat" "breakAfter"
    movel(p_preheat, a=1.2, v=0.25)
    $ 319 "Wait: 6.0"
    sleep(6.0)
    $ 320 "MoveL"
    $ 321 "p_pre_ret2" "breakAfter"
    movel(p_pre_ret2, a=1.2, v=0.25)
    $ 322 "p_pre_ret" "breakAfter"
    movel(p_pre_ret, a=1.2, v=0.25)
    $ 323 "Set"
    set_tcp(p[0.00451,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 324 "MoveL"
    $ 325 "p_1" "breakAfter"
    movel(p_1, a=0.1, v=0.05)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 326 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 327 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 328 "Wait: 1.0"
    sleep(1.0)
    $ 329 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 331 "Wait: 1.0"
    sleep(1.0)
    $ 332 "MoveL"
    $ 333 "p_2" "breakAfter"
    movel(p_2, a=1.2, v=0.01)
    $ 334 "MoveP"
    $ 335 "CircleMove"
    $ 336 "p_3" "noBreak"
    
    $ 337 "p_4" "breakAfter"
    movec(p_3, p_4, a=0.01, v=5.0E-4, r=0.0, mode=1)
    $ 338 "MoveL"
    $ 339 "p_5" "breakAfter"
    movel(p_5, a=1.2, v=0.012)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 340 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 341 "Wait: 2.0"
    sleep(2.0)
    $ 342 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 347 "MoveJ"
    $ 348 "Waypoint_32" "breakAfter"
    movej(get_inverse_kin(Waypoint_32_p, qnear=Waypoint_32_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 349 "Waypoint_33" "breakAfter"
    movej(get_inverse_kin(Waypoint_33_p, qnear=Waypoint_33_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 350 "Waypoint_73" "breakAfter"
    movej(get_inverse_kin(Waypoint_73_p, qnear=Waypoint_73_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 351 "Comment"
    # Comment
    $ 352 "MoveJ"
    $ 353 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 354 "Waypoint_17" "breakAfter"
    movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 355 "Waypoint_18" "breakAfter"
    movej(get_inverse_kin(Waypoint_18_p, qnear=Waypoint_18_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 356 "Waypoint_38" "breakAfter"
    movej(get_inverse_kin(Waypoint_38_p, qnear=Waypoint_38_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 357 "'above point is home'"
    # 'above point is home'
  end
  def Test_Teach_Position():
    $ 358 "Test_Teach_Position" "noBreak"
    $ 362 "MoveJ"
    $ 363 "Waypoint_40" "breakAfter"
    set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
    movej(get_inverse_kin(Waypoint_40_p, qnear=Waypoint_40_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 364 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 365 "Waypoint_2" "breakAfter"
    set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 366 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 367 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 368 "Popup: Move the TCP to the top of the weld, then click 'Continue'"
    popup("Move the TCP to the top of the weld, then click 'Continue'", "Message", False, False, blocking=True)
    $ 369 "tcp_pose_top≔get_actual_tcp_pose()"
    global tcp_pose_top= get_actual_tcp_pose ()
    $ 370 "Popup: Move the TCP to the corner of the tank, then click 'Continue'"
    popup("Move the TCP to the corner of the tank, then click 'Continue'", "Message", False, False, blocking=True)
    $ 371 "tcp_pose≔get_actual_tcp_pose()"
    global tcp_pose= get_actual_tcp_pose ()
    $ 372 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 373 "Wait: 0.25"
    sleep(0.25)
    $ 374 "sync()"
    sync()
  end
  def align_tcp_left():
    $ 375 "align_tcp_left" "noBreak"
    $ 376 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 377 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 378 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 379 "MoveJ"
    $ 380 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def extrude_knife3():
    $ 381 "extrude_knife3" "noBreak"
    $ 382 "pre program stuff"
    $ 383 "Set"
    set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 384 "ek_sp≔get_actual_tcp_pose()"
    global ek_sp= get_actual_tcp_pose ()
    $ 385 "MoveL"
    $ 386 "ek_sp" "breakAfter"
    movel(ek_sp, a=1.2, v=0.005)
    $ 388 "'list possible points'"
    # 'list possible points'
    $ 389 "robot 1 moves"
    $ 390 "If 1≟2"
    if (1 == 2):
      $ 391 "MoveJ"
      $ 392 "r1_ek_oldhome" "breakAfter"
      movej(get_inverse_kin(r1_ek_oldhome_p, qnear=r1_ek_oldhome_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 393 "r1_ek_extrude" "breakAfter"
      movej(get_inverse_kin(r1_ek_extrude_p, qnear=r1_ek_extrude_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 394 "r1_ek_front" "breakAfter"
      movej(get_inverse_kin(r1_ek_front_p, qnear=r1_ek_front_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 395 "r1_ek_middle" "breakAfter"
      movej(get_inverse_kin(r1_ek_middle_p, qnear=r1_ek_middle_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 396 "r1_ek_middle2" "breakAfter"
      movej(get_inverse_kin(r1_ek_middle2_p, qnear=r1_ek_middle2_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 397 "r1_ek_bottom" "breakAfter"
      movej(get_inverse_kin(r1_ek_bottom_p, qnear=r1_ek_bottom_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 398 "r1_ek_end" "breakAfter"
      movej(get_inverse_kin(r1_ek_end_p, qnear=r1_ek_end_q), a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 399 "robot 2 moves"
    $ 400 "If 1≟2"
    if (1 == 2):
      $ 401 "MoveJ"
      $ 402 "r2_ek_oldhome" "breakAfter"
      movej(get_inverse_kin(r2_ek_oldhome_p, qnear=r2_ek_oldhome_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 404 "r2_ek_extrude" "breakAfter"
      movej(get_inverse_kin(r2_ek_extrude_p, qnear=r2_ek_extrude_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 405 "r2_ek_front" "breakAfter"
      movej(get_inverse_kin(r2_ek_front_p, qnear=r2_ek_front_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 406 "r2_ek_middle" "breakAfter"
      movej(get_inverse_kin(r2_ek_middle_p, qnear=r2_ek_middle_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 407 "r2_ek_bottom" "breakAfter"
      movej(get_inverse_kin(r2_ek_bottom_p, qnear=r2_ek_bottom_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 408 "r2_ek_end" "breakAfter"
      movej(get_inverse_kin(r2_ek_end_p, qnear=r2_ek_end_q), a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 409 "'detemine correct points for which robot'"
    # 'detemine correct points for which robot'
    $ 410 "If robot_number≟1"
    if (robot_number == 1):
      $ 411 "robot1 positions"
      $ 412 "ek_oldhome≔r1_ek_oldhome_p"
      global ek_oldhome=r1_ek_oldhome_p
      $ 413 "ek_extrude≔r1_ek_extrude_p"
      global ek_extrude=r1_ek_extrude_p
      $ 414 "ek_front≔r1_ek_front_p"
      global ek_front=r1_ek_front_p
      $ 415 "ek_middle≔r1_ek_middle_p"
      global ek_middle=r1_ek_middle_p
      $ 416 "ek_middle2≔r1_ek_middle2_p"
      global ek_middle2=r1_ek_middle2_p
      $ 417 "ek_bottom≔r1_ek_bottom_p"
      global ek_bottom=r1_ek_bottom_p
      $ 418 "ek_end≔r1_ek_end_q"
      global ek_end=r1_ek_end_q
    else:
      $ 419 "ElseIf robot_number≟2"
      if (robot_number == 2):
        $ 420 "robot1 positions"
        $ 421 "ek_oldhome≔r2_ek_oldhome_p"
        global ek_oldhome=r2_ek_oldhome_p
        $ 422 "ek_extrude≔r2_ek_extrude_p"
        global ek_extrude=r2_ek_extrude_p
        $ 423 "ek_front≔r2_ek_front_p"
        global ek_front=r2_ek_front_p
        $ 424 "ek_middle≔r2_ek_middle_p"
        global ek_middle=r2_ek_middle_p
        $ 425 "ek_middle2≔r2_ek_middle_p"
        global ek_middle2=r2_ek_middle_p
        $ 426 "ek_bottom≔r2_ek_bottom_p"
        global ek_bottom=r2_ek_bottom_p
        $ 427 "ek_end≔r2_ek_end_q"
        global ek_end=r2_ek_end_q
      end
    end
    $ 428 "'start of program'"
    # 'start of program'
    $ 430 "Set"
    set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 431 "MoveJ"
    $ 433 "ek_oldhome" "breakAfter"
    movej(ek_oldhome, a=1.3962634015954636, v=1.0471975511965976)
    $ 434 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 435 "'move above bucket'"
    # 'move above bucket'
    $ 436 "MoveJ"
    $ 438 "ek_extrude" "breakAfter"
    movej(ek_extrude, a=1.3962634015954636, v=1.0471975511965976)
    $ 439 "'extrude out a foot'"
    # 'extrude out a foot'
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 441 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 442 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 443 "Wait: 24.0"
    sleep(24.0)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 444 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 445 "Wait: 1.0"
    sleep(1.0)
    $ 446 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 447 "'slice'"
    # 'slice'
    $ 448 "MoveL"
    $ 454 "ek_front" "breakAfter"
    movel(ek_front, a=0.05, v=0.03)
    $ 455 "ek_middle" "breakAfter"
    movel(ek_middle, a=0.05, v=0.03)
    $ 456 "ek_middle2" "breakAfter"
    movel(ek_middle2, a=0.05, v=0.03)
    $ 457 "ek_bottom" "breakAfter"
    movel(ek_bottom, a=0.05, v=0.03)
    $ 458 "ek_end" "breakAfter"
    movel(ek_end, a=0.05, v=0.03)
    $ 459 "MoveJ"
    $ 461 "ek_oldhome" "breakAfter"
    movej(ek_oldhome, a=1.3962634015954636, v=1.0471975511965976)
    $ 462 "'above waypoint is home'"
    # 'above waypoint is home'
  end
  def align_tcp_forward():
    $ 464 "align_tcp_forward" "noBreak"
    $ 465 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 466 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 467 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 468 "MoveJ"
    $ 469 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_up():
    $ 470 "align_tcp_up" "noBreak"
    $ 471 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 472 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 473 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 474 "MoveJ"
    $ 475 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_for_step():
    $ 476 "align_for_step" "noBreak"
    $ 477 "'first move block is unnecessay and bad'"
    # 'first move block is unnecessay and bad'
    $ 489 "'second one is good'"
    # 'second one is good'
    $ 490 "MoveJ"
    $ 491 "goalpt2" "breakAfter"
    movej(get_inverse_kin(goalpt2_p, qnear=goalpt2_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def Corner_Homing_45():
    $ 492 "Corner_Homing_45" "noBreak"
    $ 493 "'Use this program when tool is already positioned close to corner at 45deg'"
    # 'Use this program when tool is already positioned close to corner at 45deg'
    $ 494 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
    # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
    $ 495 "Set"
    set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
    $ 496 "'dummy move below for debug'"
    # 'dummy move below for debug'
    $ 501 "Wait: 1.0"
    sleep(1.0)
    $ 502 "tp≔get_actual_tcp_pose()"
    global tp= get_actual_tcp_pose ()
    $ 504 "path_pre≔get_corner_homing_45_pathpoints(tp,tcp_pose_top)"
    global path_pre=get_corner_homing_45_pathpoints(tp,tcp_pose_top)
    $ 505 "ph1≔path_pre[0]"
    global ph1=path_pre[0]
    $ 506 "ph2≔path_pre[1]"
    global ph2=path_pre[1]
    $ 507 "ph3≔path_pre[2]"
    global ph3=path_pre[2]
    $ 508 "ph4≔path_pre[3]"
    global ph4=path_pre[3]
    $ 509 "ph5≔path_pre[4]"
    global ph5=path_pre[4]
    $ 510 "ph6≔path_pre[5]"
    global ph6=path_pre[5]
    $ 511 "ph7≔path_pre[6]"
    global ph7=path_pre[6]
    $ 512 "ph2up≔path_pre[7]"
    global ph2up=path_pre[7]
    $ 513 "ph4up≔path_pre[8]"
    global ph4up=path_pre[8]
    $ 514 "MoveL"
    $ 515 "ph1" "breakAfter"
    movel(ph1, a=0.2, v=0.25)
    $ 516 "ph2" "breakAfter"
    movel(ph2, a=0.2, v=0.25)
    $ 517 "MoveL"
    $ 518 "Direction: Base"
    global move_thread_flag_518=0
    thread move_thread_518():
      enter_critical
      move_thread_flag_518 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.02)
      move_thread_flag_518 = 2
      exit_critical
    end
    move_thread_flag_518 = 0
    move_thread_han_518 = run move_thread_518()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_518
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 519 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 520 "p11≔get_actual_tcp_pose()"
    global p11= get_actual_tcp_pose ()
    $ 521 "MoveJ"
    $ 522 "ph2" "breakAfter"
    movej(ph2, a=1.3962634015954636, v=1.0471975511965976)
    $ 523 "ph2up" "breakAfter"
    movej(ph2up, a=1.3962634015954636, v=1.0471975511965976)
    $ 524 "MoveL"
    $ 525 "Direction: Base"
    global move_thread_flag_525=0
    thread move_thread_525():
      enter_critical
      move_thread_flag_525 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.02)
      move_thread_flag_525 = 2
      exit_critical
    end
    move_thread_flag_525 = 0
    move_thread_han_525 = run move_thread_525()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_525
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 526 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 527 "p13≔get_actual_tcp_pose()"
    global p13= get_actual_tcp_pose ()
    $ 528 "MoveJ"
    $ 529 "ph2up" "breakAfter"
    movej(ph2up, a=1.3962634015954636, v=1.0471975511965976)
    $ 530 "ph3" "breakAfter"
    movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
    $ 531 "MoveL"
    $ 532 "Direction: Base"
    global move_thread_flag_532=0
    thread move_thread_532():
      enter_critical
      move_thread_flag_532 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.02)
      move_thread_flag_532 = 2
      exit_critical
    end
    move_thread_flag_532 = 0
    move_thread_han_532 = run move_thread_532()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_532
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 533 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 534 "p12≔get_actual_tcp_pose()"
    global p12= get_actual_tcp_pose ()
    $ 535 "MoveJ"
    $ 536 "ph3" "breakAfter"
    movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
    $ 537 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 538 "MoveJ"
    $ 539 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 541 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 542 "MoveJ"
    $ 543 "ph4" "breakAfter"
    movej(ph4, a=1.3962634015954636, v=1.0471975511965976)
    $ 544 "MoveL"
    $ 545 "Direction: Base"
    global move_thread_flag_545=0
    thread move_thread_545():
      enter_critical
      move_thread_flag_545 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.02)
      move_thread_flag_545 = 2
      exit_critical
    end
    move_thread_flag_545 = 0
    move_thread_han_545 = run move_thread_545()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_545
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 546 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 547 "p21≔get_actual_tcp_pose()"
    global p21= get_actual_tcp_pose ()
    $ 548 "MoveL"
    $ 549 "ph4" "breakAfter"
    movel(ph4, a=1.2, v=0.25)
    $ 550 "ph4up" "breakAfter"
    movel(ph4up, a=1.2, v=0.25)
    $ 551 "MoveL"
    $ 552 "Direction: Base"
    global move_thread_flag_552=0
    thread move_thread_552():
      enter_critical
      move_thread_flag_552 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.02)
      move_thread_flag_552 = 2
      exit_critical
    end
    move_thread_flag_552 = 0
    move_thread_han_552 = run move_thread_552()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_552
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 553 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 554 "p23≔get_actual_tcp_pose()"
    global p23= get_actual_tcp_pose ()
    $ 555 "MoveL"
    $ 556 "ph4up" "breakAfter"
    movel(ph4up, a=1.2, v=0.25)
    $ 557 "ph5" "breakAfter"
    movel(ph5, a=1.2, v=0.25)
    $ 558 "MoveL"
    $ 559 "Direction: Base"
    global move_thread_flag_559=0
    thread move_thread_559():
      enter_critical
      move_thread_flag_559 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.02)
      move_thread_flag_559 = 2
      exit_critical
    end
    move_thread_flag_559 = 0
    move_thread_han_559 = run move_thread_559()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_559
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 560 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 561 "p22≔get_actual_tcp_pose()"
    global p22= get_actual_tcp_pose ()
    $ 562 "MoveJ"
    $ 563 "ph5" "breakAfter"
    movej(ph5, a=1.3962634015954636, v=1.0471975511965976)
    $ 564 "ph4" "breakAfter"
    movej(ph4, a=1.3962634015954636, v=1.0471975511965976)
    $ 566 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 567 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 568 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 569 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 570 "ph6" "breakAfter"
    movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
    $ 571 "ph7" "breakAfter"
    movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
    $ 572 "MoveL"
    $ 573 "Direction: Base Z+"
    global move_thread_flag_573=0
    thread move_thread_573():
      enter_critical
      move_thread_flag_573 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.02)
      move_thread_flag_573 = 2
      exit_critical
    end
    move_thread_flag_573 = 0
    move_thread_han_573 = run move_thread_573()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_573
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 574 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 575 "p3≔get_actual_tcp_pose()"
    global p3= get_actual_tcp_pose ()
    $ 576 "MoveJ"
    $ 577 "ph7" "breakAfter"
    movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
    $ 578 "ph6" "breakAfter"
    movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
    $ 579 "Waypoint_14" "breakAfter"
    movej(get_inverse_kin(Waypoint_14_p, qnear=Waypoint_14_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 580 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 581 "Waypoint_41" "breakAfter"
    movej(get_inverse_kin(Waypoint_41_p, qnear=Waypoint_41_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 582 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 584 "Comment"
    # Comment
    $ 585 "Comment"
    # Comment
    $ 586 "Comment"
    # Comment
    $ 587 "Comment"
    # Comment
    $ 588 "Comment"
    # Comment
    $ 589 "Comment"
    # Comment
  end
  $ 2 "BeforeStart"
  $ 3 "Safe Home Folder"
  $ 4 "'if robot is not at home, send it back to home safely'"
  # 'if robot is not at home, send it back to home safely'
  $ 5 "'make sure the tcp is welder'"
  # 'make sure the tcp is welder'
  $ 6 "Set"
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  $ 7 "sp≔get_actual_tcp_pose()"
  global sp= get_actual_tcp_pose ()
  $ 8 "MoveL"
  $ 9 "sp" "breakAfter"
  movel(sp, a=1.2, v=0.25)
  $ 10 "'if first move is to a variable, skip automove'"
  # 'if first move is to a variable, skip automove'
  $ 11 "'turn off welder'"
  # 'turn off welder'
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 12 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 13 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 14 "jp≔get_actual_joint_positions()"
  global jp= get_actual_joint_positions ()
  $ 15 "If sp[0]>0.600"
  if (sp[0]>0.600):
    $ 16 "'if x > 600 then above then home'"
    # 'if x > 600 then above then home'
    $ 17 "MoveJ"
    $ 19 "Waypoint_76" "breakAfter"
    movej(get_inverse_kin(Waypoint_76_p, qnear=Waypoint_76_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "Home"
    movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
  else:
    $ 21 "Else" "noBreak"
    $ 22 "Popup: retreating to home"
    popup("retreating to home", "Message", False, False, blocking=True)
    $ 23 "'for rules 2-8, finish with oldhome then above then home'"
    # 'for rules 2-8, finish with oldhome then above then home'
    $ 24 "If -1.74<jp[4] and jp[4]<1.05 and -1.74<jp[3] and jp[3]<1.74"
    if (-1.74<jp[4]  and  jp[4]<1.05  and  -1.74<jp[3]  and  jp[3]<1.74):
      $ 25 "'if oldhome, test teach, then go straight to oldhome'"
      # 'if oldhome, test teach, then go straight to oldhome'
    else:
      $ 26 "ElseIf sp[0]<-.5 and jp[3]>3.14 and -2.62<jp[4] and jp[4]<-0.87"
      if (sp[0]<-.5  and  jp[3]>3.14  and  -2.62<jp[4]  and  jp[4]<-0.87):
        $ 27 "'if left side weld approach, left weld approach in reverse'"
        # 'if left side weld approach, left weld approach in reverse'
        $ 28 "MoveJ"
        $ 29 "Waypoint_50" "breakAfter"
        movej(get_inverse_kin(Waypoint_50_p, qnear=Waypoint_50_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 30 "Waypoint_51" "breakAfter"
        movej(get_inverse_kin(Waypoint_51_p, qnear=Waypoint_51_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 31 "Waypoint_52" "breakAfter"
        movej(get_inverse_kin(Waypoint_52_p, qnear=Waypoint_52_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 32 "Waypoint_53" "breakAfter"
        movej(get_inverse_kin(Waypoint_53_p, qnear=Waypoint_53_q), a=1.3962634015954636, v=1.0471975511965976)
      else:
        $ 33 "ElseIf sp[0]<0 and 0<jp[3] and jp[3]<1.74 and 0.87<jp[4] and jp[4]<2.62"
        if (sp[0]<0  and  0<jp[3]  and  jp[3]<1.74  and  0.87<jp[4]  and  jp[4]<2.62):
          $ 34 "'if right side around, move back then wapoint 24 then oldhome'"
          # 'if right side around, move back then wapoint 24 then oldhome'
          $ 35 "If sp[0]<-1.0"
          if (sp[0]<-1.0):
            $ 36 "xback≔p[-1.0,sp[1],sp[2],sp[3],sp[4],sp[5]]"
            global xback=p[-1.0,sp[1],sp[2],sp[3],sp[4],sp[5]]
            $ 37 "MoveJ"
            $ 38 "xback" "breakAfter"
            movej(xback, a=1.3962634015954636, v=1.0471975511965976)
          end
          $ 39 "MoveJ"
          $ 40 "Waypoint_54" "breakAfter"
          movej(get_inverse_kin(Waypoint_54_p, qnear=Waypoint_54_q), a=1.3962634015954636, v=1.0471975511965976)
        else:
          $ 41 "ElseIf jp[3]>2.62 and jp[4]<-3.84"
          if (jp[3]>2.62  and  jp[4]<-3.84):
            $ 42 "'if left side second half, then left weld ending sequence'"
            # 'if left side second half, then left weld ending sequence'
            $ 43 "If jp[5]<0.35"
            if (jp[5]<0.35):
              $ 44 "MoveJ"
              $ 45 "Waypoint_65" "breakAfter"
              movej(get_inverse_kin(Waypoint_65_p, qnear=Waypoint_65_q), a=1.3962634015954636, v=1.0471975511965976)
            end
            $ 46 "MoveJ"
            $ 51 "'above is testing, below is real'"
            # 'above is testing, below is real'
            $ 52 "Waypoint_55" "breakAfter"
            movej(get_inverse_kin(Waypoint_55_p, qnear=Waypoint_55_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 54 "Waypoint_59" "breakAfter"
            movej(get_inverse_kin(Waypoint_59_p, qnear=Waypoint_59_q), t=2.0)
            $ 55 "Waypoint_71" "breakAfter"
            movej(get_inverse_kin(Waypoint_71_p, qnear=Waypoint_71_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 56 "Waypoint_58" "breakAfter"
            movej(get_inverse_kin(Waypoint_58_p, qnear=Waypoint_58_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 57 "Waypoint_56" "breakAfter"
            movej(get_inverse_kin(Waypoint_56_p, qnear=Waypoint_56_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 58 "Waypoint_57" "breakAfter"
            movej(get_inverse_kin(Waypoint_57_p, qnear=Waypoint_57_q), a=1.3962634015954636, v=1.0471975511965976)
          else:
            $ 59 "ElseIf jp[3]<-2.09"
            if (jp[3]<-2.09):
              $ 60 "'bottom homing'"
              # 'bottom homing'
              $ 61 "MoveJ"
              $ 63 "Comment"
              # Comment
              $ 64 "If sp[0]<-0.95"
              if (sp[0]<-0.95):
                $ 65 "xback≔p[-0.95,sp[1],sp[2],sp[3],sp[4],sp[5]]"
                global xback=p[-0.95,sp[1],sp[2],sp[3],sp[4],sp[5]]
                $ 66 "MoveL"
                $ 67 "xback" "breakAfter"
                movel(xback, a=1.2, v=0.25)
              end
              $ 68 "Waypoint_67" "breakAfter"
              movej(get_inverse_kin(Waypoint_67_p, qnear=Waypoint_67_q), a=1.3962634015954636, v=1.0471975511965976)
            else:
              $ 69 "ElseIf jp[3]<0 and jp[4]<-3.14"
              if (jp[3]<0  and  jp[4]<-3.14):
                $ 70 "'if left side homing, special unspin'"
                # 'if left side homing, special unspin'
                $ 71 "MoveJ"
                $ 73 "Comment"
                # Comment
                $ 74 "Waypoint_69" "breakAfter"
                movej(get_inverse_kin(Waypoint_69_p, qnear=Waypoint_69_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 75 "Waypoint_70" "breakAfter"
                movej(get_inverse_kin(Waypoint_70_p, qnear=Waypoint_70_q), a=1.3962634015954636, v=1.0471975511965976)
              else:
                $ 76 "ElseIf (sp[4]<-3 or sp[4]>3) and -0.02<sp[5] and sp[5]<0.02"
                if ((sp[4]<-3  or  sp[4]>3)  and  -0.02<sp[5]  and  sp[5]<0.02):
                  $ 77 "'go straight to home'"
                  # 'go straight to home'
                else:
                  $ 78 "ElseIf 2>1"
                  if (2>1):
                    $ 79 "'if none of the other options, then error continuously'"
                    # 'if none of the other options, then error continuously'
                    $ 80 "Loop 2>1"
                    while (2>1):
                      $ 81 "Popup: Unknown Position. Find Calvin for Assistance"
                      popup("Unknown Position. Find Calvin for Assistance", "Message", False, False, blocking=True)
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    $ 82 "'insert logic for how to get back to oldhome'"
    # 'insert logic for how to get back to oldhome'
    $ 83 "'finish with oldhome then above then home'"
    # 'finish with oldhome then above then home'
    $ 84 "MoveJ"
    $ 85 "Waypoint_49" "breakAfter"
    movej(get_inverse_kin(Waypoint_49_p, qnear=Waypoint_49_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 87 "Waypoint_75" "breakAfter"
    movej(get_inverse_kin(Waypoint_75_p, qnear=Waypoint_75_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 88 "Home"
    movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 590 "Thread_1"
  thread Thread_1():
    $ 591 "Loop  True "
    while (  True  ):
      $ 592 "If freedrive_m_var≟ True "
      if (freedrive_m_var ==   True  ):
        $ 593 "freedrive_mode()"
        freedrive_mode()
        $ 594 "free_dr_already≔ True "
        global free_dr_already=  True  
      else:
        $ 595 "Else" "noBreak"
        $ 596 "If free_dr_already"
        if (free_dr_already):
          $ 597 "end_freedrive_mode()"
          end_freedrive_mode()
        end
      end
      $ 598 "sync()"
      sync()
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 89 "Robot Program"
  $ 90 "'start of main program'"
  # 'start of main program'
  $ 91 "Set"
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  $ 92 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
  $ 93 "Script: analyze_touchpoints.script"
  # this file creates the function for analyzing touchpoints
  # define pi
  pi = 3.1415926535
  # initialize a lift column extension needed of 0.0
  global liftcolumnzneeded = 0.0
  
  # this is the main entry point for calculations.
  # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
  # specifically for Down, Over, then Around (DOtA)
  # specifically for right-sided boxes (vertical weld on right side of edge)
  def main_calculate_right(p11, p12, p21, p22, p3, p13, p23, chamferover):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
      struct2 = calculate_DOtA_points_right(struct1, list1, chamferover)
      validity = check_validity_right(struct1, struct2)
      return struct2
  end
  
  # this is the main entry point for calculations.
  # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
  # specifically for Down, Over, then Around (DOtA)
  # specifically for left-sided boxes (vertical weld on left side of edge)
  def main_calculate_left(p11, p12, p21, p22, p3, p13, p23, chamferover):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
      struct2 = calculate_DOtA_points_left(struct1, list1, chamferover)
      validity = check_validity_left(struct1, struct2)
      return struct2
  end
  
  # this is the main entry point for calculations, for Floor Corner Extended.
  # it takes in the 7 touchpoints, analyzes the shape of the box.
  # takes in the user defined point for the top of the weld (tcp_pose_top) and then calculates path points
  # loopingly tries to calculate the extension along the sidewall that fulfills get_inverse_kin_has_solution() and provides the farthest extension possible
  # returns the pathpoints
  # specifically for Down, Over, then Around (DOtA)
  # specifically for right-sided boxes (vertical weld on right side of edge)
  def main_calculate_right_extended(p11, p12, p21, p22, p3, p13, p23, chamferover, chamferup, tcp_pose_top):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
      struct2 = calculate_DOtA_points_right_extended(struct1, list1, chamferover, chamferup, tcp_pose_top)
      struct3 = check_validity_right(struct1, struct2)
      return struct3
  end
  
  # this is the main entry point for calculations, for Floor Corner Extended.
  # it takes in the 7 touchpoints, analyzes the shape of the box.
  # takes in the user defined point for the top of the weld (tcp_pose_top) and then calculates path points
  # loopingly tries to calculate the extension along the sidewall that fulfills get_inverse_kin_has_solution() and provides the farthest extension possible
  # returns the pathpoints
  # specifically for Down, Over, then Around (DOtA)
  # specifically for left-sided boxes (vertical weld on left side of edge)
  def main_calculate_left_extended(p11, p12, p21, p22, p3, p13, p23, chamferover, chamferup, tcp_pose_top):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
      struct2 = calculate_DOtA_points_left_extended(struct1, list1, chamferover, chamferup, tcp_pose_top)
      struct3 = check_validity_left(struct1, struct2)
      return struct3
  end
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, pointapproach1, pointapproach2, point1, point2, point3, point4, point5, pointreturn1, heading1, heading2, heading3, path2r1, path2r2, path2l1, path2l2)
  # specifically for Around then Up (AtU)
  def analyze_touchpoints(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    # FIND THE FOUR POINTS ON THE LINES
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance = 8
    roundoverdistance = 0.05
    zup = .375
    # inches
    wd = welddistance * 25.4 / 1000
    rod = roundoverdistance * 25.4 / 1000
    zup = zup * 25.4 / 1000
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l1delxunit * wd
    y = yintersect + l1delyunit * wd
    z = zcoord + zup
  
    point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
  
    x = xintersect + l1delxunit * rod
    y = yintersect + l1delyunit * rod
  
    point2 = p[x,y,z,1.570796,0,0]
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l2delxunit * wd
    y = yintersect + l2delyunit * wd
  
    point5 = p[x,y,z,0,-1.570796,0]
  
    x = xintersect + l2delxunit * rod
    y = yintersect + l2delyunit * rod
  
    point4 = p[x,y,z,0,-1.570796,0]
  
    #DEFINE APPROACH POINTS
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
    pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
    pointapproach2 = p[point1[0], point1[1]+0.1, point1[2], point1[3], point1[4], point1[5]]
    pointreturn1 = p[point5[0]+0.1, point5[1], point5[2], point5[3], point5[4], point5[5]]
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #FIND POINT 3
    #see if we have to / can find point 3
    findpoint3 = True
    if roundoverdistance == 0:
      findpoint3 = False
    end
    if findpoint3:
      # i need to find the point3 such that the arc from p2 to p3 to p4 is tangent to p1-p2 and p4-p5. making this a smooth path will be good
      # the direction of movement is from pointintersect in the direction of heading2
      # how much movement though? this will depend on whether it is actually a 90 degree angle or not.
      # first, find the perpendicular lines through points 2 and 4
      perp2 = find_perpendicular_line(ml1, point2[0], point2[1])
      perp4 = find_perpendicular_line(ml2, point4[0], point4[1])
      # next, find the intersection of those two lines
      perpintersect = find_intersection(perp2[0], perp2[1], perp4[0], perp4[1])
      radiusofcircle = distance_between(perpintersect[0], perpintersect[1], 0, point2[0], point2[1], 0)
      # find a vector the direction of heading2
      uvx = cos(heading2)
      uvy = sin(heading2)
      # compute point3. pass in negative radius because the direction is into the tank but we want to move from the intersection out to the rounded edge
      point3coords = add_vectordistance_to_point(perpintersect[0], perpintersect[1], z, uvx, uvy, 0, -1 * radiusofcircle)
      point3 = p[point3coords[0], point3coords[1], point3coords[2], 0, 0, 0]
    end
  
    #APPLY ACTUAL RXRYRZ TO POINTS
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    pointapproach1 = p[pointapproach1[0], pointapproach1[1], pointapproach1[2], rx, ry, rz]
    pointapproach2 = p[pointapproach2[0], pointapproach2[1], pointapproach2[2], rx, ry, rz]
    point1 = p[point1[0], point1[1], point1[2], rx, ry, rz]
    point2 = p[point2[0], point2[1], point2[2], rx, ry, rz]
    rxryrz = convert_heading_to_axang(heading2)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    if findpoint3:
      point3 = p[point3[0], point3[1], point3[2], rx, ry, rz]
    else:
      point3 = point2
    end
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point4 = p[point4[0], point4[1], point4[2], rx, ry, rz]
    point5 = p[point5[0], point5[1], point5[2], rx, ry, rz]
    pointreturn1 = p[pointreturn1[0], pointreturn1[1], pointreturn1[2], rx, ry, rz]
  
    #find path2 (the part that goes up)
    four_vertical_points = find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, zup, wd, heading1, heading3)
    path2r1 = four_vertical_points[0]
    path2r2 = four_vertical_points[1]
    path2l1 = four_vertical_points[2]
    path2l2 = four_vertical_points[3]
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, pointapproach1=pointapproach1, pointapproach2=pointapproach2, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, pointreturn1=pointreturn1, heading1=heading1, heading2=heading2, heading3=heading3, path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
    return ret
  end
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
  def analyze_touchpoints_only(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, heading1=heading1, heading2=heading2, heading3=heading3, l1delxunit=l1delxunit, l1delyunit=l1delyunit, l2delxunit=l2delxunit, l2delyunit=l2delyunit)
    return ret
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  # for right, for non-extended
  def calculate_DOtA_points_right(struct1, listleans, chamferover):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance1 = 8 # vertical weld distance
      welddistance2 = 6 # first path second leg
      welddistance3 = 8 # second path second leg
      zup = .375
      # inches
      wd1 = welddistance1 * 25.4 / 1000
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      zup = zup * 25.4 / 1000
      chamferovermm =  chamferover * 25.4 / 1000
  
      x = pointintersect[0] + l1delxunit * chamferovermm
      y = pointintersect[1] + l1delyunit * chamferovermm
      z = pointintersect[2] + zup
  
      #apply actual rxryrz to points
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l1delxunit * wd2
      y = y + l1delyunit * wd2
      point5 = p[x, y, z, rx, ry, rz]
  
      # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l1delxunit * chamferovermm
      y = pointintersect[1] + l1delyunit * chamferovermm
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_1 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l1delxunit * rod
      y = pointintersect[1] + l1delyunit * rod
      point_2 = p[x, y, z, rx, ry, rz]
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l2delxunit * wd3
      y = pointintersect[1] + l2delyunit * wd3
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_5 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l2delxunit * rod
      y = pointintersect[1] + l2delyunit * rod
      point_4 = p[x, y, z, rx, ry, rz]
  
      #FIND POINT 3
      # by calling analyze_touchpoints()
      atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
      point_3 = atret[5]
  
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
      return struct2
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  # for left, for non-extended
  def calculate_DOtA_points_left(struct1, listleans, chamferover):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance1 = 8 # vertical weld distance
      welddistance2 = 6 # first path second leg
      welddistance3 = 8 # second path second leg
      zup = .375
      # inches
      wd1 = welddistance1 * 25.4 / 1000
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      zup = zup * 25.4 / 1000
      chamferovermm =  chamferover * 25.4 / 1000
  
      x = pointintersect[0] + l2delxunit * chamferovermm
      y = pointintersect[1] + l2delyunit * chamferovermm
      z = pointintersect[2] + zup
  
      #apply actual rxryrz to points
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz]
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l2delxunit * wd2
      y = y + l2delyunit * wd2
      point5 = p[x, y, z, rx, ry, rz]
  
      # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l2delxunit * chamferovermm
      y = pointintersect[1] + l2delyunit * chamferovermm
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_1 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l2delxunit * rod
      y = pointintersect[1] + l2delyunit * rod
      point_2 = p[x, y, z, rx, ry, rz]
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l1delxunit * wd3
      y = pointintersect[1] + l1delyunit * wd3
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_5 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l1delxunit * rod
      y = pointintersect[1] + l1delyunit * rod
      point_4 = p[x, y, z, rx, ry, rz]
  
      #FIND POINT 3
      # by calling analyze_touchpoints()
      atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
      point_3 = atret[5]
      #point 3 will not have the correct rxryrz though because now the gun needs to be face up.
      rxryrz = convert_heading_to_axang_ccw(heading2)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_3 = p[point_3[0], point_3[1], point_3[2], rx, ry, rz]
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
      return struct2
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  # for right, for extended
  def calculate_DOtA_points_right_extended(struct1, listleans, chamferover, chamferup, tcp_pose_top):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      # welddistance1 = 8 # vertical weld distance
      welddistance2 = 6 # first path second leg
      welddistance3 = 8 # second path second leg
  
      # inches
      # wd1 = welddistance1 * 25.4 / 1000
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      zup = chamferup * 25.4 / 1000
      chamferovermm =  chamferover * 25.4 / 1000
  
      # weld distance is the distance that it will weld. this will make it start at the z height that the user specified
      wd1 = tcp_pose_top[2] - pointintersect[2] - zup
  
      x = pointintersect[0] + l1delxunit * chamferovermm
      y = pointintersect[1] + l1delyunit * chamferovermm
      z = pointintersect[2] + zup
  
      #apply actual rxryrz to points
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l1delxunit * wd2
      y = y + l1delyunit * wd2
      point5 = p[x, y, z, rx, ry, rz]
  
      # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l1delxunit * chamferovermm
      y = pointintersect[1] + l1delyunit * chamferovermm
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_1 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l1delxunit * rod
      y = pointintersect[1] + l1delyunit * rod
      point_2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      x = pointintersect[0] + l2delxunit * rod
      y = pointintersect[1] + l2delyunit * rod
      point_4 = p[x, y, z, rx, ry, rz]
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l2delxunit * wd3
      y = pointintersect[1] + l2delyunit * wd3
      point_5 = p[x, y, z, rx, ry, rz]
  
      #FIND POINT 3
      # by calling analyze_touchpoints()
      atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
      point_3 = atret[5]
  
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
      return struct2
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  # for left, for extended
  def calculate_DOtA_points_left_extended(struct1, listleans, chamferover, chamferup, tcp_pose_top):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      # welddistance1 = 8 # vertical weld distance
      welddistance2 = 6 # first path second leg
      welddistance3 = 8 # second path second leg
  
      # inches
      # wd1 = welddistance1 * 25.4 / 1000
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      zup = chamferup * 25.4 / 1000
      chamferovermm =  chamferover * 25.4 / 1000
  
      # weld distance is the distance that it will weld. this will make it start at the z height that the user specified
      wd1 = tcp_pose_top[2] - pointintersect[2] - zup
  
      x = pointintersect[0] + l2delxunit * chamferovermm
      y = pointintersect[1] + l2delyunit * chamferovermm
      z = pointintersect[2] + zup
  
      #apply actual rxryrz to points
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz]
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l2delxunit * wd2
      y = y + l2delyunit * wd2
      point5 = p[x, y, z, rx, ry, rz]
  
      # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l2delxunit * chamferovermm
      y = pointintersect[1] + l2delyunit * chamferovermm
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_1 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l2delxunit * rod
      y = pointintersect[1] + l2delyunit * rod
      point_2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      x = pointintersect[0] + l1delxunit * rod
      y = pointintersect[1] + l1delyunit * rod
      point_4 = p[x, y, z, rx, ry, rz]
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l1delxunit * wd3
      y = pointintersect[1] + l1delyunit * wd3
      point_5 = p[x, y, z, rx, ry, rz]
  
      #FIND POINT 3
      # by calling analyze_touchpoints()
      atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
      point_3 = atret[5]
      #point 3 will not have the correct rxryrz though because now the gun needs to be face up
      rxryrz = convert_heading_to_axang_ccw(heading2)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_3 = p[point_3[0], point_3[1], point_3[2], rx, ry, rz]
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
      return struct2
  end
  
  # this function analyzes the vertical points
  # calculates the slope of the edge in question
  # specifically, for each inch up in the z direction, what is the change in x and change in y direction
  # returns a list of [nx, ny]
  def analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3):
      # first, find the equations of the planes from the 6 points
      plane1 = findplane(p11, p12, p13)
      plane2 = findplane(p21, p22, p23)
      # Find the Direction Vector of the Line: The direction vector d of the line of intersection can be found by taking the cross product of the normal vectors of each plane (a, b, and c)
      nx = plane1[1]*plane2[2] - plane1[2]*plane2[1]
      ny = plane1[2]*plane2[0] - plane1[0]*plane2[2]
      nz = plane1[0]*plane2[1] - plane1[1]*plane2[0]
      # normalize the vector so the z length is 1
      multiplier = 1 / nz
      nx = nx * multiplier
      ny = ny * multiplier
      nz = nz * multiplier # should become equal to 1
      ret = [nx, ny]
      return ret
  end
  
  # given 3 points, this finds the plane and its equation
  # rereturns ax + by + cz + d = 0 in a list of [a, b, c, d]
  def findplane(p11, p12, p13):
      # extract coordinates
      x1 = p11[0]
      y1 = p11[1]
      z1 = p11[2]
      x2 = p12[0]
      y2 = p12[1]
      z2 = p12[2]
      x3 = p13[0]
      y3 = p13[1]
      z3 = p13[2]
      # create vectors from the points
      v1x = x2-x1
      v1y = y2-y1
      v1z = z2-z1
      v2x = x3-x1
      v2y = y3-y1
      v2z = z3-z1
      #calculate the normal vector using the cross product
      nx = v1y*v2z - v1z*v2y # i component
      ny = v1z*v2x - v1x*v2z # j component
      nz = v1x*v2y - v1y*v2x # k component
      # calculate d in the plane equation
      d = -1 * (nx*x1 + ny*y1 + nz*z1)
      ret = [nx, ny, nz, d]
      return ret
  end
  
  # given a heading, (ccw from +x axis), find the mx+b slope
  # fails if exactly vertical
  def get_slope_from_heading(heading):
      return tan(heading)
  end
  
  
  
  # this function finds the points (and rxryrz) of the 2 points (start and end) of vertical weld section
  def find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, offset, wd, heading1, heading3):
  
    # find right side stuff
    # find the point in 3d space that is .375 up and .375 over
    x = pointintersect[0] + l1delxunit * offset
    y = pointintersect[1] + l1delyunit * offset
    z = pointintersect[2] + offset
    # find rxryrz
    rxryrz = convert_heading_to_axang_preheatup(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    path2r1 = p[x, y, z, rx, ry, rz]
    path2r2 = p[x, y, z + wd, rx, ry, rz]
  
    # find left side
    # find the point in 3d space that is .375 up and .375 over
    x = pointintersect[0] + l2delxunit * offset
    y = pointintersect[1] + l2delyunit * offset
    z = pointintersect[2] + offset
    # find rxryrz
    rxryrz = convert_heading_to_axang_preheatup(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    path2l1 = p[x, y, z, rx, ry, rz]
    path2l2 = p[x, y, z + wd, rx, ry, rz]
  
    ret = struct(path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
    return ret
  end
  
  # this function converts a unit vector to its heading angle ccw from x+ axis
  # takes uvx and uvy
  # returns heading in radians
  def convert_uv_to_heading(uvx, uvy):
    baseang = atan(uvy/uvx)
    if uvx < 0:
      ang = baseang + pi
    elif uvy < 0:
      ang = baseang + pi * 2
    else:
      ang = baseang
    end
    return ang
  end
  
  # this function finds the equation of a line, perpendicular to a given line, and going through a given point
  # takes 3 arguments: m (the original line's slope), x (point's x coord), y (point's y coord). the b of the original line is not needed
  # returns a list of [m,b] (the slope and intercept of the new line)
  def find_perpendicular_line(origm, x, y):
    m = (1/origm) * -1
    b = y - m*x
    ret = [m, b]
    return ret
  end
  
  # this function finds the intersection point between two lines in the xy plane
  # takes 4 arguments: m1, b1, m2, b2
  # returns a list of [x,y] (the point of intersection)
  def find_intersection(m1, b1, m2, b2):
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    x = (b2-b1) / (m1-m2)
    y = m1 * x + b1
    ret = [x, y]
    return ret
  end
  
  # this function finds the distance between 2 points in 3d space
  # it takes 6 arguments: x1, y1, z1, x2, y2, z2
  # it returns a distance
  def distance_between(x1, y1, z1, x2, y2, z2):
    distsquared = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)
    dist = sqrt(distsquared)
    return dist
  end
  
  # this function takes a point, a unit vector, and a distance, and adds the distance to the point in the direction of the unit vector (3d space)
  # it returns a point as a list of coordinates
  def add_vectordistance_to_point(xi, yi, zi, uvx, uvy, uvz, delta):
    xf = xi + uvx * delta
    yf = yi + uvy * delta
    zf = zi + uvz * delta
    ret = [xf, yf, zf]
    return ret
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the bottom side of the gun facing up.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang(heading):
   axisxraw = -1 * sin(heading)
   axisyraw = cos(heading) + 1
   axiszraw = sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing up. Used for welding in a vertical path.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_preheatup(heading):
   axisxraw = -sin(heading) + 1
   axisyraw = cos(heading)
   axiszraw = cos(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (-sin(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing down. Used for welding in a vertical path downwards.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_preheatdown(heading):
   axisxraw = -sin(heading) - 1
   axisyraw = cos(heading)
   axiszraw = -cos(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (sin(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing right. Used for welding counterclockwise around the box.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_ccw(heading):
   axisxraw = -sin(heading)
   axisyraw = cos(heading) - 1
   axiszraw = -sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (-cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function is for getting the points along the path of the corner homing 45
  # point0 is the point where they touched
  def get_corner_homing_45_pathpoints(point0, pointtop = p[0,0,0,0,0,0]):
    p0x = point0[0]
    p0y = point0[1]
    p0z = point0[2]
    p0rx = point0[3]
    p0ry = point0[4]
    p0rz = point0[5]
  
    #constants
    #distances of how far away from point the touchpoints are
    d0 = 0.10 # how far from the box to retreat and approach
    d1 = 0.03 # first distance from init point
    d2 = 0.15 # second distance from init point
    d3 = 0.125 #vertical distance from first point
    sqrt2 = 0.707106781 # 1/sqrt(2) , the inverse of the sqrt(2)
  
    ph1 = p[p0x + d0, p0y, p0z + d1, p0rx, p0ry, p0rz] #approach point for turn
  
    ph2 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y+d0*0.5+sqrt2*d1, p0z+d1, 1.446, -0.8, -0.733]
    ph3 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y+d0*0.5+sqrt2*d2, p0z+d1, 1.446, -0.8, -0.733]
    ph4 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y-d0*0.5-sqrt2*d1, p0z+d1, 0.626, -1.993, -1.813]
    ph5 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y-d0*0.5-sqrt2*d2, p0z+d1, 0.626, -1.993, -1.813]
  
    # go back to ph1
    ph6 = p[p0x + d0, p0y, p0z -0.05, 0, 0, 0] # approach point for under turn
    # moveL from ph1 to ph6
    ph7 = p[p0x-d1, p0y, p0z-0.05, 0, 0, 0]
  
    # add the vertical touch points
    if pointtop[2] == 0:
      ph2up = p[ph2[0], ph2[1], ph2[2]+d3, ph2[3], ph2[4], ph2[5]]
      ph4up = p[ph4[0], ph4[1], ph4[2]+d3, ph4[3], ph4[4], ph4[5]]
    elif pointtop[2] > p0z + 0.914: # 0.914m = 36 inches
      ph2up = p[ph2[0], ph2[1], p0z + 0.914, ph2[3], ph2[4], ph2[5]]
      ph4up = p[ph4[0], ph4[1], p0z + 0.914, ph4[3], ph4[4], ph4[5]]
    else:
      ph2up = p[ph2[0], ph2[1], pointtop[2], ph2[3], ph2[4], ph2[5]]
      ph4up = p[ph4[0], ph4[1], pointtop[2], ph4[3], ph4[4], ph4[5]]
    end
    ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4, ph5=ph5, ph6=ph6, ph7=ph7, ph2up=ph2up, ph4up=ph4up)
    is_robot_at_reachable_spot(point0, ret)
    return ret
  end
  
  # this function checks whether the touchpoints are reachable AKA is the robot positioned in the right spot
  # if everything looks good, it continues.
  # if it detects a problem, it infinite loops a popup
  def is_robot_at_reachable_spot(point0, struct_touchpoints):
    # first, check whether the corner is too low to the ground that the bottom homing will hit the ground (z < -400)
    lc_height = get_lift_column_height_condensed()
    # total height = zeroed lift column height (41.25 inches) (1.04775 m) plus lift column height plus robot relative height
    totalheight = 1.04775 + lc_height + point0[2]
    if totalheight < 1.04775 - 0.400:
      # bad
      popuptext = "Tank Corner is too low to the ground. Collisions will occur. Stop Program and raise tank. "
      # infinite loop
      while 1==1:
        popup(popuptext, title="Robot Positioning Warning",blocking=True)
      end
    end
  
  
  
    # next, check whether the touchpoints are reachable
    allvalid = check_structofpoints_validity(struct_touchpoints)
    if not allvalid:
  
      # then unreachable
      # generate message
      listproblems = ""
      listnames = ["ph1", "ph2", "ph3", "ph4", "ph5", "ph6", "ph7", "ph2up", "ph4up"]
      i = 0
      structlength = 9
      while i < structlength:
        curr = struct_touchpoints[i]
        valid = get_inverse_kin_has_solution(curr)
        if not valid:
          listproblems = listproblems + listnames[i]
        end
        i = i + 1
      end
      # display
      popuptext = "Robot is too far from tank corner. Cannot reach some necessary positions. Stop Program and move robot closer. " + listproblems
      # infinite loop
      while 1==1:
        popup(popuptext, title="Robot Positioning Warning",blocking=True)
      end
    end
  
  end
  
  # this function takes a struct of points as an argument, and checks whether every point in the list is reachable using get_inverse_kin_has_solution()
  # this function does NOT check for weird twists or joint limits
  # inputstruct must contain only points
  # it returns true if all points are valid. it returns false if any points are valid
  # a list of length 0 indicates that all points are valid
  def check_structofpoints_validity(inputstruct):
    # next, check whether the touchpoints are reachable
    structlength = length(inputstruct)
    i = 0
    allvalid = True
    while i < structlength:
      curr = inputstruct[i]
      valid = get_inverse_kin_has_solution(curr)
      if not valid:
        return False
      end
      i = i + 1
    end
    return True
  end
  
  # checks the validity of all points during a left weld
  # takes 2 arguments: struct1 (struct1[0] has to contain pointintersect) and struct2 (contains all the points (9) of the weld path)
  def check_validity_left(struct1, struct2):
    #first, check whether robot is too close
    pointintersect = struct1[0]
    # next, check if the corner is too close to the robot to do a left around weld (complex but approximately X > -1300)
    # if y < 0, then x < -1300. if y < 480, then y > (1300+x)*8. if y > 480, then y > (1235+x)*4 + 500
    toocloseleftweld = False
    if pointintersect[1] < 0:
      if pointintersect[0] > -1.300:
        toocloseleftweld = True
      end
    elif pointintersect[1] < 0.480:
      if pointintersect[1] < (1.300 + pointintersect[0])*8:
        toocloseleftweld = True
      end
    else:
      if pointintersect[1] < (1.235 + pointintersect[0])*4 + 0.500:
        toocloseleftweld = True
      end
    end
    if toocloseleftweld:
      # bad
      popuptext = "Robot is too close to tank corner. Collisions may occur. Stop Program and move robot farther. "
      # infinite loop
      while 1==1:
        popup(popuptext, title="Robot Positioning Warning",blocking=True)
      end
    end
  
    #next, check whether all the points in the weldpath are valid
    structlength = 9
    i = 0
    allvalid = True
    listproblems = ""
    listnames = ["point1", "point2", "point4", "point5", "point_1", "point_2", "point_3", "point_4", "point_5"]
    while i < structlength:
      curr = struct2[i]
      valid = get_inverse_kin_has_solution(curr)
      if not valid:
        allvalid = False
        listproblems = listproblems + listnames[i]
      end
      i = i + 1
    end
  
    if not allvalid:
      # display
      popuptext = "Robot is too far from tank corner. Cannot reach some necessary positions. Stop Program and move robot closer. " + listproblems
      # infinite loop
      while 1==1:
        popup(popuptext, title="Robot Positioning Warning",blocking=True)
      end
    end
  
    # check whether the path involves weird turns or joint limits. currently just checks the first position
    p_prev = [-0.021118, -1.26292, 2.43578, 5.07088, -2.29912, 1.53362] #last point of left weld prerotate
    joints_1 = get_inverse_kin(struct2[0], p_prev) # struct2[0] is point1
    allGood = True
    i = 0
    structlength = 6
    while i < structlength:
      joint_curr = joints_1[i]
      # check for anything that exceeds joint limits
      degreesmax = 360 * pi / 180
      if joint_curr > degreesmax or joint_curr < degreesmax * -1:
        allGood = False
      end
      # check for anything that is significantly different than the aligned approach. could indicate a twist is needed. we dont want that
      maxdifference = 150 * pi / 180
      difference = joint_curr - p_prev[i]
      if difference > maxdifference or difference * -1 > maxdifference:
        allGood = False
      end
      i = i + 1
    end
  
    if not allGood:
      # call lift column extend function
      struct2 = floor_corner_lift_column_extend_left(struct2)
  
    end
  
    # return struct2 back
    return struct2
  end
  
  # checks the validity of all points during a right weld
  def check_validity_right(struct1, struct2):
    # first, check whether the right pivot will bonk itself
    pointintersect = struct1[0]
    heading1 = struct1[1] # this is the direction that the welder will face when doing the right side of the box
  
    #first, check whether the heading is just too far offset
    # more than 15 degrees off of 45 is too much
    # normal heading is 216 degrees
    #201 degrees to 231 degrees
    heading1degrees = heading1 * 180 / pi
    if heading1degrees < 201 or heading1degrees > 231 :
      # then out of range
      popuptext = "Robot is not aligned at a 45 degree angle of corner (15 degree leeway). Collisions may occur. Stop Program and align robot. heading1degrees=" + str_cat("",heading1degrees)
      # infinite loop
      while 1==1:
        popup(popuptext, title="Robot Positioning Warning",blocking=True)
      end
    end
  
    #TODO: add the checks for whether x is too close, given the heading
    # add checks for whether x is too close, given the heading
    # different equations for whether heading offset > 5 degrees or less (inc. negative)
    headingoffset = heading1degrees - 216
    if headingoffset < 5:
      # then calculate a and b
      a = 0.4584 + -0.02369 * headingoffset
      b = (-1151.4 + 13.83 * headingoffset) / 1000
      # check whether x > a*y+b
      if pointintersect[0] > a * pointintersect[1] + b:
        # bad
        popuptext = "Robot is too close to tank corner or not at the right angle. Collisions may occur. Stop Program and align robot. "
        # infinite loop
        while 1==1:
          popup(popuptext, title="Robot Positioning Warning",blocking=True)
        end
      end
    else:
      # headingoffset > 5 degrees
      if pointintersect[1] < 0:
        if pointintersect[0] > -1150.0 / 1000.0:
          #bad
          popuptext = "Robot is too close to tank corner. Collisions may occur. Stop Program and align robot. "
          # infinite loop
          while 1==1:
            popup(popuptext, title="Robot Positioning Warning",blocking=True)
          end
        end
      else:
        # if x > .7736 y - 1101.9 then bad
        if pointintersect[0] > 0.7736 * pointintersect[1] - 1101.9 / 1000:
          popuptext = "Robot is too close to tank corner. Collisions may occur. Stop Program and align robot. "
          # infinite loop
          while 1==1:
            popup(popuptext, title="Robot Positioning Warning",blocking=True)
          end
        end
      end
    end
  
    #next, check whether all the points in the weldpath are valid
    structlength = 9
    i = 0
    allvalid = True
    listproblems = ""
    listnames = ["point1", "point2", "point4", "point5", "point_1", "point_2", "point_3", "point_4", "point_5"]
    while i < structlength:
      curr = struct2[i]
      valid = get_inverse_kin_has_solution(curr)
      if not valid:
        allvalid = False
        listproblems = listproblems + listnames[i]
      end
      i = i + 1
    end
  
    if not allvalid:
      # display
      popuptext = "Robot is too far from tank corner. Cannot reach some necessary positions. Stop Program and move robot closer. " + listproblems
      # infinite loop
      while 1==1:
        popup(popuptext, title="Robot Positioning Warning",blocking=True)
      end
    end
  
    # check whether the path involves weird turns or joint limits. currently just checks the first position
    p_prev = [-1.13307, -1.48911, 2.84785, 4.92357, -4.89059, 1.57184] #last point of right weld prerotate
    joints_1 = get_inverse_kin(struct2[0], p_prev) # struct2[0] is point1
    allGood = True
    i = 0
    structlength = 6
    while i < structlength:
      joint_curr = joints_1[i]
      # check for anything that exceeds joint limits
      degreesmax = 360 * pi / 180
      if joint_curr > degreesmax or joint_curr < degreesmax * -1:
        allGood = False
      end
      # check for anything that is significantly different than the aligned approach. could indicate a twist is needed. we dont want that
      maxdifference = 150 * pi / 180
      difference = joint_curr - p_prev[i]
      if difference > maxdifference or difference * -1 > maxdifference:
        allGood = False
      end
      i = i + 1
    end
  
    if not allGood:
      struct2 = floor_corner_lift_column_extend_right(struct2)
    end
  
    # return struct2 back
    return struct2
  end
  
  def floor_corner_lift_column_extend_right(struct2):
    # we know that p1 cannot be accessed without a twist
    # calculate the height needed to get to p1
    liftcolumnincrement = 2.0 # mm
    enoughHeightAdded = False
    liftColumnHeightTest = 0
    while not enoughHeightAdded:
      liftColumnHeightTest = liftColumnHeightTest + liftcolumnincrement
      # set the orig_joints for p1. p1 demo was joint angles of [-0.45, -31.79, 56.47, 333.06, -130.98, 87.87] (degrees)
      # which equals [-0.007853981633974475, -0.5548401692089968, 0.985587428601197, 5.812993606692308, -2.28603225426217, 1.5336208137274159]
      orig_joints = [-0.007853981633974475, -0.5548401692089968, 0.985587428601197, 5.812993606692308, -2.28603225426217, 1.5336208137274159]
      # get the modified point:
      origp1 = struct2[0]
      testp1 = p[origp1[0], origp1[1], origp1[2] - liftColumnHeightTest / 1000.0, origp1[3], origp1[4], origp1[5]]
      testpa1 = p[origp1[0]+0.05, origp1[1]+0.05, origp1[2] - liftColumnHeightTest / 1000, origp1[3], origp1[4], origp1[5]]
      enoughHeightAdded = can_pose_be_reached_without_twist(testp1, orig_joints) and can_pose_be_reached_without_twist(testpa1, orig_joints)
    end
  
    origp2 = struct2[1]
    testp2 = p[origp2[0], origp2[1], origp2[2] - liftColumnHeightTest / 1000.0, origp2[3], origp2[4], origp2[5]]
    origp4 = struct2[2]
    testp4 = p[origp4[0], origp4[1], origp4[2] - liftColumnHeightTest / 1000, origp4[3], origp4[4], origp4[5]]
    origp5 = struct2[3]
    testp5 = p[origp5[0], origp5[1], origp5[2] - liftColumnHeightTest / 1000, origp5[3], origp5[4], origp5[5]]
  
  
  
    liftcolumnzneeded = liftColumnHeightTest
    ret = struct(point1=testp1,point2=testp2,point4=testp4,point5=testp5,point_1=struct2[4],point_2=struct2[5],point_3=struct2[6],point_4=struct2[7],point_5=struct2[8])
    return ret
  
  end
  
  # this function gets called if you are doing a left floor corner extended, and the top is too high to reach (twists, etc.)
  # this function takes the struct2 of weld points and modifies them (by subtracting from z) until the first weld point is reachable.
  # it determines the height that the lift column needs to raise to make the first point reachable
  # it then checks whether that height will allow the other points to be reachable
  # if its all good, it sets the global variable liftcolumnzneeded, modifies struct2's points, and returns struct2
  # if its not all good, then it displays an error message popup.
  def floor_corner_lift_column_extend_left(struct2):
    # we know that p1 cannot be accessed without a twist
    # calculate the height needed to get to p1
    liftcolumnincrement = 2 # mm
    enoughHeightAdded = False
    liftColumnHeightTest = 0
    while not enoughHeightAdded:
      liftColumnHeightTest = liftColumnHeightTest + liftcolumnincrement
      # set the orig_joints for p1. p1 demo was joint angles of [-0.45, -31.79, 56.47, 333.06, -130.98, 87.87] (degrees)
      # which equals [-0.007853981633974475, -0.5548401692089968, 0.985587428601197, 5.812993606692308, -2.28603225426217, 1.5336208137274159]
      orig_joints = [-0.007853981633974475, -0.5548401692089968, 0.985587428601197, 5.812993606692308, -2.28603225426217, 1.5336208137274159]
      # get the modified point:
      origp1 = struct2[0]
      testp1 = p[origp1[0], origp1[1], origp1[2] - liftColumnHeightTest / 1000, origp1[3], origp1[4], origp1[5]]
      enoughHeightAdded = can_pose_be_reached_without_twist(testp1, orig_joints)
    end
  
    # check whether the other 3 points are valid
    valid = True
    # get the modified point
    origp2 = struct2[1]
    testp2 = p[origp2[0], origp2[1], origp2[2] - liftColumnHeightTest / 1000, origp2[3], origp2[4], origp2[5]]
    # p2 demo was joint angles of [-0.45, -21.2, 56.98, 321.95, -130.97, 87.85] (degrees)
    # which equals [-0.007853981633974475, -0.3700098014227975, 0.9944886077863679, 5.619087526795738, -2.285857721336971, 1.5332717478770168]
    orig_joints = [-0.007853981633974475, -0.3700098014227975, 0.9944886077863679, 5.619087526795738, -2.285857721336971, 1.5332717478770168]
    valid = valid and can_pose_be_reached_without_twist(testp2, orig_joints)
    # get the modified point
    origp4 = struct2[2]
    testp4 = p[origp4[0], origp4[1], origp4[2] - liftColumnHeightTest / 1000, origp4[3], origp4[4], origp4[5]]
    # p4 demo was joint angles of [-8.62, -43.23, 99.53, 213.86, -89.19, 40.78] (degrees)
    # which equals [-0.15044738152191103, -0.7545058356371478, 1.7371262045099545, 3.7325611383150696, -1.556659159853741, 0.7117452689632868]
    orig_joints = [-0.15044738152191103, -0.7545058356371478, 1.7371262045099545, 3.7325611383150696, -1.556659159853741, 0.7117452689632868]
    valid = valid and can_pose_be_reached_without_twist(testp4, orig_joints)
    # get the modified point
    origp5 = struct2[3]
    testp5 = p[origp5[0], origp5[1], origp5[2] - liftColumnHeightTest / 1000, origp5[3], origp5[4], origp5[5]]
    # p5 demo was joint angles of [-0.59, -34.36, 77.71, 226.7, -89.18, 48.81] (degrees)
    # which equals [-0.010297442586766533, -0.5996951309852511, 1.356295361724792, 3.9566614142711405, -1.5564846269285415, 0.8518952078984314]
    orig_joints = [-0.010297442586766533, -0.5996951309852511, 1.356295361724792, 3.9566614142711405, -1.5564846269285415, 0.8518952078984314]
    valid = valid and can_pose_be_reached_without_twist(testp5, orig_joints)
  
    if not valid:
      # display
      popuptext = "Top of Weld is too high above robot. Cannot reach some necessary positions. Stop Program and try again with a lower top point. "
      # infinite loop
      while 1==1:
        popup(popuptext, title="Robot Positioning Warning",blocking=True)
      end
    else:
      liftcolumnzneeded = liftColumnHeightTest
      ret = struct(point1=testp1,point2=testp2,point4=testp4,point5=testp5,point_1=struct2[4],point_2=struct2[5],point_3=struct2[6],point_4=struct2[7],point_5=struct2[8])
      return ret
    end
  end
  
  # this function calculates whether a given pose can be reached, and if it can, whether it requires a wrist twist (from the seed joint angles)
  # arguments are target pose (p[x,y,z,rx,ry,rz]) and orig_joints which is the 6 joint angles of a pose that is close by the target pose and has the desired joint angles
  # returns true if the pose is valid and requires no twist. If pose is valid but requires a twist, returns false. If pose is invalid, returns false.
  def can_pose_be_reached_without_twist(pose, orig_joints):
    # first, determine if the pose is valid
    valid = get_inverse_kin_has_solution(pose)
    if not valid:
      return False
    end
    valid = get_inverse_kin_has_solution(pose, orig_joints)
    if not valid:
      return False
    else:
      joints_1 = get_inverse_kin(pose, orig_joints)
      #iterate through the 6 joints
      allGood = True
      i = 0
      structlength = 6
      while i < structlength:
        joint_curr = joints_1[i]
        # check for anything that exceeds joint limits
        degreesmax = 360 * pi / 180
        if joint_curr > degreesmax or joint_curr < degreesmax * -1:
          allGood = False
        end
        # check for anything that is significantly different than the aligned approach. could indicate a twist is needed. we dont want that
        maxdifference = 150 * pi / 180
        difference = joint_curr - orig_joints[i]
        if difference > maxdifference or difference * -1 > maxdifference:
          allGood = False
        end
        i = i + 1
      end
      return allGood
    end
  
  end
  
  # this function sends a signal to turn extrusion on
  def turn_extrusion_on():
    # flush the channel
    resp0 = send_serial_signal(["u", "r", "?"])
    # send the signal
    resp1 = send_serial_signal(["u", "R", "1"])
    # if resp <> "uR1"
    if resp1 != [252,82,49]:
      # turn off extrusion and heating. inform calvin
      resp2 = send_serial_signal(["u", "R", "0"])
      resp3 = send_serial_signal(["u", "H", "0"])
      popuptext = "Error code encountered while trying to start extrusion. Find Calvin. "
      while 1==1:
        popup(popuptext, title="Extrusion Error Code",blocking=True)
        popup(resp1, blocking=True)
      end
    end
  end
  
  # this function sends a signal and receives a response
  # signal is a list of 3 strings, 1 character each. first is u. second is the next character. third is final character
  def send_serial_signal(signal):
    signal2char = signal[1]
    signal3char = signal[2]
    listsignal = [252, get_corr_number(signal2char), get_corr_number(signal3char)]
    resp1 = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", listsignal, True)
    return resp1
  end
  
  # this function converts a letter into its ascii number
  def get_corr_number(letter):
    if letter == "A":
      return 65
    elif letter == "H":
      return 72
    elif letter == "R":
      return 82
    elif letter == "M":
      return 77
    elif letter == "E":
      return 69
    elif letter == "a":
      return 97
    elif letter == "b":
      return 98
    elif letter == "h":
      return 104
    elif letter == "r":
      return 114
    elif letter == "s":
      return 115
    elif letter == "m":
      return 109
    elif letter == "0":
      return 48
    elif letter == "1":
      return 49
    elif letter == "2":
      return 50
    elif letter == "3":
      return 51
    elif letter == "4":
      return 52
    elif letter == "5":
      return 53
    elif letter == "6":
      return 54
    elif letter == "7":
      return 55
    elif letter == "8":
      return 56
    elif letter == "9":
      return 57
    elif letter == "?":
      return 63
    end
  end
  
  # this function checks whether the welder is in the ready state.
  # to be called at the beginning of Main Program
  def welder_state_ready():
    # flush the channel
    resp0 = send_serial_signal(["u", "s", "?"])
    # send the signal
    resp1 = send_serial_signal(["u", "s", "?"])
    # if resp1 == [252,115,49] (us1) then it is ready. otherwise, it is not
    if resp1 != [252,115,49]:
      popuptext = "Welder is not ready for extrusion. Follow the instructions to start heating welder. "
      while 1==1:
        popup(popuptext, title="Welder Not Ready",blocking=True)
      end
    end
  
  end
  
  def get_lift_column_height():
    # begin: URCap Program Node
    #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
    #   Type: MachineLogic for Universal Robots
    #$ 5 "MachineLogic Get Position"
    while isVentionMovementBusyMachineMotion1==True:
      sleep(0.05)
    end
    if(isVentionMovementBusyMachineMotion1 == False):
      isVentionMovementBusyMachineMotion1 = True
      socket_send_string("estop/status;", "MachineMotion1")
      temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
      while(temp_estop_var_vention=="estop/status true"):
        if temp_estop_var_vention=="estop/status true":
          sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
        end
        socket_send_string("estop/status;", "MachineMotion1")
        temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
        if temp_estop_var_vention=="estop/status true":
          popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
        end
      end
    else:
      popup("resource is being used already: MachineMotion1")
      halt
    end
    socket_send_string("GET im_get_controller_pos_axis_1;", "MachineMotion1")
    temp_drive = socket_read_ascii_float(1, "MachineMotion1",timeout=15)
    global var_1 = temp_drive[1]
    isVentionMovementBusyMachineMotion1 = False
    sleep(0.03)
    # end: URCap Program Node
  end
  
  def get_lift_column_height_condensed():
    socket_send_string("GET im_get_controller_pos_axis_1;", "MachineMotion1")
    temp_drive = socket_read_ascii_float(1, "MachineMotion1",timeout=15)
    ret = temp_drive[1]
    return ret
  end
  
  # this function takes two rotation matrices, and multiplies them together, returning one matrix.
  # all matrices are in the form of a list.
  # all matrix values have constant values (no variables)
  def multiply_matrix(matrix1, matrix2):
      # retrieve values
      a11 = matrix1[0]
      a12 = matrix1[1]
      a13 = matrix1[2]
      a21 = matrix1[3]
      a22 = matrix1[4]
      a23 = matrix1[5]
      a31 = matrix1[6]
      a32 = matrix1[7]
      a33 = matrix1[8]
      b11 = matrix2[0]
      b12 = matrix2[1]
      b13 = matrix2[2]
      b21 = matrix2[3]
      b22 = matrix2[4]
      b23 = matrix2[5]
      b31 = matrix2[6]
      b32 = matrix2[7]
      b33 = matrix2[8]
      #calculate c values
      c11 = a11*b11 + a12*b21 + a13*b31
      c12 = a11*b12 + a12*b22 + a13*b32
      c13 = a11*b13 + a12*b23 + a13*b33
      c21 = a21*b11 + a22*b21 + a23*b31
      c22 = a21*b12 + a22*b22 + a23*b32
      c23 = a21*b13 + a22*b23 + a23*b33
      c31 = a31*b11 + a32*b21 + a33*b31
      c32 = a31*b12 + a32*b22 + a33*b32
      c33 = a31*b13 + a32*b23 + a33*b33
      # return resulting matrix
      ret = [c11, c12, c13, c21, c22, c23, c31, c32, c33]
      return ret
  end
  
  # this function converts a matrix to axis angle representations
  # this matrix is usually a resulting matrix (result of matrix multiplication) in normal use, given as a list
  # returns a list of [rx,ry,rz]
  def convert_matrix_to_axang(matrix1):
      # retrieve values
      a11 = matrix1[0]
      a12 = matrix1[1]
      a13 = matrix1[2]
      a21 = matrix1[3]
      a22 = matrix1[4]
      a23 = matrix1[5]
      a31 = matrix1[6]
      a32 = matrix1[7]
      a33 = matrix1[8]
  
      # First Half: find the angle
      # find the trace
      # using the formula: trace = a11 + a22 + a33
      trace = a11 + a22 + a33
      # find the angle using the formula: trace(matrix) = 1 + 2 cos(angle)
      angle = acos((trace - 1.0)/2.0)
  
      # Second Half: calculate the rotation axis
      axisxraw = a32 - a23
      axisyraw = a13 - a31
      axiszraw = a21 - a12
      # normalize axis
      magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
      axisxunit = axisxraw / magnitude
      axisyunit = axisyraw / magnitude
      axiszunit = axiszraw / magnitude
  
      # combine axis and angle into rxryrz representation
      rxout = axisxunit * angle
      ryout = axisyunit * angle
      rzout = axiszunit * angle
      return [rxout, ryout, rzout]
  end
  
  # this function takes a rotation and calculates the corresponding rotation matrix
  # input is (axis, direction, angle in radians)
  # example is ("x", 1, pi/6) = a 30 degree turn around the x axis in the positive direction (right hand rule)
  # returns a matrix (a list of 9 values)
  def get_rotation_matrix_from_description(axis, direction, angle):
      # get the angle
      a = angle * direction
      # get the axis
      if axis == "x" or axis == "X":
          matrix = [1, 0, 0, 0, cos(a), -1 * sin(a), 0, sin(a), cos(a)]
          return matrix
      end
      if axis == "y" or axis == "Y":
          matrix = [cos(a), 0, sin(a), 0, 1, 0, -1*sin(a), 0, cos(a)]
          return matrix
      end
      if axis == "z" or axis == "Z":
          matrix = [cos(a), -1*sin(a), 0, sin(a), cos(a), 0, 0, 0, 1]
          return matrix
      end
      # bad
      popuptext = "Error in get_rotation_matrix_from_description. "
      # infinite loop
      while 1==1:
        popup(popuptext, title="Code Error",blocking=True)
      end
  end
  
  def main_calculate_step_right(p11, p12, p21, p22, p3, p13, p23, noncappingsidewallthick, cappingsidewallthick, tcp_pose_top):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
      #struct2 = calculate_DOtA_points_right(struct1, list1, chamferover)
      #validity = check_validity_right(struct1, struct2)
      struct2 = calculate_LtUA_step_right(struct1, list1, noncappingsidewallthick, cappingsidewallthick, tcp_pose_top)
      return struct2
  end
  
  # analyze_touchpoints_only()
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
  #   FIND HEADINGS
  #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
  # so, heading1 finds the angle (from the +x axis) to the position pointing perpendicularly into the box.
  # we need to be +90 degrees of all 3 headings. (but we can ignore heading 2)
  def step_right_demo(struct1):
      pointintersect = struct1[0]
      x = pointintersect[0]
      y = pointintersect[1]
      z = pointintersect[2]
      heading1 = struct1[1]
      heading1adj1 = heading1 + pi/2 #(90 deg) (parrallel to edge not perpendicular into
      heading1adj2 = heading1adj1 - pi/2 #(90 deg) (from y+ not x+)
      # heading1 == heading1adj2. ok
      m1 = get_rotation_matrix_from_description("z", 1, heading1)
      # at this point we would multiply matrices, but there is only one matrix
      rxryrz = convert_matrix_to_axang(m1)
      point_demo = p[x, y, z, rxryrz[0], rxryrz[1], rxryrz[2]]
      popup(point_demo)
      movej(point_demo, a=1.4, v=0.1)
      popup(point_demo)
      ret = struct(point_demo = point_demo)
      return ret
  end
  
  # for a right step corner, calculate the toolpath points for a L (under) then Up and Around weld.
  def calculate_LtUA_step_right(struct1, list1, rightwallthick, leftwallthick, tcp_pose_top):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance1 = 3 # first path first leg
      welddistance2 = 3 # first path second leg
      welddistance3 = 8 # vertical weld distance
  
      # inches
      wd1 = welddistance1 * 25.4 / 1000
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      leftwallthickmm = leftwallthick * 25.4 / 1000 # in this step corner right, this is distance from left edge
      rightwallthickmm =  rightwallthick * 25.4 / 1000 # in this step corner right, this is distance from right edge
  
  
      # weld distance is the distance that it will weld. this will make it start at the z height that the user specified
      #wd1 = tcp_pose_top[2] - pointintersect[2] - zup # this will need to change for step corner right
  
      # point bottom (point of intersection of the two chamfers on the bottom)
      xbottom = pointintersect[0] + l1delxunit * leftwallthickmm + l2delxunit * rightwallthickmm
      ybottom = pointintersect[1] + l1delyunit * leftwallthickmm + l2delyunit * rightwallthickmm
      z = pointintersect[2]
  
      # point 1
      x = xbottom + l1delxunit * wd1
      y = ybottom + l1delyunit * wd1
  
      m1 = get_rotation_matrix_from_description("z", 1, heading1)
      # at this point we would multiply matrices, but there is only one matrix
      rxryrz = convert_matrix_to_axang(m1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point1 = p[x, y, z, rx, ry, rz]
  
      # point 2
      point2 = p[xbottom, ybottom, z, rx, ry, rz]
  
      # point 4
      m1 = get_rotation_matrix_from_description("z", 1, heading3)
      # at this point we would multiply matrices, but there is only one matrix
      rxryrz = convert_matrix_to_axang(m1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point4 = p[xbottom, ybottom, z, rx, ry, rz]
  
      # point 5
      x = xbottom + l2delxunit * wd2
      y = ybottom + l2delyunit * wd2
      point5 = p[x, y, z, rx, ry, rz]
  
  
      # form struct
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point1, point_2=point1, point_3=point1, point_4=point1, point_5=point1)
      return struct2
  end
  
  # step corner with two seams on bottom face
  # vertical seam on right side of corner
  # Down Around and Under weld path, then Back Away
  # the first path uses backofhole TCP, the second path uses pretend_welder TCP
  def calculate_DAaU_step_right(struct1, listleans, rightwallthick, leftwallthick, tcp_pose_top):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance1 = 8 # first path first leg (down)
      welddistance2 = 3 # first path second leg (under) # inches
      welddistance3 = 3 # second path (back away) # inches
  
      # inches
      wd1 = tcp_pose_top[2] - pointintersect[2] # the touchpoint minus the corner
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      leftwallthickmm = leftwallthick * 25.4 / 1000 # in this step corner right, this is distance from left edge
      rightwallthickmm =  rightwallthick * 25.4 / 1000 # in this step corner right, this is distance from right edge
  
      # first, calculate the location of the bottom of the vertical chamfer (where point2 would be if there weren't any circle motion
      x = pointintersect[0] + l1delxunit * leftwallthickmm
      y = pointintersect[1] + l1delyunit * leftwallthickmm
      z = pointintersect[2]
      pointbottomvcham = p[x, y, z, 0, 0, 0]
  
      # calculate the rxryrz for facing the vertical chamfer, with the preheat down
      rxryrz = convert_heading_to_axang_preheatdown(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      # next, calculate point1 using the listleans
      point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
      #point2 = p[x, y, z, rx, ry, rz] not true here because we are doing a circle move and we need to account for that
  
      # the round over distance is the distance from pointbottomvcham to point2 (which will be the same as distance to p4)
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
      point2 = p[x, y, z + rod, rx, ry, rz]
  
      # calculate point2a, which is directly above pointbottomvcham (used to straighten weldpath before circlemove)
      straightlength = 0.2 # the moveP blend radius for the circle move was set to 1.0 mm in FloorCorner. we should be more than 2.0mm away from point2
      sld = straightlength * 25.4 / 1000
      point2a = p[x, y, z + sld, rx, ry, rz]
  
  
      # calculate the rxryrz for facing the underneath section, with the preheat facing parallel to the left edge (rx and ry should be 0 because gun is facing up)
      m1 = get_rotation_matrix_from_description("z", 1, heading3)
      rxryrz = convert_matrix_to_axang(m1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      # calculate point4
      p4x = x + l2delxunit * rod
      p4y = y + l2delyunit * rod
      point4 = p[p4x, p4y, z, rx, ry, rz]
  
      # calculate point5
      p5x = x + l2delxunit * wd2
      p5y = y + l2delyunit * wd2
      point5 = p[p5x, p5y, z, rx, ry, rz]
  
      # calculate point3
      # we know that the angle is exactly 90 degrees
      delta = calc_rod_midpoint_90deg(rod)
      p3z = z + delta
      p3x = x + delta * l2delxunit
      p3y = y + delta * l2delyunit
  
      # calculate rxryrz
      m1 = get_rotation_matrix_from_description("x", -1, 45 * pi / 180) # rotation 1: 45 degrees forward about x axis
      m2 = get_rotation_matrix_from_description("z", 1, heading3) # rotation 2
      m3 = multiply_matrix(m2, m1) #we rotate m1 first then m2, so we multiply in backwards order: 2 then 1
      rxryrz = convert_matrix_to_axang(m3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point3 = p[p3x, p3y, p3z, rx, ry, rz]
  
      #todo: calculate trail out point
  
      # calculate back-away (points 201 and 202)
      p201x = x + l2delxunit * rightwallthickmm
      p201y = y + l2delyunit * rightwallthickmm
  
      # calculate rxryrz
      m1 = get_rotation_matrix_from_description("z", 1, heading1 - pi)
      # minus pi/2 for the different start point. minus pi/2 for parallel not perpendicular into
      rxryrz = convert_matrix_to_axang(m1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point201 = p[p201x, p201y, z, rx, ry, rz]
  
      # calculate point 202
      p202x = p201x + wd3 * l1delxunit
      p202y = p201y + wd3 * l1delyunit
      point202 = p[p202x, p202y, z, rx, ry, rz]
  
      struct2 = struct(point1=point1, point2=point2a=point2a, point2=point2, point3=point3, point4=point4, point5=point5, point201=point201, point202=point202)
      return struct2
  end
  
  # given a round over distance (in mm), calculate (based on 90 degrees) the distance from corner (line intersection) to midpoint of arc
  # returns a value (in mm) that you need to move from line intersection to midpoint (actual distance will be this times sqrt(2))
  def calc_rod_midpoint_90deg(rod):
      # the factor is (1- 1/sqrt(2))
      factor = 0.292893
      ret = rod * factor
      return ret
  end
  $ 95 "leftchoice≔'Select Yes for a Left side weld, or select No for a Right Side weld.'"
  global leftchoice=request_boolean_from_primary_client("Select Yes for a Left side weld, or select No for a Right Side weld.")
  $ 96 "floorchoice≔'Is the capping wall 3/4 inch?'"
  global floorchoice=request_boolean_from_primary_client("Is the capping wall 3/4 inch?")
  $ 97 "If floorchoice"
  if (floorchoice):
    $ 98 "floorthick≔0.628"
    global floorthick=0.628
  else:
    $ 99 "Else" "noBreak"
    $ 100 "floorthick≔0.375"
    global floorthick=0.375
  end
  $ 101 "sidewallchoice≔'Is the other wall 3/4 inch?'"
  global sidewallchoice=request_boolean_from_primary_client("Is the other wall 3/4 inch?")
  $ 102 "If sidewallchoice"
  if (sidewallchoice):
    $ 103 "sidewall≔0.628"
    global sidewall=0.628
  else:
    $ 104 "Else" "noBreak"
    $ 105 "sidewall≔0.375"
    global sidewall=0.375
  end
  $ 106 "MoveJ"
  $ 107 "Waypoint_46" "breakAfter"
  movej(get_inverse_kin(Waypoint_46_p, qnear=Waypoint_46_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 108 "Set"
  set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
  $ 109 "Test_Teach_Position()"
  Test_Teach_Position()
  $ 110 "Set"
  set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
  $ 111 "kill threadId_Thread_1"
  kill threadId_Thread_1
  $ 112 "Corner_Homing_45()"
  Corner_Homing_45()
  $ 113 "Set"
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  $ 118 "If leftchoice≟ True "
  if (leftchoice ==   True  ):
    $ 119 "pathturn≔main_calculate_left_extended(p11,p12,p21,p22,p3,p13,p23,sidewall,floorthick,tcp_pose_top)"
    global pathturn=main_calculate_left_extended(p11,p12,p21,p22,p3,p13,p23,sidewall,floorthick,tcp_pose_top)
    $ 120 "extrude_knife3()"
    extrude_knife3()
    $ 121 "Call move_path_3left"
    move_path_3left()
  else:
    $ 122 "Else" "noBreak"
    $ 123 "pathturn≔main_calculate_step_right(p11,p12,p21,p22,p3,p13,p23,sidewall,floorthick,tcp_pose_top)"
    global pathturn=main_calculate_step_right(p11,p12,p21,p22,p3,p13,p23,sidewall,floorthick,tcp_pose_top)
    $ 124 "extrude_knife3()"
    extrude_knife3()
    $ 125 "move_path_step_right()"
    move_path_step_right()
  end
  $ 127 "MoveJ"
  $ 128 "Waypoint_46" "breakAfter"
  movej(get_inverse_kin(Waypoint_46_p, qnear=Waypoint_46_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 129 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
end
