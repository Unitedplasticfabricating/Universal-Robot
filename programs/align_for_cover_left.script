def align_for_cover_left():
  global _hidden_verificationVariable=0
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 = 0.0
  thread Step_Counter_Thread_5cae079c_b6a8_4d9c_956a_44e16054eccd():
    while (True):
      step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 = step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_5cae079c_b6a8_4d9c_956a_44e16054eccd()
  global Waypoint_4_p=p[-.634693257118, .247570758022, .474891918795, -2.409113229835, -1.111294703800, 1.128221220575]
  global Waypoint_4_q=[-2.918409517091006, -1.130700698023488, -2.096373719624969, -2.2849817795239993, 0.8961046798977055, 0.10799070352990178]
  global Waypoint_3_p=p[-.612561950762, .243502475626, .102410364723, -2.911951382294, -1.175244506658, -.006926728010]
  global Waypoint_3_q=[-2.977835455580779, -1.8478377370769383, -2.007182568140033, -2.434874955750219, 0.9678560292809983, 0.0036113126149359687]
  $ 2 "Robot Program"
  $ 11 "actualprogram"
  $ 12 "liftcolumnup"
  $ 13 "liftcolumnzâ‰”liftcolumnzneeded"
  global liftcolumnz=liftcolumnzneeded
  # begin: URCap Program Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  $ 14 "MachineLogic Move to Position"
  while isVentionMovementBusyMachineMotion1==True:
  sleep(0.05)
  end
  if(isVentionMovementBusyMachineMotion1 == False):
  isVentionMovementBusyMachineMotion1 = True
  socket_send_string("estop/status;", "MachineMotion1")
  temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
  while(temp_estop_var_vention=="estop/status true"):
  if temp_estop_var_vention=="estop/status true":
  sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
  end
  socket_send_string("estop/status;", "MachineMotion1")
  temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
  if temp_estop_var_vention=="estop/status true":
  popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
  end
  end
  else:
  popup("resource is being used already: MachineMotion1")
  halt
  end
  sendString("SET speed_v2 600000.000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 50000.000", "Ack", "MachineMotion1")
  string_vention=intToString(liftcolumnz*1000,"MachineMotion1")
  sendString("SET de_move_abs_1 "+string_vention, "Ack", "MachineMotion1")
  sendString("de_move_abs_exec", "Ack", "MachineMotion1")
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  pollString("isMotionCompleted", "MachineMotion isMotionCompleted = true", "MachineMotion1")
  isVentionMovementBusyMachineMotion1 = False
  sleep(0.03)
  # end: URCap Program Node
  $ 15 "MoveJ"
  $ 16 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 17 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
end
