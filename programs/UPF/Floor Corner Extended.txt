 Program
   Variables Setup
   BeforeStart
     Safe Home Folder
       'if robot is not at home, send it back to home safely'
       'make sure the tcp is welder'
       Set
       sp≔get_actual_tcp_pose()
       MoveL
         sp
         'if first move is to a variable, skip automove'
       'turn off welder'
       Serial Bridge uR0
       Set DO[0]=Off
       jp≔get_actual_joint_positions()
       If sp[0]>0.600
         'if x > 600 then above then home'
         MoveJ
           Waypoint_47
         Home
       Else
         Popup: retreating to home
         'for rules 2-8, finish with oldhome then above then home'
         If -1.74<jp[4] and jp[4]<1.05 and -1.74<jp[3] and jp[3]<1.74
           'if oldhome, test teach, then go straight to oldhome'
         ElseIf sp[0]<-.5 and jp[3]>3.14 and -2.62<jp[4] and jp[4]<-0.87
           'if left side weld approach, left weld approach in reverse'
           MoveJ
             Waypoint_50
             Waypoint_51
             Waypoint_52
             Waypoint_53
         ElseIf sp[0]<0 and 0<jp[3] and jp[3]<1.74 and 0.87<jp[4] and jp[4]<2.62
           'if right side around, move back then wapoint 24 then oldhome'
           If sp[0]<-1.0
             xback≔p[-1.0,sp[1],sp[2],sp[3],sp[4],sp[5]]
             MoveJ
               xback
           MoveJ
             Waypoint_54
         ElseIf jp[3]>2.62 and jp[4]<-3.84
           'if left side second half, then left weld ending sequence'
           If jp[5]<0.35
             MoveJ
               Waypoint_65
           MoveJ
             'Waypoint_61'
             'Waypoint_62'
             'Waypoint_63'
             'Waypoint_64'
             'above is testing, below is real'
             Waypoint_55
             'Waypoint_60'
             Waypoint_59
             Waypoint_71
             Waypoint_58
             Waypoint_56
             Waypoint_57
         ElseIf jp[3]<-2.09
           'bottom homing'
           MoveJ
             'Waypoint_66'
             Comment
             If sp[0]<-0.95
               xback≔p[-0.95,sp[1],sp[2],sp[3],sp[4],sp[5]]
               MoveL
                 xback
             Waypoint_67
         ElseIf jp[3]<0 and jp[4]<-3.14
           'if left side homing, special unspin'
           MoveJ
             'Waypoint_68'
             Comment
             Waypoint_69
             Waypoint_70
         ElseIf (sp[4]<-3 or sp[4]>3) and -0.02<sp[5] and sp[5]<0.02
           'go straight to home'
         ElseIf 2>1
           'if none of the other options, then error continuously'
           Loop 2>1
             Popup: Unknown Position. Find Calvin for Assistance
         'insert logic for how to get back to oldhome'
         'finish with oldhome then above then home'
         MoveJ
           Waypoint_49
           Waypoint_48
         Home
   Robot Program
     'start of main program'
     Set
     Home
     Script: analyze_touchpoints.script
     welder_state_ready()
     leftchoice≔'Select Yes for a Left side weld, or select No for a Right Side weld.'
     sidewallchoice≔'Is the sidewall 3/4 inch?'
     If sidewallchoice
       sidewall≔0.628
     Else
       sidewall≔0.375
     MoveJ
       Waypoint_46
     Set
     Test_Teach_Position()
     Set
     kill threadId_Thread_1
     Corner_Homing_45()
     Set
     'path1≔analyze_touchpoints(p11,p12,p21,p22,p3)'
     'Call '
     'MoveJ'
     If leftchoice≟ True 
       pathturn≔main_calculate_left_extended(p11,p12,p21,p22,p3,p13,p23,sidewall,tcp_pose_top)
       extrude_knife3()
       Call move_path_3left
     Else
       pathturn≔main_calculate_right_extended(p11,p12,p21,p22,p3,p13,p23,sidewall,tcp_pose_top)
       extrude_knife3()
       move_path_3right()
     'Popup'
     MoveJ
       Waypoint_46
     Home
   move_path_3right
     'this is the path for Down, Over, then Back Around'
     Comment
     'MoveJ'
     align_ready_for_welding()
     Comment
     p1≔pathturn[0]
     p2≔pathturn[1]
     p4≔pathturn[2]
     p5≔pathturn[3]
     pa1≔p[p1[0]+0.05,p1[1]+0.05,p1[2],p1[3],p1[4],p1[5]]
     MoveJ
       pa1
     MoveL
       p1
     Wait: 8.0
     Serial Bridge uR1
     Wait: 1.0
     'turn_extrusion_on()'
     Set DO[0]=On
     MoveL
       p2
     Serial Bridge uR0
     Wait: 0.5
     Set DO[0]=Off
     MoveL
       p4
     Serial Bridge uR1
     Wait: 1.0
     'turn_extrusion_on()'
     Set DO[0]=On
     MoveL
       p5
     Serial Bridge uR0
     Wait: 2.0
     Set DO[0]=Off
     Comment
     pret1≔p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]
     p_1≔pathturn[4]
     p_2≔pathturn[5]
     p_3≔pathturn[6]
     p_4≔pathturn[7]
     p_5≔pathturn[8]
     p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
     p_pre_ret≔p[p_1[0]+.03,p_1[1]+.03,p_1[2],p_1[3],p_1[4],p_1[5]]
     p_pre_ret2≔p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
     MoveJ
       pret1
       Waypoint_8
       'Waypoint_9'
       Waypoint_22
     'preheat'
     MoveJ
       p_pre_ret
       p_pre_ret2
       p_preheat
     Wait: 8.0
     MoveJ
       p_pre_ret2
       p_pre_ret
     Set
     MoveL
       p_1
     Serial Bridge uR1
     Wait: 1.0
     Set DO[0]=On
     'turn_extrusion_on()'
     MoveL
       p_2
     MoveP
       CircleMove
         p_3
         p_4
     MoveL
       p_5
     Serial Bridge uR0
     Wait: 2.0
     Set DO[0]=Off
     MoveL
       Waypoint_23
     MoveJ
       Waypoint_24
       Waypoint_39
       'above waypoint is home'
   move_path_3left
     'this is the path for Down, Over, then Back Around'
     Comment
     MoveJ
       Waypoint_37
       'above point is home'
       Waypoint_15
       Waypoint_25
       Waypoint_72
       Waypoint_26
       Waypoint_27
       'Waypoint_1'
       'Waypoint_2'
       'Waypoint_3'
       'Home'
     Comment
     p1≔pathturn[0]
     p2≔pathturn[1]
     p4≔pathturn[2]
     p5≔pathturn[3]
     pa1≔p[p1[0]+0.05,p1[1]-0.05,p1[2],p1[3],p1[4],p1[5]]
     MoveJ
       pa1
     MoveL
       p1
     Wait: 8.0
     Serial Bridge uR1
     Wait: 1.0
     'turn_extrusion_on()'
     Set DO[0]=On
     MoveL
       p2
     Serial Bridge uR0
     Wait: 0.5
     Set DO[0]=Off
     MoveL
       p4
     Serial Bridge uR1
     Wait: 1.0
     'turn_extrusion_on()'
     Set DO[0]=On
     MoveL
       p5
     Serial Bridge uR0
     Wait: 2.0
     Set DO[0]=Off
     Comment
     pret1≔p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]
     p_1≔pathturn[4]
     p_2≔pathturn[5]
     p_3≔pathturn[6]
     p_4≔pathturn[7]
     p_5≔pathturn[8]
     p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
     p_pre_ret≔p[p_1[0]+.03,p_1[1]-.03,p_1[2],p_1[3],p_1[4],p_1[5]]
     p_pre_ret2≔p[p_3[0]+.03,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
     MoveJ
       pret1
       Waypoint_28
       'now go into the ccw weld position'
       Waypoint_29
       Comment
       Waypoint_30
       Waypoint_31
       'Waypoint_9'
       'Waypoint_22'
     'MoveP'
     MoveL
       p_pre_ret
       p_pre_ret2
       p_preheat
     Wait: 8.0
     MoveL
       p_pre_ret2
       p_pre_ret
     Set
     MoveL
       p_1
     Serial Bridge uR1
     Wait: 1.0
     Set DO[0]=On
     'turn_extrusion_on()'
     MoveL
       p_2
     MoveP
       CircleMove
         p_3
         p_4
     MoveL
       p_5
     Serial Bridge uR0
     Wait: 2.0
     Set DO[0]=Off
     'MoveL'
     'MoveJ'
     MoveJ
       Waypoint_32
       Waypoint_33
       Waypoint_73
     Comment
     MoveJ
       Waypoint_16
       Waypoint_17
       Waypoint_18
       Waypoint_38
       'above point is home'
   Test_Teach_Position
     'MoveL'
     MoveJ
       Waypoint_40
       'above waypoint is home'
       Waypoint_2
     freedrive_m_var≔ False 
     freedrive_m_var≔ True 
     Popup: Move the TCP to the top of the weld, then click 'Continue'
     tcp_pose_top≔get_actual_tcp_pose()
     Popup: Move the TCP to the corner of the tank, then click 'Continue'
     tcp_pose≔get_actual_tcp_pose()
     freedrive_m_var≔ False 
     Wait: 0.25
     sync()
   align_tcp_left
     'this program aligns the tcp parallel to the y direction'
     cp≔get_actual_tcp_pose()
     aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]
     MoveJ
       aligned_y_pose
   extrude_knife3
     'Home'
     Set
     MoveJ
       Waypoint_20
       'above waypoint is home'
     'move above bucket'
     MoveJ
       Waypoint_3
     'extrude out a foot'
     'Serial Bridge uR1'
     turn_extrusion_on()
     Set DO[0]=On
     Wait: 24.0
     Serial Bridge uR0
     Wait: 1.0
     Set DO[0]=Off
     'slice'
     MoveL
       Waypoint_21
       Waypoint_42
       Waypoint_43
       Waypoint_44
       Waypoint_74
     MoveJ
       Waypoint_45
       'above waypoint is home'
     'Home'
   align_tcp_forward
     'this program aligns the tcp parallel to the y direction'
     cp≔get_actual_tcp_pose()
     aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]
     MoveJ
       aligned_y_pose
   align_tcp_up
     'this program aligns the tcp parallel to the y direction'
     cp≔get_actual_tcp_pose()
     aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]
     MoveJ
       aligned_y_pose
   align_ready_for_welding
     'this program takes the welder from home to a position alined ready for welding (vertically down)'
     MoveJ
       oldhome
       Waypoint_34
       Waypoint_35
       Waypoint_36
   Corner_Homing_45
     'Use this program when tool is already positioned close to corner at 45deg'
     'tool flange will seek all 3 sides. will save those 5 locs in p__'
     Set
     'dummy move below for debug'
     'Home'
     'MoveJ'
     Wait: 1.0
     tp≔get_actual_tcp_pose()
     'Script: analyze_touchpoints.script'
     path_pre≔get_corner_homing_45_pathpoints(tp)
     ph1≔path_pre[0]
     ph2≔path_pre[1]
     ph3≔path_pre[2]
     ph4≔path_pre[3]
     ph5≔path_pre[4]
     ph6≔path_pre[5]
     ph7≔path_pre[6]
     ph2up≔path_pre[7]
     ph4up≔path_pre[8]
     MoveL
       ph1
       ph2
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p11≔get_actual_tcp_pose()
     MoveL
       ph2
       ph2up
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p13≔get_actual_tcp_pose()
     MoveL
       ph2up
       ph3
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p12≔get_actual_tcp_pose()
     MoveJ
       ph3
       Waypoint_4
     MoveJ
       Waypoint_5
       'Waypoint_5'
       Waypoint_10
     MoveJ
       ph4
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p21≔get_actual_tcp_pose()
     MoveL
       ph4
       ph4up
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p23≔get_actual_tcp_pose()
     MoveL
       ph4up
       ph5
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p22≔get_actual_tcp_pose()
     MoveJ
       ph5
       ph4
       'Waypoint_5'
       Waypoint_11
       Waypoint_12
       Waypoint_4
       Waypoint_13
       ph6
       ph7
     MoveL
       Direction: Base Z+
         Until (tool_contact_detection)
     p3≔get_actual_tcp_pose()
     MoveJ
       ph7
       ph6
       Waypoint_14
       Waypoint_4
       Waypoint_41
       'above waypoint is home'
     'Home'
     Comment
     Comment
     Comment
     Comment
     Comment
     Comment
   Thread_1
     Loop  True 
       If freedrive_m_var≟ True 
         freedrive_mode()
       Else
         end_freedrive_mode()
       sync()
   'Thread_2'
