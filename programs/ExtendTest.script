def ExtendTest():
  global _hidden_verificationVariable=0
  step_count_89707ab2_e6d4_4103_917a_553fc000fa8e = 0.0
  thread Step_Counter_Thread_580d12a7_4e07_4c4d_b18c_02f7ef3d3082():
    while (True):
      step_count_89707ab2_e6d4_4103_917a_553fc000fa8e = step_count_89707ab2_e6d4_4103_917a_553fc000fa8e + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_580d12a7_4e07_4c4d_b18c_02f7ef3d3082()
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_target_payload(10.450000, [0.000000, -0.064000, 0.064000], [0.076889, 0.076889, 0.076889, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_39_p=p[.397377312153, .356253310648, .319810281486, 2.316317670744, 2.057592854035, .074120023159]
  global Waypoint_39_q=[-3.4579551855670374, -2.0568958721556605, 2.3265963236438196, -0.22706706941638188, -0.19935590425600225, -0.10534030595888311]
  global Waypoint_24_p=p[-.308525559537, .606096497354, .242373144855, -2.133742737559, .349425192770, 2.130939839044]
  global Waypoint_24_q=[-1.8709262053119105, -1.2877716285041352, 2.192875687276022, 0.7510036665150146, 1.5878156423568726, 1.5091480016708374]
  global Waypoint_23_p=p[-.540166575654, .215949141041, .034631452617, -1.505795438113, 1.057579835594, 1.573514753692]
  global Waypoint_23_q=[-0.46167117754091436, -1.1365486842444916, 2.508885685597555, 0.15223841249432368, 1.4952874183654785, 3.819530963897705]
  global start_p=p[-1.441999317110, -.058079469304, .029501503547, -1.644065732930, .854657699103, 1.644028612201]
  global start_q=[0.0985511913895607, -0.44366689146075444, 0.8923304716693323, 1.1213444906422119, 1.5699049234390259, 4.198589324951172]
  global Waypoint_1_p=p[-1.531998861525, -.117968177262, .029479416928, -1.644098109895, .854630904636, 1.643953156066]
  global Waypoint_1_q=[0.1354050189256668, -0.26749976099047856, 0.5084813276873987, 1.3290940958210449, 1.5698165893554688, 4.235526084899902]
  global Waypoint_2_p=p[-1.562007405681, -.137917839333, .029457047746, -1.644073466473, .854646436648, 1.643926406010]
  global Waypoint_2_q=[0.14647459983825684, -0.1647537511638184, 0.2850573698626917, 1.449777289027832, 1.569786548614502, 4.246684551239014]
  global degree1elbow_p=p[-1.575446525917, -.147750944902, .029231255588, -1.644080163888, .854637141729, 1.643786985909]
  global degree1elbow_q=[0.15182402729988098, -0.04588945329699712, 0.026453797017232716, 1.589613361949585, 1.5697581768035889, 4.2521843910217285]
  global afterspin_p=p[-1.580228373918, -.152118726644, .028323819938, -1.645565347086, .856754474834, 1.639869652953]
  global afterspin_q=[0.15357142686843872, 0.5346168714710693, -1.2781199216842651, -0.8243433994105835, -1.5675938765155237, 1.1135544776916504]
  global Waypoint_3_p=p[-1.586992886906, -.155991621591, .028381596889, -1.645545525954, .856793476315, 1.639844275998]
  global Waypoint_3_q=[0.15551483631134033, 0.5276672083088378, -1.261692762374878, -0.8338298958591004, -1.5675752798663538, 1.1155279874801636]
  global Waypoint_4_p=p[-1.599001814727, -.163994067445, .028431086481, -1.645547147573, .856823240537, 1.639887894885]
  global Waypoint_4_q=[0.15967173874378204, 0.514864369029663, -1.231414794921875, -0.8513557475856324, -1.5675433317767542, 1.1196531057357788]
  global Waypoint_5_p=p[-1.629999840828, -.182993952688, .028401954550, -1.645575910966, .856795130765, 1.639848263896]
  global Waypoint_5_q=[0.1689736694097519, 0.4806920725056152, -1.1510276794433594, -0.8975476783565064, -1.5675070921527308, 1.1289137601852417]
  global Waypoint_6_p=p[-1.689997640191, -.222976606917, .028390564972, -1.645575472167, .856804571145, 1.639815854885]
  global Waypoint_6_q=[0.18783612549304962, 0.4051285225101928, -0.9761554002761841, -0.9968836468509217, -1.5674341360675257, 1.1477150917053223]
  global Waypoint_7_p=p[-1.779999448432, -.282990568005, .028440061504, -1.645531245894, .856822499985, 1.639870422772]
  global Waypoint_7_q=[0.21330302953720093, 0.25447361051525874, -0.6357183456420898, -1.1867783528617402, -1.5673673788653772, 1.1730283498764038]
  global flipandlower_p=p[-1.772527739206, -.280495951022, -.088099119835, -1.660646252534, .836960794340, 1.613270672442]
  global flipandlower_q=[0.21329987049102783, -0.2544589799693604, 0.6356475988971155, -1.9198557339110316, -1.5673540274249476, 1.1730265617370605]
  global flipped_p=p[-1.779841540928, -.282887268216, .027589880851, -1.660814787697, .836713806895, 1.612911250396]
  global flipped_q=[0.2137705385684967, -0.3155535024455567, 0.6017687956439417, -1.824503084222311, -1.5674169699298304, 1.173465609550476]
  global flippedexact_p=p[-1.780086620355, -.282746108435, .028051405766, -1.645829852080, .856887043126, 1.639986325690]
  global flippedexact_q=[0.2135878950357437, -0.32602472723040776, 0.6360581556903284, -1.8781091175475062, -1.5672367254840296, 1.172684907913208]
  global Waypoint_8_p=p[-1.580003868160, -.152008636240, .027979657132, -1.645871526718, .856828700335, 1.639961813152]
  global Waypoint_8_q=[0.15438807010650635, -0.619146541958191, 1.278783146535055, -2.2275101147093714, -1.567533318196432, 1.1133872270584106]
  $ 2 "Robot Program"
  $ 3 "Script: robotTestScript.script"
  p_5 = p[-1.4420008419286459, -0.058094127721509764, 0.029525, -1.6440472482117785, 0.8546511027915219, 1.6440472482117785]
  p_4 = p[-1.1727715142479016, 0.1308781295454616, 0.029525, -1.6440472482117785, 0.8546511027915219, 1.6440472482117785]
  $ 4 "p_4≔p_4"
  global p_4=p_4
  $ 5 "p_5≔p_5"
  global p_5=p_5
  $ 6 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
  $ 7 "MoveJ"
  $ 8 "Waypoint_39" "breakAfter"
  movej(get_inverse_kin(Waypoint_39_p, qnear=Waypoint_39_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 9 "Waypoint_24" "breakAfter"
  movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 10 "MoveJ"
  $ 11 "Waypoint_23" "breakAfter"
  movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 12 "MoveJ"
  $ 13 "p_4" "breakAfter"
  movej(p_4, a=1.3962634015954636, v=1.0471975511965976)
  $ 14 "MoveL"
  $ 15 "p_5" "breakAfter"
  movel(p_5, a=1.2, v=0.012)
  $ 16 "MoveJ"
  $ 17 "start" "breakAfter"
  movej(get_inverse_kin(start_p, qnear=start_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 18 "MoveL"
  $ 19 "Waypoint_1" "breakAfter"
  movel(Waypoint_1_p, a=1.2, v=0.25)
  $ 20 "MoveJ"
  $ 21 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 22 "MoveJ"
  $ 23 "degree1elbow" "breakAfter"
  movej(get_inverse_kin(degree1elbow_p, qnear=degree1elbow_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 24 "MoveJ"
  $ 25 "afterspin" "breakAfter"
  movej(get_inverse_kin(afterspin_p, qnear=afterspin_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 26 "MoveJ"
  $ 27 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 28 "MoveJ"
  $ 29 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 30 "MoveJ"
  $ 31 "Waypoint_5" "breakAfter"
  movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 32 "MoveJ"
  $ 33 "Waypoint_6" "breakAfter"
  movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 34 "MoveJ"
  $ 35 "Waypoint_7" "breakAfter"
  movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 36 "MoveJ"
  $ 37 "flipandlower" "breakAfter"
  movej(get_inverse_kin(flipandlower_p, qnear=flipandlower_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 38 "MoveJ"
  $ 39 "flipped" "breakAfter"
  movej(get_inverse_kin(flipped_p, qnear=flipped_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 40 "MoveJ"
  $ 41 "flippedexact" "breakAfter"
  movej(get_inverse_kin(flippedexact_p, qnear=flippedexact_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 42 "MoveJ"
  $ 43 "Waypoint_8" "breakAfter"
  movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
end
