def move_path_2():
  global _hidden_verificationVariable=0
  step_count_bb260f9f_b35d_4fa5_9196_51f97d34692a = 0.0
  thread Step_Counter_Thread_3f57fde8_be87_45f6_b73f_8ef8e3528eee():
    while (True):
      step_count_bb260f9f_b35d_4fa5_9196_51f97d34692a = step_count_bb260f9f_b35d_4fa5_9196_51f97d34692a + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_3f57fde8_be87_45f6_b73f_8ef8e3528eee()
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[0.00855,-0.27152,0.102,1.2092,-1.2092,1.2092])
  set_target_payload(2.760000, [0.004000, -0.022000, 0.072000], [0.008360, 0.008360, 0.008360, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Plane_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  global Waypoint_7_p=p[-.308521933500, .606102555456, .242386727248, 1.369889596718, 1.066911649623, -1.257196952797]
  global Waypoint_7_q=[-1.4778149763690394, -0.9869437378695984, 1.6503542105304163, 0.917081280345581, 1.657557487487793, 0.25378724932670593]
  while (True):
    $ 2 "Robot Program"
    $ 3 "pa1≔path1[1]"
    global pa1=path1[1]
    $ 4 "pa2≔path1[2]"
    global pa2=path1[2]
    $ 5 "p1≔path1[3]"
    global p1=path1[3]
    $ 6 "p2≔path1[4]"
    global p2=path1[4]
    $ 7 "p3≔path1[5]"
    global p3=path1[5]
    $ 8 "p4≔path1[6]"
    global p4=path1[6]
    $ 9 "p5≔path1[7]"
    global p5=path1[7]
    $ 10 "pr1≔path1[8]"
    global pr1=path1[8]
    $ 11 "pvr1≔path1[12]"
    global pvr1=path1[12]
    $ 12 "pvr2≔path1[13]"
    global pvr2=path1[13]
    $ 13 "MoveJ"
    $ 15 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 16 "MoveJ"
    $ 17 "pa1" "breakAfter"
    movej(pa1, a=1.3962634015954636, v=1.0471975511965976)
    $ 18 "MoveL"
    $ 19 "pa2" "breakAfter"
    movel(pa2, a=1.2, v=0.2)
    $ 20 "MoveL"
    $ 21 "p1" "breakAfter"
    movel(p1, a=1.2, v=0.05)
    $ 22 "Wait: 1.0"
    sleep(1.0)
    $ 23 "MoveL"
    $ 24 "p2" "breakAfter"
    movel(p2, a=1.2, v=0.012)
    $ 25 "MoveP"
    $ 26 "CircleMove"
    $ 27 "p3" "noBreak"
    $ 28 "p4" "breakAfter"
    movec(p3, p4, a=0.5, v=5.0E-4, r=0.0, mode=1)
    $ 29 "MoveL"
    $ 30 "p5" "breakAfter"
    movel(p5, a=1.2, v=0.012)
    $ 31 "MoveL"
    $ 32 "pr1" "breakAfter"
    movel(pr1, a=1.2, v=0.25)
    $ 35 "MoveL"
    $ 36 "pvr1" "breakAfter"
    movel(pvr1, a=1.2, v=0.25)
  end
end
