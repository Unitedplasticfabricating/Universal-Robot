def move_path_3left():
  global _hidden_verificationVariable=0
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(8.250000, [-0.001000, -0.057000, 0.067000], [0.051851, 0.051851, 0.051851, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[-0.00438,-0.33062,0.10207,1.2092,-1.2092,1.2092])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_f2dca8d4_e9b7_4ae9_a9ba_3bca4ccf36aa = 0.0
  thread Step_Counter_Thread_5d40c233_133a_49de_aee1_984224015817():
    while (True):
      step_count_f2dca8d4_e9b7_4ae9_a9ba_3bca4ccf36aa = step_count_f2dca8d4_e9b7_4ae9_a9ba_3bca4ccf36aa + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_5d40c233_133a_49de_aee1_984224015817()
  global Waypoint_13_p=p[-.157621040248, .513353603496, .815677694745, -.672699538592, -1.852318447516, -.055422773001]
  global Waypoint_13_q=[-2.770456854497091, -1.8207680187621058, 2.3065691629992884, 1.0170823770710449, -1.0767205397235315, -0.8071182409869593]
  global Waypoint_1_p=p[-.161036555831, .970524399959, .722042384791, -.554954311189, .106465018540, .328580879483]
  global Waypoint_1_q=[-1.3071630636798304, -1.3366777312806626, 2.2083633581744593, 3.7187773424335937, -2.9519384543048304, 0.9132363796234131]
  global Waypoint_7_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_7_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_4_p=p[-.568724745609, .230601805298, .220208295176, -1.519097711196, -.535155391172, .573964121010]
  global Waypoint_4_q=[-0.04883271852602178, -1.2753942471793671, 2.4771457354175013, 5.041022258787908, -2.326899592076437, 1.532160997390747]
  global Waypoint_6_p=p[-.853851193668, .133266829906, .060418082908, -.274178222953, -2.359710051999, .046821166283]
  global Waypoint_6_q=[-0.608560864125387, -1.0122360748103638, 2.787060801182882, 3.7283646303364257, -4.940747324620382, 0.3777344226837158]
  global Waypoint_5_p=p[-.979398188272, -.259625449453, .211289397035, -.673010443572, -1.459355862765, -.640164958946]
  global Waypoint_5_q=[0.36968713998794556, -0.5732358259013672, 2.138303581868307, 3.1253925996967773, -4.70385724702944, -1.2100523153888147]
  global Waypoint_12_p=p[-.826865752305, .369357632284, .043113676955, .574997346548, -1.492225541214, .597128135378]
  global Waypoint_12_q=[-1.0355513731585901, -0.33930082738909917, 2.126244846974508, 2.9386045175739746, -4.711197797452108, 1.7860286235809326]
  global Waypoint_16_p=p[.191112811238, .567512170908, .815514010937, -.135771161622, .396053809900, .208825693369]
  global Waypoint_16_q=[-1.6536315123187464, -1.762029310266012, 2.6225650946246546, 3.2891055780598144, -2.6549678484546106, 0.8520665764808655]
  global Waypoint_17_p=p[-.254565633623, .502963426820, 1.135401557820, -.261910507478, -.749716086887, 1.349041636154]
  global Waypoint_17_q=[-2.035229508076803, -1.8928028545775355, 2.468372408543722, 2.19391576826062, -1.167032543812887, -0.5091407934771937]
  global Waypoint_18_p=p[-.009208376822, .593717720951, .505810027228, -1.424406033077, -2.344120510145, -.527630245278]
  global Waypoint_18_q=[-2.9172328154193323, -1.9945279560484828, 2.3804522196399134, 0.6930715280720214, -0.5671199003802698, -1.1566088835345667]
  while (True):
    $ 2 "Robot Program"
    $ 3 "'this is the path for Down, Over, then Back Around'"
    # 'this is the path for Down, Over, then Back Around'
    $ 4 "Comment"
    # Comment
    $ 5 "Home"
    movej([-3.4579734502641006, -2.05691362454537, 2.326567589830591, -0.22707360390354125, -0.19934432301767302, -0.10534790278823536], a=1.3962634015954636, v=1.0471975511965976)
    $ 6 "MoveJ"
    $ 7 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 10 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 15 "Comment"
    # Comment
    $ 16 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 17 "p2≔pathturn[1]"
    global p2=pathturn[1]
    $ 18 "p4≔pathturn[2]"
    global p4=pathturn[2]
    $ 19 "p5≔pathturn[3]"
    global p5=pathturn[3]
    $ 20 "pa1≔p[p1[0]+0.05,p1[1]-0.05,p1[2],p1[3],p1[4],p1[5]]"
    global pa1=p[p1[0]+0.05,p1[1]-0.05,p1[2],p1[3],p1[4],p1[5]]
    $ 21 "MoveJ"
    $ 22 "pa1" "breakAfter"
    movej(pa1, a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "p1" "breakAfter"
    movej(p1, a=1.3962634015954636, v=1.0471975511965976)
    $ 24 "Wait: 8.0"
    sleep(8.0)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 25 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 26 "Wait: 1.0"
    sleep(1.0)
    $ 27 "MoveL"
    $ 28 "p2" "breakAfter"
    movel(p2, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 29 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 30 "Wait: 0.5"
    sleep(0.5)
    $ 31 "MoveL"
    $ 32 "p4" "breakAfter"
    movel(p4, a=0.01, v=0.12)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 33 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 34 "Wait: 1.0"
    sleep(1.0)
    $ 35 "MoveL"
    $ 36 "p5" "breakAfter"
    movel(p5, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 37 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 38 "Wait: 2.0"
    sleep(2.0)
    $ 39 "Comment"
    # Comment
    $ 40 "pret1≔p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]"
    global pret1=p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]
    $ 41 "p_1≔pathturn[4]"
    global p_1=pathturn[4]
    $ 42 "p_2≔pathturn[5]"
    global p_2=pathturn[5]
    $ 43 "p_3≔pathturn[6]"
    global p_3=pathturn[6]
    $ 44 "p_4≔pathturn[7]"
    global p_4=pathturn[7]
    $ 45 "p_5≔pathturn[8]"
    global p_5=pathturn[8]
    $ 46 "p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_preheat=p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 47 "p_pre_ret≔p[p_1[0]+.03,p_1[1]-.03,p_1[2],p_1[3],p_1[4],p_1[5]]"
    global p_pre_ret=p[p_1[0]+.03,p_1[1]-.03,p_1[2],p_1[3],p_1[4],p_1[5]]
    $ 48 "p_pre_ret2≔p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_pre_ret2=p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 49 "MoveJ"
    $ 50 "pret1" "breakAfter"
    movej(pret1, a=1.3962634015954636, v=1.3962634015954636)
    $ 51 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 52 "'now go into the ccw weld position'"
    # 'now go into the ccw weld position'
    $ 53 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 54 "Comment"
    # Comment
    $ 55 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 56 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 65 "MoveJ"
    $ 66 "p_pre_ret" "breakAfter"
    movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
    $ 67 "p_pre_ret2" "breakAfter"
    movej(p_pre_ret2, a=1.3962634015954636, v=1.0471975511965976)
    $ 68 "p_preheat" "breakAfter"
    movej(p_preheat, a=1.3962634015954636, v=1.0471975511965976)
    $ 69 "Wait: 8.0"
    sleep(8.0)
    $ 70 "MoveJ"
    $ 71 "p_pre_ret2" "breakAfter"
    movej(p_pre_ret2, a=1.3962634015954636, v=1.0471975511965976)
    $ 72 "p_pre_ret" "breakAfter"
    movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
    $ 73 "Set"
    set_tcp(p[0.00662,-0.33062,0.10207,1.2092,-1.2092,1.2092])
    $ 74 "MoveL"
    $ 75 "p_1" "breakAfter"
    movel(p_1, a=1.2, v=0.05)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 76 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 77 "Wait: 1.0"
    sleep(1.0)
    $ 78 "MoveL"
    $ 79 "p_2" "breakAfter"
    movel(p_2, a=1.2, v=0.01)
    $ 80 "MoveP"
    $ 81 "CircleMove"
    $ 82 "p_3" "noBreak"
    $ 83 "p_4" "breakAfter"
    movec(p_3, p_4, a=0.01, v=5.0E-4, r=0.0, mode=1)
    $ 84 "MoveL"
    $ 85 "p_5" "breakAfter"
    movel(p_5, a=1.2, v=0.012)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 86 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 87 "Wait: 2.0"
    sleep(2.0)
    $ 92 "MoveJ"
    $ 93 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 94 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 95 "Comment"
    # Comment
    $ 96 "MoveJ"
    $ 97 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 98 "Waypoint_17" "breakAfter"
    movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 99 "Waypoint_18" "breakAfter"
    movej(get_inverse_kin(Waypoint_18_p, qnear=Waypoint_18_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 102 "Comment"
    # Comment
    $ 103 "Comment"
    # Comment
    $ 104 "Comment"
    # Comment
    $ 105 "Comment"
    # Comment
    $ 106 "Comment"
    # Comment
    $ 107 "Comment"
    # Comment
    $ 108 "Home"
    movej([-3.4579734502641006, -2.05691362454537, 2.326567589830591, -0.22707360390354125, -0.19934432301767302, -0.10534790278823536], a=1.3962634015954636, v=1.0471975511965976)
  end
end
