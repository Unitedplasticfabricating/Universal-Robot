def move_path_cover_right3():
  global _hidden_verificationVariable=0
  step_count_50ce2b83_a1b6_427f_a0a4_7e1cab84c5b8 = 0.0
  thread Step_Counter_Thread_0e5d4146_0ae0_40da_842a_564d3a17cd5d():
    while (True):
      step_count_50ce2b83_a1b6_427f_a0a4_7e1cab84c5b8 = step_count_50ce2b83_a1b6_427f_a0a4_7e1cab84c5b8 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_0e5d4146_0ae0_40da_842a_564d3a17cd5d()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_5_p=p[-.580457188401, .198657168739, .216367975891, 1.542583098507, -2.711896627513, -.005443606294]
  global Waypoint_5_q=[-1.1084698903771084, -1.6120482505177893, 2.1904850640545614, -0.5440229802855612, -0.5713420496459127, -0.0431436282365123]
  $ 2 "Robot Program"
  $ 3 "Comment"
  # Comment
  $ 4 "align_for_cover_right()"
  align_for_cover_right()
  $ 5 "Set"
  set_tcp(p[0.00451,-0.328,0.10573,1.2092,-1.2092,1.2092])
  $ 6 "Comment"
  # Comment
  $ 7 "p1≔pathturn[0]"
  global p1=pathturn[0]
  $ 8 "p2≔pathturn[1]"
  global p2=pathturn[1]
  $ 9 "p3≔pathturn[2]"
  global p3=pathturn[2]
  $ 10 "p4≔pathturn[3]"
  global p4=pathturn[3]
  $ 11 "p5≔pathturn[4]"
  global p5=pathturn[4]
  $ 12 "pa1≔p[p1[0],p1[1],p1[2]+0.05,p1[3],p1[4],p1[5]]"
  global pa1=p[p1[0],p1[1],p1[2]+0.05,p1[3],p1[4],p1[5]]
  $ 13 "p4a≔p[p4[0],p4[1],p4[2]-0.003,p4[3],p4[4],p4[5]]"
  global p4a=p[p4[0],p4[1],p4[2]-0.003,p4[3],p4[4],p4[5]]
  $ 14 "p2a≔pathturn[10]"
  global p2a=pathturn[10]
  $ 15 "MoveJ"
  $ 16 "pa1" "breakAfter"
  movej(pa1, a=1.3962634015954636, v=1.0471975511965976)
  $ 17 "MoveL"
  $ 18 "p1" "breakAfter"
  movel(p1, a=0.05, v=0.05)
  $ 19 "Wait: 8.0"
  sleep(8.0)
  $ 20 "turn ext on"
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 21 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 22 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 23 "Wait: 1.0"
  sleep(1.0)
  $ 25 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 26 "MoveL"
  $ 27 "p2a" "breakAfter"
  movel(p2a, a=0.1, v=0.01)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 28 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 29 "MoveL"
  $ 30 "p2" "breakAfter"
  movel(p2, a=0.1, v=0.01)
  $ 31 "MoveP"
  $ 32 "CircleMove"
  $ 33 "p3" "noBreak"
  
  $ 34 "p4" "breakAfter"
  movec(p3, p4, a=0.01, v=5.0E-4, r=0.0, mode=1)
  $ 35 "MoveL"
  $ 36 "p4a" "breakAfter"
  movel(p4a, a=0.1, v=0.01)
  $ 37 "Wait: 4.0"
  sleep(4.0)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 38 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 39 "Wait: 1.0"
  sleep(1.0)
  $ 40 "MoveL"
  $ 41 "p5" "breakAfter"
  movel(p5, a=0.05, v=0.01)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 42 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 43 "Wait: 2.0"
  sleep(2.0)
  $ 44 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 45 "Comment"
  # Comment
  $ 46 "pret1≔p[p5[0]+0.05,p5[1],p5[2],p5[3],p5[4],p5[5]]"
  global pret1=p[p5[0]+0.05,p5[1],p5[2],p5[3],p5[4],p5[5]]
  $ 47 "pret2≔p[p5[0]+0.1,p5[1],p5[2]+0.2,p5[3],p5[4],p5[5]]"
  global pret2=p[p5[0]+0.1,p5[1],p5[2]+0.2,p5[3],p5[4],p5[5]]
  $ 54 "p201≔pathturn[5]"
  global p201=pathturn[5]
  $ 55 "p202≔pathturn[6]"
  global p202=pathturn[6]
  $ 56 "p201a≔pathturn[7]"
  global p201a=pathturn[7]
  $ 57 "p201b≔pathturn[8]"
  global p201b=pathturn[8]
  $ 58 "p201c≔pathturn[9]"
  global p201c=pathturn[9]
  $ 59 "pret3≔p[p201[0],p201[1],p201[2]+0.05,p201[3],p201[4],p201[5]]"
  global pret3=p[p201[0],p201[1],p201[2]+0.05,p201[3],p201[4],p201[5]]
  $ 60 "pret4≔p[p202[0],p202[1],p202[2]+0.05,p202[3],p202[4],p202[5]]"
  global pret4=p[p202[0],p202[1],p202[2]+0.05,p202[3],p202[4],p202[5]]
  $ 64 "Set"
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  $ 65 "MoveL"
  $ 66 "pret1" "breakAfter"
  movel(pret1, a=0.05, v=0.05)
  $ 67 "MoveJ"
  $ 68 "pret2" "breakAfter"
  movej(pret2, a=1.3962634015954636, v=1.0471975511965976)
  $ 82 "MoveJ"
  $ 83 "pret3" "breakAfter"
  movej(pret3, a=1.3962634015954636, v=1.0471975511965976)
  $ 84 "MoveL"
  $ 85 "p201a" "breakAfter"
  movel(p201a, a=0.05, v=0.05)
  $ 86 "Wait: 6.0"
  sleep(6.0)
  $ 87 "MoveL"
  $ 88 "p201b" "breakAfter"
  movel(p201b, a=0.05, v=0.05)
  $ 89 "p201c" "breakAfter"
  movel(p201c, a=0.05, v=0.05)
  $ 90 "turn ext on"
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 91 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 92 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 93 "Wait: 1.0"
  sleep(1.0)
  $ 95 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 96 "MoveL"
  $ 97 "p202" "breakAfter"
  movel(p202, a=0.1, v=0.012)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 98 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 99 "Wait: 2.0"
  sleep(2.0)
  $ 100 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 101 "MoveJ"
  $ 102 "pret4" "breakAfter"
  movej(pret4, a=1.3962634015954636, v=1.0471975511965976)
  $ 103 "MoveJ"
  $ 104 "Waypoint_5" "breakAfter"
  movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 105 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
  # begin: URCap Program Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  $ 106 "MachineLogic Homing"
  while isVentionMovementBusyMachineMotion1==True:
  sleep(0.05)
  end
  if(isVentionMovementBusyMachineMotion1 == False):
  isVentionMovementBusyMachineMotion1 = True
  socket_send_string("estop/status;", "MachineMotion1")
  temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
  while(temp_estop_var_vention=="estop/status true"):
  if temp_estop_var_vention=="estop/status true":
  sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
  end
  socket_send_string("estop/status;", "MachineMotion1")
  temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
  if temp_estop_var_vention=="estop/status true":
  popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
  end
  end
  else:
  popup("resource is being used already: MachineMotion1")
  halt
  end
  isVentionMovementBusyMachineMotion1 = True
  sendString("im_home_axis_1", "MachineMotion im_home_axis_1 = completed", "MachineMotion1")
  isVentionMovementBusyMachineMotion1 = False
  sendString("SET im_set_encoder_pos_aux_1 0.000", "Ack", "MachineMotion1")
  isVentionMovementBusyMachineMotion1 = False
  sleep(0.03)
  # end: URCap Program Node
end
