def Main_Program():
  global _hidden_verificationVariable=0
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(10.450000, [0.000000, -0.064000, 0.064000], [0.076889, 0.076889, 0.076889, 0.000000, 0.000000, 0.000000])
  set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
  set_safety_mode_transition_hardness(1)
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_e0af1e0e_2d99_4b94_af88_d4fd9b0295d2 = 0.0
  thread Step_Counter_Thread_44ea01d2_b1ff_4cbc_87c6_cbe07699712e():
    while (True):
      step_count_e0af1e0e_2d99_4b94_af88_d4fd9b0295d2 = step_count_e0af1e0e_2d99_4b94_af88_d4fd9b0295d2 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_44ea01d2_b1ff_4cbc_87c6_cbe07699712e()
  global freedrive_m_var=  False  
  global thread2trigger=  False  
  global Waypoint_47_p=p[.894110788705, .351078070639, .354441232572, 2.326362155719, 2.052509368646, .057355656444]
  global Waypoint_47_q=[-3.266942326222555, -1.1744836431792756, 1.6532800833331507, 1.0039457517811279, -0.0024531523333948257, -1.5362089315997522]
  global Waypoint_50_p=p[-.568711442653, .230601791901, .220208834751, -1.519093932087, -.535128035721, .573965472012]
  global Waypoint_50_q=[-0.021522347127095998, -1.2794721287539979, 2.4323821703540247, 5.090870934515753, -2.2996109167682093, 1.533644199371338]
  global Waypoint_51_p=p[-.689649894186, .139001107022, .230693120258, -.852023156701, -1.645963115617, 1.645984943001]
  global Waypoint_51_q=[-1.1454814116107386, -1.5427037247321387, 2.8454700152026575, 4.979047852545538, -4.902958456669943, 1.5718834400177002]
  global Waypoint_52_p=p[-.160992057407, .970528182050, .722037363514, -.554955923310, .106486629259, .328544950173]
  global Waypoint_52_q=[-1.2978580633746546, -1.3217003357461472, 2.2583277861224573, 3.7025129038044433, -2.952825371419088, 0.9627944231033325]
  global Waypoint_53_p=p[-.157624488365, .513351401913, .815670293526, -.672704566373, -1.852329693545, -.055423312366]
  global Waypoint_53_q=[-2.7676661650287073, -1.8206430874266566, 2.312763277684347, 1.0122546392628173, -1.0765226523028772, -0.8102834860431116]
  global Waypoint_54_p=p[-.308528116178, .606080777007, .242371251996, -2.133736658076, .349438277129, 2.130953356703]
  global Waypoint_54_q=[-1.9617512861834925, -1.2994225782207032, 2.207935158406393, 0.745708628291748, 1.5955500602722168, 1.41863214969635]
  global Waypoint_65_p=p[-.850299549699, -.229060500451, .580194265918, -.066683564301, -1.566406749139, -.045536147896]
  global Waypoint_65_q=[0.11527767777442932, -1.206728772526123, 2.660132948552267, 3.2525827127644042, -4.69939905801882, -0.18521625200380498]
  global Waypoint_55_p=p[-.850295942693, .369353811615, .580190947871, -.066690142153, -1.566409865149, -.045506050424]
  global Waypoint_55_q=[-0.89636737505068, -1.198587493305542, 2.6061368624316614, 3.3119169908710937, -4.700617257748739, 0.826545238494873]
  global Waypoint_59_p=p[-.689650832419, .138973473550, .230700469426, -.851985360280, -1.645991124348, 1.645990580233]
  global Waypoint_59_q=[-1.1454528013812464, -1.5427289356342335, 2.8454795519458216, 4.979044186859884, -4.902960960065023, 1.5718833208084106]
  global Waypoint_58_p=p[.191120239889, .567518478899, .815512910186, -.135765364935, .396070873472, .208834263225]
  global Waypoint_58_q=[-1.651280705128805, -1.7712346516051234, 2.617981735860006, 3.3066598612019042, -2.656208101903097, 0.8563313484191895]
  global Waypoint_56_p=p[-.254568281661, .502958752129, 1.135400507516, -.261908057482, -.749714619963, 1.349050618455]
  global Waypoint_56_q=[-2.0344861189471644, -1.9012485943236292, 2.469647232686178, 2.2012061315723876, -1.1677187124835413, -0.5094392935382288]
  global Waypoint_57_p=p[-.009221327687, .593713365169, .505808930157, -1.424394189587, -2.344106819810, -.527597949261]
  global Waypoint_57_q=[-2.920837704335348, -1.9932075939574183, 2.3856611887561243, 0.6815890508839111, -0.5688460508929651, -1.1506975332843226]
  global Waypoint_67_p=p[-.339169194335, .114271165560, .051007401747, -.434162127311, 1.872717119498, -1.885153895998]
  global Waypoint_67_q=[-1.410516087208883, -0.9778240484050293, 2.47756010690798, -1.72361483196401, -0.3956816832171839, 1.808600902557373]
  global Waypoint_69_p=p[-.760826542313, -.049762698068, .082649581767, -1.026233921905, -1.612699318499, 1.547123897415]
  global Waypoint_69_q=[-0.22154647508730108, -1.118469015961029, 2.7561236063586634, -1.5568565337783475, -3.851987902318136, 1.559481143951416]
  global Waypoint_70_p=p[-.154414768496, .636923137577, .016979120256, -.302753655748, 1.486961848367, .122240024639]
  global Waypoint_70_q=[-1.1281922499286097, -1.0678585332683106, 2.4290812651263636, -2.7994214497008265, -1.6034835020648401, 1.7401196956634521]
  global Waypoint_49_p=p[.397354147848, .356263001249, .319808682466, 2.316306590727, 2.057646408591, .074101958728]
  global Waypoint_49_q=[-3.4579480330096644, -2.0568953953185023, 2.3266006151782435, -0.2270372670939942, -0.1993797461139124, -0.10534602800478154]
  global Waypoint_48_p=p[.894089819959, .351089510856, .354452935433, 2.326359030986, 2.052526986878, .057346871716]
  global Waypoint_48_q=[-3.266932551060812, -1.1745034915259858, 1.653294865285055, 1.0039614874073486, -0.002454582844869435, -1.5362089315997522]
  global Waypoint_46_p=p[.894107867742, .351078231601, .354456446052, 2.326366960603, 2.052510258679, .057358671808]
  global Waypoint_46_q=[-3.266944233571188, -1.1744955343059083, 1.6532734076129358, 1.003952904338501, -0.002457443867818654, -1.5361955801593226]
  global Waypoint_8_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_8_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_22_p=p[-.308534453517, .606084664264, .242393158856, 1.369873371142, 1.066881263643, -1.257197506198]
  global Waypoint_22_q=[-1.4685500303851526, -0.9664557737163086, 1.6195090452777308, 0.9282776552387695, 1.6574476957321167, 0.2630845010280609]
  global Waypoint_23_p=p[-.540166575654, .215949141041, .034631452617, -1.505795438113, 1.057579835594, 1.573514753692]
  global Waypoint_23_q=[-0.46167117754091436, -1.1365486842444916, 2.508885685597555, 0.15223841249432368, 1.4952874183654785, 3.819530963897705]
  global Waypoint_24_p=p[-.308525559537, .606096497354, .242373144855, -2.133742737559, .349425192770, 2.130939839044]
  global Waypoint_24_q=[-1.8709262053119105, -1.2877716285041352, 2.192875687276022, 0.7510036665150146, 1.5878156423568726, 1.5091480016708374]
  global Waypoint_39_p=p[.397377312153, .356253310648, .319810281486, 2.316317670744, 2.057592854035, .074120023159]
  global Waypoint_39_q=[-3.4579551855670374, -2.0568958721556605, 2.3265963236438196, -0.22706706941638188, -0.19935590425600225, -0.10534030595888311]
  global Waypoint_37_p=p[.397366630181, .356258644196, .319813668943, 2.316299214281, 2.057614642521, .074125657910]
  global Waypoint_37_q=[-3.4579508940326136, -2.056904455224508, 2.3265963236438196, -0.2270481151393433, -0.19937020937074834, -0.10535222688783819]
  global Waypoint_15_p=p[-.157621040248, .513353603496, .815677694745, -.672699538592, -1.852318447516, -.055422773001]
  global Waypoint_15_q=[-2.770456854497091, -1.8207680187621058, 2.3065691629992884, 1.0170823770710449, -1.0767205397235315, -0.8071182409869593]
  global Waypoint_25_p=p[-.161036555831, .970524399959, .722042384791, -.554954311189, .106465018540, .328580879483]
  global Waypoint_25_q=[-1.3071630636798304, -1.3366777312806626, 2.2083633581744593, 3.7187773424335937, -2.9519384543048304, 0.9132363796234131]
  global Waypoint_26_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_26_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_27_p=p[-.568724745609, .230601805298, .220208295176, -1.519097711196, -.535155391172, .573964121010]
  global Waypoint_27_q=[-0.04883271852602178, -1.2753942471793671, 2.4771457354175013, 5.041022258787908, -2.326899592076437, 1.532160997390747]
  global Waypoint_28_p=p[-.568724745609, .230601805298, .220208295176, -1.519097711196, -.535155391172, .573964121010]
  global Waypoint_28_q=[-0.04883271852602178, -1.2753942471793671, 2.4771457354175013, 5.041022258787908, -2.326899592076437, 1.532160997390747]
  global Waypoint_29_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_29_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_30_p=p[-.853851193668, .133266829906, .060418082908, -.274178222953, -2.359710051999, .046821166283]
  global Waypoint_30_q=[-0.608560864125387, -1.0122360748103638, 2.787060801182882, 3.7283646303364257, -4.940747324620382, 0.3777344226837158]
  global Waypoint_31_p=p[-.979398188272, -.259625449453, .211289397035, -.673010443572, -1.459355862765, -.640164958946]
  global Waypoint_31_q=[0.36968713998794556, -0.5732358259013672, 2.138303581868307, 3.1253925996967773, -4.70385724702944, -1.2100523153888147]
  global Waypoint_32_p=p[-.826865752305, .369357632284, .043113676955, .574997346548, -1.492225541214, .597128135378]
  global Waypoint_32_q=[-1.0355513731585901, -0.33930082738909917, 2.126244846974508, 2.9386045175739746, -4.711197797452108, 1.7860286235809326]
  global Waypoint_33_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_33_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_16_p=p[.191112811238, .567512170908, .815514010937, -.135771161622, .396053809900, .208825693369]
  global Waypoint_16_q=[-1.6536315123187464, -1.762029310266012, 2.6225650946246546, 3.2891055780598144, -2.6549678484546106, 0.8520665764808655]
  global Waypoint_17_p=p[-.254565633623, .502963426820, 1.135401557820, -.261910507478, -.749716086887, 1.349041636154]
  global Waypoint_17_q=[-2.035229508076803, -1.8928028545775355, 2.468372408543722, 2.19391576826062, -1.167032543812887, -0.5091407934771937]
  global Waypoint_18_p=p[-.009208376822, .593717720951, .505810027228, -1.424406033077, -2.344120510145, -.527630245278]
  global Waypoint_18_q=[-2.9172328154193323, -1.9945279560484828, 2.3804522196399134, 0.6930715280720214, -0.5671199003802698, -1.1566088835345667]
  global Waypoint_38_p=p[.397379749540, .356252016937, .319817140705, 2.316310534508, 2.057580214841, .074134378577]
  global Waypoint_38_q=[-3.457958761845724, -2.0569073162474574, 2.3265913168536585, -0.22705944002185063, -0.19935638109316045, -0.10534793535341436]
  global Waypoint_40_p=p[.360688403366, .270119715397, .646144746546, .057805349154, 2.125995180379, 2.134053153683]
  global Waypoint_40_q=[-3.4579489866839808, -2.0569035015501917, 2.3265796343432825, -0.22706706941638188, -0.1993501822101038, -0.10534793535341436]
  global Waypoint_2_p=p[-.548957282596, .386284559177, .143710178207, 1.570800598292, -.000025190822, .000004803470]
  global Waypoint_2_q=[-1.0516188780414026, -1.010990933781006, 2.1562450567828577, -1.143702046280243, -1.0526168982135218, -0.0017235914813440445]
  global Waypoint_20_p=p[.397380247322, .356253634699, .319820846021, 2.316316320871, 2.057594704604, .074118471609]
  global Waypoint_20_q=[-3.457949940358297, -2.056894441644186, 2.32658034959902, -0.2270551484874268, -0.19935208955873662, -0.10533696809877569]
  global Waypoint_3_p=p[.454852104155, .405448828659, .064015413765, 2.316807606413, 2.051392071696, .076664825947]
  global Waypoint_3_q=[-3.274653975163595, -1.5604325172356148, 2.467809502278463, -0.34438879907641606, -0.014281574879781544, -0.6303489843951624]
  global Waypoint_21_p=p[.439080613327, .405451327202, .061343367777, 2.316821026391, 2.051408078617, .076639537657]
  global Waypoint_21_q=[-3.2805586496936243, -1.6217113933958949, 2.5062666575061243, -0.4847274583629151, -0.019731823598043263, -0.467142407094137]
  global Waypoint_42_p=p[.430139206229, .405442865710, .064313039550, 2.316835244447, 2.051367743016, .076649924073]
  global Waypoint_42_q=[-3.284172598515646, -1.655306955377096, 2.5217352549182337, -0.5282495778850098, -0.02314788499941045, -0.4054973761187952]
  global Waypoint_43_p=p[.430152545350, .405437911340, .066013265307, 2.316844314970, 2.051349610740, .076650144188]
  global Waypoint_43_q=[-3.2841761747943323, -1.6579028568663539, 2.5203173796283167, -0.5243228238872071, -0.023137394581929982, -0.4054144064532679]
  global Waypoint_44_p=p[.412417603701, .405437232275, .065226644408, 2.316830409933, 2.051326957505, .076672130031]
  global Waypoint_44_q=[-3.291912857686178, -1.705691476861471, 2.551997963582174, -0.5933647912791749, -0.0306323210345667, -0.32026607195009404]
  global Waypoint_45_p=p[.397380247322, .356253634699, .319820846021, 2.316316320871, 2.057594704604, .074118471609]
  global Waypoint_45_q=[-3.457949940358297, -2.056894441644186, 2.32658034959902, -0.2270551484874268, -0.19935208955873662, -0.10533696809877569]
  global oldhome_p=p[.397683836105, .356251384911, .315246899233, 2.316304177919, 2.057561756051, .074146544723]
  global oldhome_q=[-3.457960907612936, -2.0569125614561976, 2.326589886342184, -0.22707636774096684, -0.19935208955873662, -0.10534269014467412]
  global Waypoint_34_p=p[.695155464390, .367451880816, .502522491683, 2.093108370749, 1.857548644474, .308841595089]
  global Waypoint_34_q=[-3.249415699635641, -1.9387923679747523, 2.3226097265826624, 3.981850786800049, -0.05697328249086553, 1.5286790132522583]
  global Waypoint_35_p=p[.687527620967, .415165960724, .537921070000, 2.127101811831, 1.929915403723, .470130777221]
  global Waypoint_35_q=[-3.249424997960226, -1.9387947521605433, 2.32263428369631, 3.9818588930317382, -6.198007937763826, 1.5286580324172974]
  global Waypoint_36_p=p[-.693756081485, .141369193308, .218584735520, -.851978179689, -1.646001533937, 1.646008371360]
  global Waypoint_36_q=[-1.1533568541156214, -1.4924076360515137, 2.8518698851214808, 4.922323781042852, -4.910887185727255, 1.5719373226165771]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_4_p=p[-.658264763546, .299530128456, .030909835036, .426821001551, -1.621505068649, .437070885767]
  global Waypoint_4_q=[-1.350241486226217, -0.9702387017062684, 2.492185179387228, -1.7834822140135707, -0.33723670641054326, 1.8489984273910522]
  global Waypoint_5_p=p[-.448862677341, .524599667441, -.175967040878, 2.473330473302, -1.874382924863, .205319206046]
  global Waypoint_5_q=[-1.1354392210589808, -1.0039964479259034, 2.441021744404928, -2.875528474847311, -1.6043828169452112, 1.7329596281051636]
  global Waypoint_10_p=p[-.559130451394, .259233925829, .102445980692, -.822649281727, -1.486064670292, -.881476138414]
  global Waypoint_10_q=[-0.556256119404928, -1.0744255942157288, 2.9114087263690394, -1.7763501606383265, -4.185837809239523, 1.5288889408111572]
  global Waypoint_11_p=p[-.559130451394, .259233925829, .102445980692, -.822649281727, -1.486064670292, -.881476138414]
  global Waypoint_11_q=[-0.556256119404928, -1.0744255942157288, 2.9114087263690394, -1.7763501606383265, -4.185837809239523, 1.5288889408111572]
  global Waypoint_12_p=p[-.448862677341, .524599667441, -.175967040878, 2.473330473302, -1.874382924863, .205319206046]
  global Waypoint_12_q=[-1.1354392210589808, -1.0039964479259034, 2.441021744404928, -2.875528474847311, -1.6043828169452112, 1.7329596281051636]
  global Waypoint_13_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_13_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  global Waypoint_14_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_14_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  global Waypoint_41_p=p[.392127936214, .533269017847, .644148583936, .057822570580, 2.125982462550, 2.134033989912]
  global Waypoint_41_q=[-3.4579578081714075, -2.0569120846190394, 2.3265841642962855, -0.22706885755572515, -0.1993349234210413, -0.10534984270204717]
  def move_path_3right():
    $ 112 "move_path_3right" "noBreak"
    $ 113 "'this is the path for Down, Over, then Back Around'"
    # 'this is the path for Down, Over, then Back Around'
    $ 114 "Comment"
    # Comment
    $ 123 "align_ready_for_welding()"
    align_ready_for_welding()
    $ 124 "Comment"
    # Comment
    $ 125 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 126 "p2≔pathturn[1]"
    global p2=pathturn[1]
    $ 127 "p4≔pathturn[2]"
    global p4=pathturn[2]
    $ 128 "p5≔pathturn[3]"
    global p5=pathturn[3]
    $ 129 "MoveJ"
    $ 130 "p1" "breakAfter"
    movej(p1, a=1.3962634015954636, v=1.0471975511965976)
    $ 131 "Wait: 8.0"
    sleep(8.0)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 132 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 133 "Wait: 1.0"
    sleep(1.0)
    $ 134 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 135 "MoveL"
    $ 136 "p2" "breakAfter"
    movel(p2, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 137 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 138 "Wait: 0.5"
    sleep(0.5)
    $ 139 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 141 "MoveL"
    $ 142 "p4" "breakAfter"
    movel(p4, a=0.01, v=0.12)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 143 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 144 "Wait: 1.0"
    sleep(1.0)
    $ 145 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 146 "MoveL"
    $ 147 "p5" "breakAfter"
    movel(p5, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 148 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 149 "Wait: 2.0"
    sleep(2.0)
    $ 150 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 151 "Comment"
    # Comment
    $ 152 "pret1≔p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]"
    global pret1=p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]
    $ 153 "p_1≔pathturn[4]"
    global p_1=pathturn[4]
    $ 154 "p_2≔pathturn[5]"
    global p_2=pathturn[5]
    $ 155 "p_3≔pathturn[6]"
    global p_3=pathturn[6]
    $ 156 "p_4≔pathturn[7]"
    global p_4=pathturn[7]
    $ 157 "p_5≔pathturn[8]"
    global p_5=pathturn[8]
    $ 158 "p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_preheat=p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 159 "p_pre_ret≔p[p_1[0]+.03,p_1[1]+.03,p_1[2],p_1[3],p_1[4],p_1[5]]"
    global p_pre_ret=p[p_1[0]+.03,p_1[1]+.03,p_1[2],p_1[3],p_1[4],p_1[5]]
    $ 160 "p_pre_ret2≔p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_pre_ret2=p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 161 "MoveJ"
    $ 162 "pret1" "breakAfter"
    movej(pret1, a=1.3962634015954636, v=1.3962634015954636)
    $ 163 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 165 "Waypoint_22" "breakAfter"
    movej(get_inverse_kin(Waypoint_22_p, qnear=Waypoint_22_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 166 "'preheat'"
    # 'preheat'
    $ 167 "MoveJ"
    $ 168 "p_pre_ret" "breakAfter"
    movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
    $ 169 "p_pre_ret2" "breakAfter"
    movej(p_pre_ret2, a=1.3962634015954636, v=1.0471975511965976)
    $ 170 "p_preheat" "breakAfter"
    movej(p_preheat, a=1.3962634015954636, v=1.0471975511965976)
    $ 171 "Wait: 8.0"
    sleep(8.0)
    $ 172 "MoveJ"
    $ 173 "p_pre_ret2" "breakAfter"
    movej(p_pre_ret2, a=1.3962634015954636, v=1.0471975511965976)
    $ 174 "p_pre_ret" "breakAfter"
    movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
    $ 175 "Set"
    set_tcp(p[0.00451,-0.328,0.10639,1.2092,-1.2092,1.2092])
    $ 176 "MoveL"
    $ 177 "p_1" "breakAfter"
    movel(p_1, a=1.2, v=0.05)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 178 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 179 "Wait: 1.0"
    sleep(1.0)
    $ 180 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 181 "MoveL"
    $ 182 "p_2" "breakAfter"
    movel(p_2, a=1.2, v=0.01)
    $ 183 "MoveP"
    $ 184 "CircleMove"
    $ 185 "p_3" "noBreak"
    $ 186 "p_4" "breakAfter"
    movec(p_3, p_4, a=0.01, v=5.0E-4, r=0.0, mode=1)
    $ 187 "MoveL"
    $ 188 "p_5" "breakAfter"
    movel(p_5, a=1.2, v=0.012)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 189 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 190 "Wait: 2.0"
    sleep(2.0)
    $ 191 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 192 "MoveL"
    $ 193 "Waypoint_23" "breakAfter"
    movel(Waypoint_23_p, a=1.2, v=0.25)
    $ 194 "MoveJ"
    $ 195 "Waypoint_24" "breakAfter"
    movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 196 "Waypoint_39" "breakAfter"
    movej(get_inverse_kin(Waypoint_39_p, qnear=Waypoint_39_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 197 "'above waypoint is home'"
    # 'above waypoint is home'
  end
  def move_path_3left():
    $ 198 "move_path_3left" "noBreak"
    $ 199 "'this is the path for Down, Over, then Back Around'"
    # 'this is the path for Down, Over, then Back Around'
    $ 200 "Comment"
    # Comment
    $ 201 "MoveJ"
    $ 202 "Waypoint_37" "breakAfter"
    movej(get_inverse_kin(Waypoint_37_p, qnear=Waypoint_37_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 203 "'above point is home'"
    # 'above point is home'
    $ 204 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 205 "Waypoint_25" "breakAfter"
    movej(get_inverse_kin(Waypoint_25_p, qnear=Waypoint_25_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 206 "Waypoint_26" "breakAfter"
    movej(get_inverse_kin(Waypoint_26_p, qnear=Waypoint_26_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 207 "Waypoint_27" "breakAfter"
    movej(get_inverse_kin(Waypoint_27_p, qnear=Waypoint_27_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 212 "Comment"
    # Comment
    $ 213 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 214 "p2≔pathturn[1]"
    global p2=pathturn[1]
    $ 215 "p4≔pathturn[2]"
    global p4=pathturn[2]
    $ 216 "p5≔pathturn[3]"
    global p5=pathturn[3]
    $ 217 "pa1≔p[p1[0]+0.05,p1[1]-0.05,p1[2],p1[3],p1[4],p1[5]]"
    global pa1=p[p1[0]+0.05,p1[1]-0.05,p1[2],p1[3],p1[4],p1[5]]
    $ 218 "MoveJ"
    $ 219 "pa1" "breakAfter"
    movej(pa1, a=1.3962634015954636, v=1.0471975511965976)
    $ 220 "p1" "breakAfter"
    movej(p1, a=1.3962634015954636, v=1.0471975511965976)
    $ 221 "Wait: 8.0"
    sleep(8.0)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 222 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 223 "Wait: 1.0"
    sleep(1.0)
    $ 224 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 225 "MoveL"
    $ 226 "p2" "breakAfter"
    movel(p2, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 227 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 228 "Wait: 0.5"
    sleep(0.5)
    $ 229 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 230 "MoveL"
    $ 231 "p4" "breakAfter"
    movel(p4, a=0.01, v=0.12)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 232 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 233 "Wait: 1.0"
    sleep(1.0)
    $ 234 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 235 "MoveL"
    $ 236 "p5" "breakAfter"
    movel(p5, a=0.1, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 237 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 238 "Wait: 2.0"
    sleep(2.0)
    $ 239 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 240 "Comment"
    # Comment
    $ 241 "pret1≔p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]"
    global pret1=p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]
    $ 242 "p_1≔pathturn[4]"
    global p_1=pathturn[4]
    $ 243 "p_2≔pathturn[5]"
    global p_2=pathturn[5]
    $ 244 "p_3≔pathturn[6]"
    global p_3=pathturn[6]
    $ 245 "p_4≔pathturn[7]"
    global p_4=pathturn[7]
    $ 246 "p_5≔pathturn[8]"
    global p_5=pathturn[8]
    $ 247 "p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_preheat=p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 248 "p_pre_ret≔p[p_1[0]+.03,p_1[1]-.03,p_1[2],p_1[3],p_1[4],p_1[5]]"
    global p_pre_ret=p[p_1[0]+.03,p_1[1]-.03,p_1[2],p_1[3],p_1[4],p_1[5]]
    $ 249 "p_pre_ret2≔p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
    global p_pre_ret2=p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
    $ 250 "MoveJ"
    $ 251 "pret1" "breakAfter"
    movej(pret1, a=1.3962634015954636, v=1.3962634015954636)
    $ 252 "Waypoint_28" "breakAfter"
    movej(get_inverse_kin(Waypoint_28_p, qnear=Waypoint_28_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 253 "'now go into the ccw weld position'"
    # 'now go into the ccw weld position'
    $ 254 "Waypoint_29" "breakAfter"
    movej(get_inverse_kin(Waypoint_29_p, qnear=Waypoint_29_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 255 "Comment"
    # Comment
    $ 256 "Waypoint_30" "breakAfter"
    movej(get_inverse_kin(Waypoint_30_p, qnear=Waypoint_30_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 257 "Waypoint_31" "breakAfter"
    movej(get_inverse_kin(Waypoint_31_p, qnear=Waypoint_31_q), a=1.3962634015954636, v=1.3962634015954636)
    $ 266 "MoveJ"
    $ 267 "p_pre_ret" "breakAfter"
    movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
    $ 268 "p_pre_ret2" "breakAfter"
    movej(p_pre_ret2, a=1.3962634015954636, v=1.0471975511965976)
    $ 269 "p_preheat" "breakAfter"
    movej(p_preheat, a=1.3962634015954636, v=1.0471975511965976)
    $ 270 "Wait: 8.0"
    sleep(8.0)
    $ 271 "MoveJ"
    $ 272 "p_pre_ret2" "breakAfter"
    movej(p_pre_ret2, a=1.3962634015954636, v=1.0471975511965976)
    $ 273 "p_pre_ret" "breakAfter"
    movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
    $ 274 "Set"
    set_tcp(p[0.00451,-0.328,0.10639,1.2092,-1.2092,1.2092])
    $ 275 "MoveL"
    $ 276 "p_1" "breakAfter"
    movel(p_1, a=1.2, v=0.05)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 277 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 278 "Wait: 1.0"
    sleep(1.0)
    $ 279 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 280 "MoveL"
    $ 281 "p_2" "breakAfter"
    movel(p_2, a=1.2, v=0.01)
    $ 282 "MoveP"
    $ 283 "CircleMove"
    $ 284 "p_3" "noBreak"
    $ 285 "p_4" "breakAfter"
    movec(p_3, p_4, a=0.01, v=5.0E-4, r=0.0, mode=1)
    $ 286 "MoveL"
    $ 287 "p_5" "breakAfter"
    movel(p_5, a=1.2, v=0.012)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 288 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 289 "Wait: 2.0"
    sleep(2.0)
    $ 290 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 295 "MoveJ"
    $ 296 "Waypoint_32" "breakAfter"
    movej(get_inverse_kin(Waypoint_32_p, qnear=Waypoint_32_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 297 "Waypoint_33" "breakAfter"
    movej(get_inverse_kin(Waypoint_33_p, qnear=Waypoint_33_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 298 "Comment"
    # Comment
    $ 299 "MoveJ"
    $ 300 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 301 "Waypoint_17" "breakAfter"
    movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 302 "Waypoint_18" "breakAfter"
    movej(get_inverse_kin(Waypoint_18_p, qnear=Waypoint_18_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 303 "Waypoint_38" "breakAfter"
    movej(get_inverse_kin(Waypoint_38_p, qnear=Waypoint_38_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 304 "'above point is home'"
    # 'above point is home'
  end
  def Test_Teach_Position():
    $ 305 "Test_Teach_Position" "noBreak"
    $ 309 "MoveJ"
    $ 310 "Waypoint_40" "breakAfter"
    set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
    movej(get_inverse_kin(Waypoint_40_p, qnear=Waypoint_40_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 311 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 312 "Waypoint_2" "breakAfter"
    set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 313 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 314 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 315 "Popup: Move the robot to the peg center, then click 'Continue'"
    popup("Move the robot to the peg center, then click 'Continue'", "Message", False, False, blocking=True)
    $ 316 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 317 "Wait: 0.25"
    sleep(0.25)
    $ 318 "sync()"
    sync()
    $ 319 "tcp_pose≔get_actual_joint_positions()"
    global tcp_pose= get_actual_joint_positions ()
  end
  def align_tcp_left():
    $ 320 "align_tcp_left" "noBreak"
    $ 321 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 322 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 323 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 324 "MoveJ"
    $ 325 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def extrude_knife3():
    $ 326 "extrude_knife3" "noBreak"
    $ 328 "Set"
    set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
    $ 329 "MoveJ"
    $ 330 "Waypoint_20" "breakAfter"
    movej(get_inverse_kin(Waypoint_20_p, qnear=Waypoint_20_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 331 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 332 "'move above bucket'"
    # 'move above bucket'
    $ 333 "MoveJ"
    $ 334 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 335 "'extrude out a foot'"
    # 'extrude out a foot'
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 336 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 337 "Wait: 24.0"
    sleep(24.0)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.8.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 338 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 339 "'slice'"
    # 'slice'
    $ 340 "MoveL"
    $ 341 "Waypoint_21" "breakAfter"
    movel(Waypoint_21_p, a=0.05, v=0.03)
    $ 342 "Waypoint_42" "breakAfter"
    movel(Waypoint_42_p, a=0.05, v=0.03)
    $ 343 "Waypoint_43" "breakAfter"
    movel(Waypoint_43_p, a=0.05, v=0.03)
    $ 344 "Waypoint_44" "breakAfter"
    movel(Waypoint_44_p, a=0.05, v=0.03)
    $ 345 "MoveJ"
    $ 346 "Waypoint_45" "breakAfter"
    movej(get_inverse_kin(Waypoint_45_p, qnear=Waypoint_45_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 347 "'above waypoint is home'"
    # 'above waypoint is home'
  end
  def align_tcp_forward():
    $ 349 "align_tcp_forward" "noBreak"
    $ 350 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 351 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 352 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 353 "MoveJ"
    $ 354 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_up():
    $ 355 "align_tcp_up" "noBreak"
    $ 356 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 357 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 358 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 359 "MoveJ"
    $ 360 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_ready_for_welding():
    $ 361 "align_ready_for_welding" "noBreak"
    $ 362 "'this program takes the welder from home to a position alined ready for welding (vertically down)'"
    # 'this program takes the welder from home to a position alined ready for welding (vertically down)'
    $ 363 "MoveJ"
    $ 364 "oldhome" "breakAfter"
    movej(get_inverse_kin(oldhome_p, qnear=oldhome_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 365 "Waypoint_34" "breakAfter"
    movej(get_inverse_kin(Waypoint_34_p, qnear=Waypoint_34_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 366 "Waypoint_35" "breakAfter"
    movej(get_inverse_kin(Waypoint_35_p, qnear=Waypoint_35_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 367 "Waypoint_36" "breakAfter"
    movej(get_inverse_kin(Waypoint_36_p, qnear=Waypoint_36_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def Corner_Homing_45():
    $ 368 "Corner_Homing_45" "noBreak"
    $ 369 "'Use this program when tool is already positioned close to corner at 45deg'"
    # 'Use this program when tool is already positioned close to corner at 45deg'
    $ 370 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
    # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
    $ 371 "Set"
    set_tcp(p[0.0,-0.004,0.284,0.0,0.0,0.0])
    $ 372 "'dummy move below for debug'"
    # 'dummy move below for debug'
    $ 377 "Wait: 1.0"
    sleep(1.0)
    $ 378 "tp≔get_actual_tcp_pose()"
    global tp= get_actual_tcp_pose ()
    $ 379 "Script: analyze_touchpoints.script"
    # this file creates the function for analyzing touchpoints
    # define pi
    pi = 3.1415926535
    
    # this is the main entry point for calculations.
    # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
    # specifically for Down, Over, then Around (DOtA)
    # specifically for right-sided boxes (vertical weld on right side of edge)
    def main_calculate_right(p11, p12, p21, p22, p3, p13, p23):
        struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
        list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
        struct2 = calculate_DOtA_points_right(struct1, list1)
        return struct2
    end
    
    # this is the main entry point for calculations.
    # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
    # specifically for Down, Over, then Around (DOtA)
    # specifically for left-sided boxes (vertical weld on left side of edge)
    def main_calculate_left(p11, p12, p21, p22, p3, p13, p23):
        struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
        list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
        struct2 = calculate_DOtA_points_left(struct1, list1)
        return struct2
    end
    
    # it takes 5 arguments as points
    # it returns a struct containing: (pointintersect, pointapproach1, pointapproach2, point1, point2, point3, point4, point5, pointreturn1, heading1, heading2, heading3, path2r1, path2r2, path2l1, path2l2)
    # specifically for Around then Up (AtU)
    def analyze_touchpoints(p11, p12, p21, p22, p3):
      # FIND THE INTERSECTION
      # comment get the z
      zcoord=p3[2]
    
      # get the raw points from the first line
      l1p1x=p11[0]
      l1p1y=p11[1]
      l1p2x=p12[0]
      l1p2y=p12[1]
    
      # equate the first line in 2d space
      ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
    
      # b = y - mx
      bl1 = l1p1y - ml1 * l1p1x
    
      # get the raw points from the second line
      l2p1x=p21[0]
      l2p1y=p21[1]
      l2p2x=p22[0]
      l2p2y=p22[1]
    
      # equate the second line in 2d space
      ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
    
      # b = y - mx
      bl2 = l2p1y - ml2 * l2p1x
    
    
      # find the intersection of the two lines
      # m1x+b1 = m2x+b2
      # m1x - m2x = b2 - b1
      # x = (b2-b1) / (m1-m2)
      xintersect = (bl2-bl1) / (ml1-ml2)
      yintersect = ml1 * xintersect + bl1
    
      #FIND THE VECTORS
      #define a vector from the intersection to the second point on the first line
      l1delxfull = l1p2x - xintersect
      l1delyfull = l1p2y - yintersect
    
      l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
    
      l1delxunit = l1delxfull / l1delmag
      l1delyunit = l1delyfull / l1delmag
    
      #define a vector from the intersection to the second point on the second line
      l2delxfull = l2p2x - xintersect
      l2delyfull = l2p2y - yintersect
    
      l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
    
      l2delxunit = l2delxfull / l2delmag
      l2delyunit = l2delyfull / l2delmag
    
      # FIND THE FOUR POINTS ON THE LINES
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance = 8
      roundoverdistance = 0.05
      zup = .375
      # inches
      wd = welddistance * 25.4 / 1000
      rod = roundoverdistance * 25.4 / 1000
      zup = zup * 25.4 / 1000
    
      # now we have the unit vector. extend the weld distance from the intersection
      x = xintersect + l1delxunit * wd
      y = yintersect + l1delyunit * wd
      z = zcoord + zup
    
      point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
    
      x = xintersect + l1delxunit * rod
      y = yintersect + l1delyunit * rod
    
      point2 = p[x,y,z,1.570796,0,0]
    
      # now we have the unit vector. extend the weld distance from the intersection
      x = xintersect + l2delxunit * wd
      y = yintersect + l2delyunit * wd
    
      point5 = p[x,y,z,0,-1.570796,0]
    
      x = xintersect + l2delxunit * rod
      y = yintersect + l2delyunit * rod
    
      point4 = p[x,y,z,0,-1.570796,0]
    
      #DEFINE APPROACH POINTS
      pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
      pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
      pointapproach2 = p[point1[0], point1[1]+0.1, point1[2], point1[3], point1[4], point1[5]]
      pointreturn1 = p[point5[0]+0.1, point5[1], point5[2], point5[3], point5[4], point5[5]]
    
      #FIND HEADINGS
      #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
      headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
      headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
      # find halfway heading
      heading2 = (headingvector1 + headingvector2)/2
      # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
      heading1 = headingvector1 + pi/2
      heading3 = headingvector2 - pi/2
    
      #FIND POINT 3
      #see if we have to / can find point 3
      findpoint3 = True
      if roundoverdistance == 0:
        findpoint3 = False
      end
      if findpoint3:
        # i need to find the point3 such that the arc from p2 to p3 to p4 is tangent to p1-p2 and p4-p5. making this a smooth path will be good
        # the direction of movement is from pointintersect in the direction of heading2
        # how much movement though? this will depend on whether it is actually a 90 degree angle or not.
        # first, find the perpendicular lines through points 2 and 4
        perp2 = find_perpendicular_line(ml1, point2[0], point2[1])
        perp4 = find_perpendicular_line(ml2, point4[0], point4[1])
        # next, find the intersection of those two lines
        perpintersect = find_intersection(perp2[0], perp2[1], perp4[0], perp4[1])
        radiusofcircle = distance_between(perpintersect[0], perpintersect[1], 0, point2[0], point2[1], 0)
        # find a vector the direction of heading2
        uvx = cos(heading2)
        uvy = sin(heading2)
        # compute point3. pass in negative radius because the direction is into the tank but we want to move from the intersection out to the rounded edge.
        point3coords = add_vectordistance_to_point(perpintersect[0], perpintersect[1], z, uvx, uvy, 0, -1 * radiusofcircle)
        point3 = p[point3coords[0], point3coords[1], point3coords[2], 0, 0, 0]
      end
    
      #APPLY ACTUAL RXRYRZ TO POINTS
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      pointapproach1 = p[pointapproach1[0], pointapproach1[1], pointapproach1[2], rx, ry, rz]
      pointapproach2 = p[pointapproach2[0], pointapproach2[1], pointapproach2[2], rx, ry, rz]
      point1 = p[point1[0], point1[1], point1[2], rx, ry, rz]
      point2 = p[point2[0], point2[1], point2[2], rx, ry, rz]
      rxryrz = convert_heading_to_axang(heading2)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      if findpoint3:
        point3 = p[point3[0], point3[1], point3[2], rx, ry, rz]
      else:
        point3 = point2
      end
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point4 = p[point4[0], point4[1], point4[2], rx, ry, rz]
      point5 = p[point5[0], point5[1], point5[2], rx, ry, rz]
      pointreturn1 = p[pointreturn1[0], pointreturn1[1], pointreturn1[2], rx, ry, rz]
    
      #find path2 (the part that goes up)
      four_vertical_points = find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, zup, wd, heading1, heading3)
      path2r1 = four_vertical_points[0]
      path2r2 = four_vertical_points[1]
      path2l1 = four_vertical_points[2]
      path2l2 = four_vertical_points[3]
    
      #RETURN STRUCT
      ret = struct(pointintersect=pointintersect, pointapproach1=pointapproach1, pointapproach2=pointapproach2, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, pointreturn1=pointreturn1, heading1=heading1, heading2=heading2, heading3=heading3, path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
      return ret
    end
    
    # it takes 5 arguments as points
    # it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
    def analyze_touchpoints_only(p11, p12, p21, p22, p3):
      # FIND THE INTERSECTION
      # comment get the z
      zcoord=p3[2]
    
      # get the raw points from the first line
      l1p1x=p11[0]
      l1p1y=p11[1]
      l1p2x=p12[0]
      l1p2y=p12[1]
    
      # equate the first line in 2d space
      ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
    
      # b = y - mx
      bl1 = l1p1y - ml1 * l1p1x
    
      # get the raw points from the second line
      l2p1x=p21[0]
      l2p1y=p21[1]
      l2p2x=p22[0]
      l2p2y=p22[1]
    
      # equate the second line in 2d space
      ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
    
      # b = y - mx
      bl2 = l2p1y - ml2 * l2p1x
    
    
      # find the intersection of the two lines
      # m1x+b1 = m2x+b2
      # m1x - m2x = b2 - b1
      # x = (b2-b1) / (m1-m2)
      xintersect = (bl2-bl1) / (ml1-ml2)
      yintersect = ml1 * xintersect + bl1
    
      pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
    
      #FIND THE VECTORS
      #define a vector from the intersection to the second point on the first line
      l1delxfull = l1p2x - xintersect
      l1delyfull = l1p2y - yintersect
    
      l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
    
      l1delxunit = l1delxfull / l1delmag
      l1delyunit = l1delyfull / l1delmag
    
      #define a vector from the intersection to the second point on the second line
      l2delxfull = l2p2x - xintersect
      l2delyfull = l2p2y - yintersect
    
      l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
    
      l2delxunit = l2delxfull / l2delmag
      l2delyunit = l2delyfull / l2delmag
    
      #FIND HEADINGS
      #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
      headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
      headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
      # find halfway heading
      heading2 = (headingvector1 + headingvector2)/2
      # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
      heading1 = headingvector1 + pi/2
      heading3 = headingvector2 - pi/2
    
      #RETURN STRUCT
      ret = struct(pointintersect=pointintersect, heading1=heading1, heading2=heading2, heading3=heading3, l1delxunit=l1delxunit, l1delyunit=l1delyunit, l2delxunit=l2delxunit, l2delyunit=l2delyunit)
      return ret
    end
    
    # given a struct from analyze_touchpoints_only(), calculate the points
    def calculate_DOtA_points_right(struct1, listleans):
        # get the stuff from the struct
        pointintersect = struct1[0]
        heading1 = struct1[1]
        heading2 = struct1[2]
        heading3 = struct1[3]
        l1delxunit = struct1[4]
        l1delyunit = struct1[5]
        l2delxunit = struct1[6]
        l2delyunit = struct1[7]
    
        # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
        # find locations 8 inches away from  intersect point
        # CONST
        welddistance1 = 8 # vertical weld distance
        welddistance2 = 6 # first path second leg
        welddistance3 = 8 # second path second leg
        zup = .375
        # inches
        wd1 = welddistance1 * 25.4 / 1000
        wd2 = welddistance2 * 25.4 / 1000
        wd3 = welddistance3 * 25.4 / 1000
        zup = zup * 25.4 / 1000
    
        x = pointintersect[0] + l1delxunit * zup
        y = pointintersect[1] + l1delyunit * zup
        z = pointintersect[2] + zup
    
        #apply actual rxryrz to points
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang_preheatdown(heading1)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
    
        point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
        point2 = p[x, y, z, rx, ry, rz]
    
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang_ccw(heading1)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
    
        point4 = p[x, y, z, rx, ry, rz]
        x = x + l1delxunit * wd2
        y = y + l1delyunit * wd2
        point5 = p[x, y, z, rx, ry, rz]
    
        # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
        roundoverdistance = 0.05
        rod = roundoverdistance * 25.4 / 1000
    
        # now we have the unit vector. extend the weld distance from the intersection
        x = pointintersect[0] + l1delxunit * (zup)
        y = pointintersect[1] + l1delyunit * zup
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang(heading1)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
        point_1 = p[x, y, z, rx, ry, rz]
    
        x = pointintersect[0] + l1delxunit * rod
        y = pointintersect[1] + l1delyunit * rod
        point_2 = p[x, y, z, rx, ry, rz]
    
        # now we have the unit vector. extend the weld distance from the intersection
        x = pointintersect[0] + l2delxunit * wd3
        y = pointintersect[1] + l2delyunit * wd3
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang(heading3)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
        point_5 = p[x, y, z, rx, ry, rz]
    
        x = pointintersect[0] + l2delxunit * rod
        y = pointintersect[1] + l2delyunit * rod
        point_4 = p[x, y, z, rx, ry, rz]
    
        #FIND POINT 3
        # by calling analyze_touchpoints()
        atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
        point_3 = atret[5]
    
    
        struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
        return struct2
    end
    
    # given a struct from analyze_touchpoints_only(), calculate the points
    def calculate_DOtA_points_left(struct1, listleans):
        # get the stuff from the struct
        pointintersect = struct1[0]
        heading1 = struct1[1]
        heading2 = struct1[2]
        heading3 = struct1[3]
        l1delxunit = struct1[4]
        l1delyunit = struct1[5]
        l2delxunit = struct1[6]
        l2delyunit = struct1[7]
    
        # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
        # find locations 8 inches away from  intersect point
        # CONST
        welddistance1 = 8 # vertical weld distance
        welddistance2 = 6 # first path second leg
        welddistance3 = 8 # second path second leg
        zup = .375
        # inches
        wd1 = welddistance1 * 25.4 / 1000
        wd2 = welddistance2 * 25.4 / 1000
        wd3 = welddistance3 * 25.4 / 1000
        zup = zup * 25.4 / 1000
    
        x = pointintersect[0] + l2delxunit * zup
        y = pointintersect[1] + l2delyunit * zup
        z = pointintersect[2] + zup
    
        #apply actual rxryrz to points
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang_preheatdown(heading3)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
    
        point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz]
        point2 = p[x, y, z, rx, ry, rz]
    
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang(heading3)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
    
        point4 = p[x, y, z, rx, ry, rz]
        x = x + l2delxunit * wd2
        y = y + l2delyunit * wd2
        point5 = p[x, y, z, rx, ry, rz]
    
        # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
        roundoverdistance = 0.05
        rod = roundoverdistance * 25.4 / 1000
    
        # now we have the unit vector. extend the weld distance from the intersection
        x = pointintersect[0] + l2delxunit * (zup)
        y = pointintersect[1] + l2delyunit * zup
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang_ccw(heading3)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
        point_1 = p[x, y, z, rx, ry, rz]
    
        x = pointintersect[0] + l2delxunit * rod
        y = pointintersect[1] + l2delyunit * rod
        point_2 = p[x, y, z, rx, ry, rz]
    
        # now we have the unit vector. extend the weld distance from the intersection
        x = pointintersect[0] + l1delxunit * wd3
        y = pointintersect[1] + l1delyunit * wd3
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang_ccw(heading1)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
        point_5 = p[x, y, z, rx, ry, rz]
    
        x = pointintersect[0] + l1delxunit * rod
        y = pointintersect[1] + l1delyunit * rod
        point_4 = p[x, y, z, rx, ry, rz]
    
        #FIND POINT 3
        # by calling analyze_touchpoints()
        atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
        point_3 = atret[5]
        #point 3 will not have the correct rxryrz though because now the gun needs to be face up.
        rxryrz = convert_heading_to_axang_ccw(heading2)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
        point_3 = p[point_3[0], point_3[1], point_3[2], rx, ry, rz]
    
        struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
        return struct2
    end
    
    # this function analyzes the vertical points
    # calculates the slope of the edge in question
    # specifically, for each inch up in the z direction, what is the change in x and change in y direction
    # returns a list of [nx, ny]
    def analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3):
        # first, find the equations of the planes from the 6 points
        plane1 = findplane(p11, p12, p13)
        plane2 = findplane(p21, p22, p23)
        # Find the Direction Vector of the Line: The direction vector d of the line of intersection can be found by taking the cross product of the normal vectors of each plane (a, b, and c)
        nx = plane1[1]*plane2[2] - plane1[2]*plane2[1]
        ny = plane1[2]*plane2[0] - plane1[0]*plane2[2]
        nz = plane1[0]*plane2[1] - plane1[1]*plane2[0]
        # normalize the vector so the z length is 1
        multiplier = 1 / nz
        nx = nx * multiplier
        ny = ny * multiplier
        nz = nz * multiplier # should become equal to 1
        ret = [nx, ny]
        return ret
    end
    
    # given 3 points, this finds the plane and its equation
    # rereturns ax + by + cz + d = 0 in a list of [a, b, c, d]
    def findplane(p11, p12, p13):
        # extract coordinates
        x1 = p11[0]
        y1 = p11[1]
        z1 = p11[2]
        x2 = p12[0]
        y2 = p12[1]
        z2 = p12[2]
        x3 = p13[0]
        y3 = p13[1]
        z3 = p13[2]
        # create vectors from the points
        v1x = x2-x1
        v1y = y2-y1
        v1z = z2-z1
        v2x = x3-x1
        v2y = y3-y1
        v2z = z3-z1
        #calculate the normal vector using the cross product
        nx = v1y*v2z - v1z*v2y # i component
        ny = v1z*v2x - v1x*v2z # j component
        nz = v1x*v2y - v1y*v2x # k component
        # calculate d in the plane equation
        d = -1 * (nx*x1 + ny*y1 + nz*z1)
        ret = [nx, ny, nz, d]
        return ret
    end
    
    # given a heading, (ccw from +x axis), find the mx+b slope
    # fails if exactly vertical
    def get_slope_from_heading(heading):
        return tan(heading)
    end
    
    
    
    # this function finds the points (and rxryrz) of the 2 points (start and end) of vertical weld section
    def find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, offset, wd, heading1, heading3):
    
      # find right side stuff
      # find the point in 3d space that is .375 up and .375 over
      x = pointintersect[0] + l1delxunit * offset
      y = pointintersect[1] + l1delyunit * offset
      z = pointintersect[2] + offset
      # find rxryrz
      rxryrz = convert_heading_to_axang_preheatup(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      path2r1 = p[x, y, z, rx, ry, rz]
      path2r2 = p[x, y, z + wd, rx, ry, rz]
    
      # find left side
      # find the point in 3d space that is .375 up and .375 over
      x = pointintersect[0] + l2delxunit * offset
      y = pointintersect[1] + l2delyunit * offset
      z = pointintersect[2] + offset
      # find rxryrz
      rxryrz = convert_heading_to_axang_preheatup(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      path2l1 = p[x, y, z, rx, ry, rz]
      path2l2 = p[x, y, z + wd, rx, ry, rz]
    
      ret = struct(path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
      return ret
    end
    
    # this function converts a unit vector to its heading angle ccw from x+ axis
    # takes uvx and uvy
    # returns heading in radians
    def convert_uv_to_heading(uvx, uvy):
      baseang = atan(uvy/uvx)
      if uvx < 0:
        ang = baseang + pi
      elif uvy < 0:
        ang = baseang + pi * 2
      else:
        ang = baseang
      end
      return ang
    end
    
    # this function finds the equation of a line, perpendicular to a given line, and going through a given point
    # takes 3 arguments: m (the original line's slope), x (point's x coord), y (point's y coord). the b of the original line is not needed
    # returns a list of [m,b] (the slope and intercept of the new line)
    def find_perpendicular_line(origm, x, y):
      m = (1/origm) * -1
      b = y - m*x
      ret = [m, b]
      return ret
    end
    
    # this function finds the intersection point between two lines in the xy plane
    # takes 4 arguments: m1, b1, m2, b2
    # returns a list of [x,y] (the point of intersection)
    def find_intersection(m1, b1, m2, b2):
      # m1x+b1 = m2x+b2
      # m1x - m2x = b2 - b1
      # x = (b2-b1) / (m1-m2)
      x = (b2-b1) / (m1-m2)
      y = m1 * x + b1
      ret = [x, y]
      return ret
    end
    
    # this function finds the distance between 2 points in 3d space
    # it takes 6 arguments: x1, y1, z1, x2, y2, z2
    # it returns a distance
    def distance_between(x1, y1, z1, x2, y2, z2):
      distsquared = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)
      dist = sqrt(distsquared)
      return dist
    end
    
    # this function takes a point, a unit vector, and a distance, and adds the distance to the point in the direction of the unit vector (3d space)
    # it returns a point as a list of coordinates
    def add_vectordistance_to_point(xi, yi, zi, uvx, uvy, uvz, delta):
      xf = xi + uvx * delta
      yf = yi + uvy * delta
      zf = zi + uvz * delta
      ret = [xf, yf, zf]
      return ret
    end
    
    # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
    # this will point the gun in this heading with the bottom side of the gun facing up.
    # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
    def convert_heading_to_axang(heading):
     axisxraw = -1 * sin(heading)
     axisyraw = cos(heading) + 1
     axiszraw = sin(heading)
    
     magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    
     axisxunit = axisxraw / magnitude
     axisyunit = axisyraw / magnitude
     axiszunit = axiszraw / magnitude
    
     angle = acos( (cos(heading) - 1) / 2 )
    
     rxout = axisxunit * angle
     ryout = axisyunit * angle
     rzout = axiszunit * angle
    
     return [rxout, ryout, rzout]
    end
    
    # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
    # this will point the gun in this heading with the preheat side of the gun tip facing up. Used for welding in a vertical path.
    # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
    def convert_heading_to_axang_preheatup(heading):
     axisxraw = -sin(heading) + 1
     axisyraw = cos(heading)
     axiszraw = cos(heading)
    
     magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    
     axisxunit = axisxraw / magnitude
     axisyunit = axisyraw / magnitude
     axiszunit = axiszraw / magnitude
    
     angle = acos( (-sin(heading) - 1) / 2 )
    
     rxout = axisxunit * angle
     ryout = axisyunit * angle
     rzout = axiszunit * angle
    
     return [rxout, ryout, rzout]
    end
    
    # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
    # this will point the gun in this heading with the preheat side of the gun tip facing down. Used for welding in a vertical path downwards.
    # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
    def convert_heading_to_axang_preheatdown(heading):
     axisxraw = -sin(heading) - 1
     axisyraw = cos(heading)
     axiszraw = -cos(heading)
    
     magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    
     axisxunit = axisxraw / magnitude
     axisyunit = axisyraw / magnitude
     axiszunit = axiszraw / magnitude
    
     angle = acos( (sin(heading) - 1) / 2 )
    
     rxout = axisxunit * angle
     ryout = axisyunit * angle
     rzout = axiszunit * angle
    
     return [rxout, ryout, rzout]
    end
    
    # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
    # this will point the gun in this heading with the preheat side of the gun tip facing right. Used for welding counterclockwise around the box.
    # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
    def convert_heading_to_axang_ccw(heading):
     axisxraw = -sin(heading)
     axisyraw = cos(heading) - 1
     axiszraw = -sin(heading)
    
     magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    
     axisxunit = axisxraw / magnitude
     axisyunit = axisyraw / magnitude
     axiszunit = axiszraw / magnitude
    
     angle = acos( (-cos(heading) - 1) / 2 )
    
     rxout = axisxunit * angle
     ryout = axisyunit * angle
     rzout = axiszunit * angle
    
     return [rxout, ryout, rzout]
    end
    
    # this function is for getting the points along the path of the corner homing 45
    # point0 is the point where they touched
    def get_corner_homing_45_pathpoints(point0):
      p0x = point0[0]
      p0y = point0[1]
      p0z = point0[2]
      p0rx = point0[3]
      p0ry = point0[4]
      p0rz = point0[5]
    
      #constants
      #distances of how far away from point the touchpoints are
      d0 = 0.10 # how far from the box to retreat and approach
      d1 = 0.03 # first distance from init point
      d2 = 0.15 # second distance from init point
      d3 = 0.125 #vertical distance from first point
      sqrt2 = 0.707106781 # 1/sqrt(2) , the inverse of the sqrt(2)
    
      ph1 = p[p0x + d0, p0y, p0z + d1, p0rx, p0ry, p0rz] #approach point for turn
    
      ph2 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y+d0*0.5+sqrt2*d1, p0z+d1, .445, -1.562, .483]
      ph3 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y+d0*0.5+sqrt2*d2, p0z+d1, .445, -1.562, .483]
      ph4 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y-d0*0.5-sqrt2*d1, p0z+d1, 1.699, 3.576, 1.841]
      ph5 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y-d0*0.5-sqrt2*d2, p0z+d1, 1.699, 3.576, 1.841]
    
      # go back to ph1
      ph6 = p[p0x + d0, p0y, p0z -0.05, 0, 0, 0] # approach point for under turn
      # moveL from ph1 to ph6
      ph7 = p[p0x-d1, p0y, p0z-0.05, 0, 0, 0]
    
      # add the vertical touch points
      ph2up = p[ph2[0], ph2[1], ph2[2]+d3, ph2[3], ph2[4], ph2[5]]
      ph4up = p[ph4[0], ph4[1], ph4[2]+d3, ph4[3], ph4[4], ph4[5]]
      ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4, ph5=ph5, ph6=ph6, ph7=ph7, ph2up=ph2up, ph4up=ph4up)
      return ret
    end
    $ 380 "path_pre≔get_corner_homing_45_pathpoints(tp)"
    global path_pre=get_corner_homing_45_pathpoints(tp)
    $ 381 "ph1≔path_pre[0]"
    global ph1=path_pre[0]
    $ 382 "ph2≔path_pre[1]"
    global ph2=path_pre[1]
    $ 383 "ph3≔path_pre[2]"
    global ph3=path_pre[2]
    $ 384 "ph4≔path_pre[3]"
    global ph4=path_pre[3]
    $ 385 "ph5≔path_pre[4]"
    global ph5=path_pre[4]
    $ 386 "ph6≔path_pre[5]"
    global ph6=path_pre[5]
    $ 387 "ph7≔path_pre[6]"
    global ph7=path_pre[6]
    $ 388 "ph2up≔path_pre[7]"
    global ph2up=path_pre[7]
    $ 389 "ph4up≔path_pre[8]"
    global ph4up=path_pre[8]
    $ 390 "MoveJ"
    $ 391 "ph1" "breakAfter"
    movej(ph1, a=1.3962634015954636, v=1.0471975511965976)
    $ 392 "ph2" "breakAfter"
    movej(ph2, a=1.3962634015954636, v=1.0471975511965976)
    $ 393 "MoveL"
    $ 394 "Direction: Base"
    global move_thread_flag_394=0
    thread move_thread_394():
      enter_critical
      move_thread_flag_394 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_394 = 2
      exit_critical
    end
    move_thread_flag_394 = 0
    move_thread_han_394 = run move_thread_394()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_394
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 395 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 396 "p11≔get_actual_tcp_pose()"
    global p11= get_actual_tcp_pose ()
    $ 397 "MoveJ"
    $ 398 "ph2up" "breakAfter"
    movej(ph2up, a=1.3962634015954636, v=1.0471975511965976)
    $ 399 "MoveL"
    $ 400 "Direction: Base"
    global move_thread_flag_400=0
    thread move_thread_400():
      enter_critical
      move_thread_flag_400 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_400 = 2
      exit_critical
    end
    move_thread_flag_400 = 0
    move_thread_han_400 = run move_thread_400()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_400
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 401 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 402 "p13≔get_actual_tcp_pose()"
    global p13= get_actual_tcp_pose ()
    $ 403 "MoveJ"
    $ 404 "ph3" "breakAfter"
    movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
    $ 405 "MoveL"
    $ 406 "Direction: Base"
    global move_thread_flag_406=0
    thread move_thread_406():
      enter_critical
      move_thread_flag_406 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_406 = 2
      exit_critical
    end
    move_thread_flag_406 = 0
    move_thread_han_406 = run move_thread_406()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_406
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 407 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 408 "p12≔get_actual_tcp_pose()"
    global p12= get_actual_tcp_pose ()
    $ 409 "MoveJ"
    $ 410 "ph3" "breakAfter"
    movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
    $ 411 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 412 "MoveJ"
    $ 413 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=0.3490658503988659)
    $ 415 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=0.3490658503988659)
    $ 416 "MoveJ"
    $ 417 "ph4" "breakAfter"
    movej(ph4, a=1.3962634015954636, v=1.0471975511965976)
    $ 418 "MoveL"
    $ 419 "Direction: Base"
    global move_thread_flag_419=0
    thread move_thread_419():
      enter_critical
      move_thread_flag_419 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_419 = 2
      exit_critical
    end
    move_thread_flag_419 = 0
    move_thread_han_419 = run move_thread_419()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_419
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 420 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 421 "p21≔get_actual_tcp_pose()"
    global p21= get_actual_tcp_pose ()
    $ 422 "MoveJ"
    $ 423 "ph4up" "breakAfter"
    movej(ph4up, a=1.3962634015954636, v=1.0471975511965976)
    $ 424 "MoveL"
    $ 425 "Direction: Base"
    global move_thread_flag_425=0
    thread move_thread_425():
      enter_critical
      move_thread_flag_425 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_425 = 2
      exit_critical
    end
    move_thread_flag_425 = 0
    move_thread_han_425 = run move_thread_425()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_425
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 426 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 427 "p23≔get_actual_tcp_pose()"
    global p23= get_actual_tcp_pose ()
    $ 428 "MoveJ"
    $ 429 "ph5" "breakAfter"
    movej(ph5, a=1.3962634015954636, v=1.0471975511965976)
    $ 430 "MoveL"
    $ 431 "Direction: Base"
    global move_thread_flag_431=0
    thread move_thread_431():
      enter_critical
      move_thread_flag_431 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_431 = 2
      exit_critical
    end
    move_thread_flag_431 = 0
    move_thread_han_431 = run move_thread_431()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_431
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 432 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 433 "p22≔get_actual_tcp_pose()"
    global p22= get_actual_tcp_pose ()
    $ 434 "MoveJ"
    $ 435 "ph5" "breakAfter"
    movej(ph5, a=1.3962634015954636, v=1.0471975511965976)
    $ 436 "ph4" "breakAfter"
    movej(ph4, a=1.3962634015954636, v=1.0471975511965976)
    $ 438 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 439 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 440 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 441 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 442 "ph6" "breakAfter"
    movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
    $ 443 "ph7" "breakAfter"
    movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
    $ 444 "MoveL"
    $ 445 "Direction: Base Z+"
    global move_thread_flag_445=0
    thread move_thread_445():
      enter_critical
      move_thread_flag_445 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_445 = 2
      exit_critical
    end
    move_thread_flag_445 = 0
    move_thread_han_445 = run move_thread_445()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_445
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 446 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 447 "p3≔get_actual_tcp_pose()"
    global p3= get_actual_tcp_pose ()
    $ 448 "MoveJ"
    $ 449 "ph7" "breakAfter"
    movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
    $ 450 "ph6" "breakAfter"
    movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
    $ 451 "Waypoint_14" "breakAfter"
    movej(get_inverse_kin(Waypoint_14_p, qnear=Waypoint_14_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 452 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 453 "Waypoint_41" "breakAfter"
    movej(get_inverse_kin(Waypoint_41_p, qnear=Waypoint_41_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 454 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 456 "Comment"
    # Comment
    $ 457 "Comment"
    # Comment
    $ 458 "Comment"
    # Comment
    $ 459 "Comment"
    # Comment
    $ 460 "Comment"
    # Comment
    $ 461 "Comment"
    # Comment
  end
  $ 2 "BeforeStart"
  $ 3 "Safe Home Folder"
  $ 4 "'if robot is not at home, send it back to home safely'"
  # 'if robot is not at home, send it back to home safely'
  $ 5 "'make sure the tcp is welder'"
  # 'make sure the tcp is welder'
  $ 6 "Set"
  set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
  $ 7 "sp≔get_actual_tcp_pose()"
  global sp= get_actual_tcp_pose ()
  $ 8 "MoveL"
  $ 9 "sp" "breakAfter"
  movel(sp, a=1.2, v=0.25)
  $ 10 "'if first move is to a variable, skip automove'"
  # 'if first move is to a variable, skip automove'
  $ 11 "'turn off welder'"
  # 'turn off welder'
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 12 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 13 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 14 "jp≔get_actual_joint_positions()"
  global jp= get_actual_joint_positions ()
  $ 15 "If sp[0]>0.600"
  if (sp[0]>0.600):
    $ 16 "'if x > 600 then above then home'"
    # 'if x > 600 then above then home'
    $ 17 "MoveJ"
    $ 18 "Waypoint_47" "breakAfter"
    movej(get_inverse_kin(Waypoint_47_p, qnear=Waypoint_47_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 19 "Home"
    movej([-3.266964260731834, -1.1426250499539599, 1.6915939489946439, 0.9363536077674468, -0.002476040516995681, -1.5388119856448528], a=1.3962634015954636, v=1.0471975511965976)
  else:
    $ 20 "Else" "noBreak"
    $ 21 "Popup: retreating to home"
    popup("retreating to home", "Message", False, False, blocking=True)
    $ 22 "'for rules 2-8, finish with oldhome then above then home'"
    # 'for rules 2-8, finish with oldhome then above then home'
    $ 23 "If -1.74<jp[4] and jp[4]<1.05 and -1.74<jp[3] and jp[3]<1.74"
    if (-1.74<jp[4]  and  jp[4]<1.05  and  -1.74<jp[3]  and  jp[3]<1.74):
      $ 24 "'if oldhome, test teach, then go straight to oldhome'"
      # 'if oldhome, test teach, then go straight to oldhome'
    else:
      $ 25 "ElseIf sp[0]<-.5 and jp[3]>3.14 and -2.62<jp[4] and jp[4]<-0.87"
      if (sp[0]<-.5  and  jp[3]>3.14  and  -2.62<jp[4]  and  jp[4]<-0.87):
        $ 26 "'if left side weld approach, left weld approach in reverse'"
        # 'if left side weld approach, left weld approach in reverse'
        $ 27 "MoveJ"
        $ 28 "Waypoint_50" "breakAfter"
        movej(get_inverse_kin(Waypoint_50_p, qnear=Waypoint_50_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 29 "Waypoint_51" "breakAfter"
        movej(get_inverse_kin(Waypoint_51_p, qnear=Waypoint_51_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 30 "Waypoint_52" "breakAfter"
        movej(get_inverse_kin(Waypoint_52_p, qnear=Waypoint_52_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 31 "Waypoint_53" "breakAfter"
        movej(get_inverse_kin(Waypoint_53_p, qnear=Waypoint_53_q), a=1.3962634015954636, v=1.0471975511965976)
      else:
        $ 32 "ElseIf sp[0]<0 and 0<jp[3] and jp[3]<1.74 and 0.87<jp[4] and jp[4]<2.62"
        if (sp[0]<0  and  0<jp[3]  and  jp[3]<1.74  and  0.87<jp[4]  and  jp[4]<2.62):
          $ 33 "'if right side around, move back then wapoint 24 then oldhome'"
          # 'if right side around, move back then wapoint 24 then oldhome'
          $ 34 "If sp[0]<-1.0"
          if (sp[0]<-1.0):
            $ 35 "xback≔p[-1.0,sp[1],sp[2],sp[3],sp[4],sp[5]]"
            global xback=p[-1.0,sp[1],sp[2],sp[3],sp[4],sp[5]]
            $ 36 "MoveJ"
            $ 37 "xback" "breakAfter"
            movej(xback, a=1.3962634015954636, v=1.0471975511965976)
          end
          $ 38 "MoveJ"
          $ 39 "Waypoint_54" "breakAfter"
          movej(get_inverse_kin(Waypoint_54_p, qnear=Waypoint_54_q), a=1.3962634015954636, v=1.0471975511965976)
        else:
          $ 40 "ElseIf jp[3]<2.62 and jp[4]<-3.84"
          if (jp[3]<2.62  and  jp[4]<-3.84):
            $ 41 "'if left side second half, then left weld ending sequence'"
            # 'if left side second half, then left weld ending sequence'
            $ 42 "If jp[5]<0.35"
            if (jp[5]<0.35):
              $ 43 "MoveJ"
              $ 44 "Waypoint_65" "breakAfter"
              movej(get_inverse_kin(Waypoint_65_p, qnear=Waypoint_65_q), a=1.3962634015954636, v=1.0471975511965976)
            end
            $ 45 "MoveJ"
            $ 50 "'above is testing, below is real'"
            # 'above is testing, below is real'
            $ 51 "Waypoint_55" "breakAfter"
            movej(get_inverse_kin(Waypoint_55_p, qnear=Waypoint_55_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 53 "Waypoint_59" "breakAfter"
            movej(get_inverse_kin(Waypoint_59_p, qnear=Waypoint_59_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 54 "Waypoint_58" "breakAfter"
            movej(get_inverse_kin(Waypoint_58_p, qnear=Waypoint_58_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 55 "Waypoint_56" "breakAfter"
            movej(get_inverse_kin(Waypoint_56_p, qnear=Waypoint_56_q), a=1.3962634015954636, v=1.0471975511965976)
            $ 56 "Waypoint_57" "breakAfter"
            movej(get_inverse_kin(Waypoint_57_p, qnear=Waypoint_57_q), a=1.3962634015954636, v=1.0471975511965976)
          else:
            $ 57 "ElseIf jp[3]<-2.09"
            if (jp[3]<-2.09):
              $ 58 "'bottom homing'"
              # 'bottom homing'
              $ 59 "MoveJ"
              $ 61 "Comment"
              # Comment
              $ 62 "If sp[0]<-0.84"
              if (sp[0]<-0.84):
                $ 63 "xback≔p[-0.84,sp[1],sp[2],sp[3],sp[4],sp[5]]"
                global xback=p[-0.84,sp[1],sp[2],sp[3],sp[4],sp[5]]
                $ 64 "MoveL"
                $ 65 "xback" "breakAfter"
                movel(xback, a=1.2, v=0.25)
              end
              $ 66 "Waypoint_67" "breakAfter"
              movej(get_inverse_kin(Waypoint_67_p, qnear=Waypoint_67_q), a=1.3962634015954636, v=1.0471975511965976)
            else:
              $ 67 "ElseIf jp[3]<0 and jp[4]<-3.14"
              if (jp[3]<0  and  jp[4]<-3.14):
                $ 68 "'if left side homing, special unspin'"
                # 'if left side homing, special unspin'
                $ 69 "MoveJ"
                $ 71 "Comment"
                # Comment
                $ 72 "Waypoint_69" "breakAfter"
                movej(get_inverse_kin(Waypoint_69_p, qnear=Waypoint_69_q), a=1.3962634015954636, v=1.0471975511965976)
                $ 73 "Waypoint_70" "breakAfter"
                movej(get_inverse_kin(Waypoint_70_p, qnear=Waypoint_70_q), a=1.3962634015954636, v=1.0471975511965976)
              else:
                $ 74 "ElseIf 2>1"
                if (2>1):
                  $ 75 "'if none of the other options, then error continuously'"
                  # 'if none of the other options, then error continuously'
                  $ 76 "Loop 2>1"
                  while (2>1):
                    $ 77 "Popup: Unknown Position. Find Calvin for Assistance"
                    popup("Unknown Position. Find Calvin for Assistance", "Message", False, False, blocking=True)
                  end
                end
              end
            end
          end
        end
      end
    end
    $ 78 "'insert logic for how to get back to oldhome'"
    # 'insert logic for how to get back to oldhome'
    $ 79 "'finish with oldhome then above then home'"
    # 'finish with oldhome then above then home'
    $ 80 "MoveJ"
    $ 81 "Waypoint_49" "breakAfter"
    movej(get_inverse_kin(Waypoint_49_p, qnear=Waypoint_49_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 82 "Waypoint_48" "breakAfter"
    movej(get_inverse_kin(Waypoint_48_p, qnear=Waypoint_48_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 83 "Home"
    movej([-3.266964260731834, -1.1426250499539599, 1.6915939489946439, 0.9363536077674468, -0.002476040516995681, -1.5388119856448528], a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 462 "Thread_1"
  thread Thread_1():
    while (True):
      $ 463 "Loop  True "
      while (  True  ):
        $ 464 "If freedrive_m_var≟ True "
        if (freedrive_m_var ==   True  ):
          $ 465 "freedrive_mode()"
          freedrive_mode()
        else:
          $ 466 "Else" "noBreak"
          $ 467 "end_freedrive_mode()"
          end_freedrive_mode()
        end
        $ 468 "sync()"
        sync()
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 469 "Thread_2"
  thread Thread_2():
    while (True):
      $ 470 "Loop  True "
      while (  True  ):
        $ 471 "If thread2trigger≟ True "
        if (thread2trigger ==   True  ):
          $ 472 "'do the dot extrude'"
          # 'do the dot extrude'
          $ 473 "Wait: 5.0"
          sleep(5.0)
          # begin: URCap Program Node
          #   Source: WireTank Serial, 4.8.0, WireTank, LLC
          #   Type: WireTank Serial
          $ 474 "Serial Bridge uR1"
          SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
          # end: URCap Program Node
          $ 475 "Wait: 2.0"
          sleep(2.0)
          # begin: URCap Program Node
          #   Source: WireTank Serial, 4.8.0, WireTank, LLC
          #   Type: WireTank Serial
          $ 476 "Serial Bridge uR0"
          SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
          # end: URCap Program Node
          $ 477 "thread2trigger≔ False "
          global thread2trigger=  False  
        end
        $ 478 "sync()"
        sync()
      end
    end
  end
  threadId_Thread_2 = run Thread_2()
  $ 84 "Robot Program"
  $ 85 "'start of main program'"
  # 'start of main program'
  $ 86 "Set"
  set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
  $ 87 "Home"
  movej([-3.266964260731834, -1.1426250499539599, 1.6915939489946439, 0.9363536077674468, -0.002476040516995681, -1.5388119856448528], a=1.3962634015954636, v=1.0471975511965976)
  $ 88 "MoveJ"
  $ 89 "Waypoint_46" "breakAfter"
  movej(get_inverse_kin(Waypoint_46_p, qnear=Waypoint_46_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 90 "leftchoice≔'Select Yes for a Left side weld, or select No for a Right Side weld.'"
  global leftchoice=request_boolean_from_primary_client("Select Yes for a Left side weld, or select No for a Right Side weld.")
  $ 91 "Set"
  set_tcp(p[0.0,-0.004,0.284,0.0,0.0,0.0])
  $ 92 "Test_Teach_Position()"
  Test_Teach_Position()
  $ 93 "Set"
  set_tcp(p[0.0,-0.004,0.284,0.0,0.0,0.0])
  $ 94 "Corner_Homing_45()"
  Corner_Homing_45()
  $ 95 "Set"
  set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
  $ 96 "extrude_knife3()"
  extrude_knife3()
  $ 97 "Script: analyze_touchpoints.script"
  # this file creates the function for analyzing touchpoints
  # define pi
  pi = 3.1415926535
  
  # this is the main entry point for calculations.
  # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
  # specifically for Down, Over, then Around (DOtA)
  # specifically for right-sided boxes (vertical weld on right side of edge)
  def main_calculate_right(p11, p12, p21, p22, p3, p13, p23):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
      struct2 = calculate_DOtA_points_right(struct1, list1)
      return struct2
  end
  
  # this is the main entry point for calculations.
  # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
  # specifically for Down, Over, then Around (DOtA)
  # specifically for left-sided boxes (vertical weld on left side of edge)
  def main_calculate_left(p11, p12, p21, p22, p3, p13, p23):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
      struct2 = calculate_DOtA_points_left(struct1, list1)
      return struct2
  end
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, pointapproach1, pointapproach2, point1, point2, point3, point4, point5, pointreturn1, heading1, heading2, heading3, path2r1, path2r2, path2l1, path2l2)
  # specifically for Around then Up (AtU)
  def analyze_touchpoints(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    # FIND THE FOUR POINTS ON THE LINES
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance = 8
    roundoverdistance = 0.05
    zup = .375
    # inches
    wd = welddistance * 25.4 / 1000
    rod = roundoverdistance * 25.4 / 1000
    zup = zup * 25.4 / 1000
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l1delxunit * wd
    y = yintersect + l1delyunit * wd
    z = zcoord + zup
  
    point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
  
    x = xintersect + l1delxunit * rod
    y = yintersect + l1delyunit * rod
  
    point2 = p[x,y,z,1.570796,0,0]
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l2delxunit * wd
    y = yintersect + l2delyunit * wd
  
    point5 = p[x,y,z,0,-1.570796,0]
  
    x = xintersect + l2delxunit * rod
    y = yintersect + l2delyunit * rod
  
    point4 = p[x,y,z,0,-1.570796,0]
  
    #DEFINE APPROACH POINTS
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
    pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
    pointapproach2 = p[point1[0], point1[1]+0.1, point1[2], point1[3], point1[4], point1[5]]
    pointreturn1 = p[point5[0]+0.1, point5[1], point5[2], point5[3], point5[4], point5[5]]
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #FIND POINT 3
    #see if we have to / can find point 3
    findpoint3 = True
    if roundoverdistance == 0:
      findpoint3 = False
    end
    if findpoint3:
      # i need to find the point3 such that the arc from p2 to p3 to p4 is tangent to p1-p2 and p4-p5. making this a smooth path will be good
      # the direction of movement is from pointintersect in the direction of heading2
      # how much movement though? this will depend on whether it is actually a 90 degree angle or not.
      # first, find the perpendicular lines through points 2 and 4
      perp2 = find_perpendicular_line(ml1, point2[0], point2[1])
      perp4 = find_perpendicular_line(ml2, point4[0], point4[1])
      # next, find the intersection of those two lines
      perpintersect = find_intersection(perp2[0], perp2[1], perp4[0], perp4[1])
      radiusofcircle = distance_between(perpintersect[0], perpintersect[1], 0, point2[0], point2[1], 0)
      # find a vector the direction of heading2
      uvx = cos(heading2)
      uvy = sin(heading2)
      # compute point3. pass in negative radius because the direction is into the tank but we want to move from the intersection out to the rounded edge.
      point3coords = add_vectordistance_to_point(perpintersect[0], perpintersect[1], z, uvx, uvy, 0, -1 * radiusofcircle)
      point3 = p[point3coords[0], point3coords[1], point3coords[2], 0, 0, 0]
    end
  
    #APPLY ACTUAL RXRYRZ TO POINTS
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    pointapproach1 = p[pointapproach1[0], pointapproach1[1], pointapproach1[2], rx, ry, rz]
    pointapproach2 = p[pointapproach2[0], pointapproach2[1], pointapproach2[2], rx, ry, rz]
    point1 = p[point1[0], point1[1], point1[2], rx, ry, rz]
    point2 = p[point2[0], point2[1], point2[2], rx, ry, rz]
    rxryrz = convert_heading_to_axang(heading2)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    if findpoint3:
      point3 = p[point3[0], point3[1], point3[2], rx, ry, rz]
    else:
      point3 = point2
    end
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point4 = p[point4[0], point4[1], point4[2], rx, ry, rz]
    point5 = p[point5[0], point5[1], point5[2], rx, ry, rz]
    pointreturn1 = p[pointreturn1[0], pointreturn1[1], pointreturn1[2], rx, ry, rz]
  
    #find path2 (the part that goes up)
    four_vertical_points = find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, zup, wd, heading1, heading3)
    path2r1 = four_vertical_points[0]
    path2r2 = four_vertical_points[1]
    path2l1 = four_vertical_points[2]
    path2l2 = four_vertical_points[3]
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, pointapproach1=pointapproach1, pointapproach2=pointapproach2, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, pointreturn1=pointreturn1, heading1=heading1, heading2=heading2, heading3=heading3, path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
    return ret
  end
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
  def analyze_touchpoints_only(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, heading1=heading1, heading2=heading2, heading3=heading3, l1delxunit=l1delxunit, l1delyunit=l1delyunit, l2delxunit=l2delxunit, l2delyunit=l2delyunit)
    return ret
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  def calculate_DOtA_points_right(struct1, listleans):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance1 = 8 # vertical weld distance
      welddistance2 = 6 # first path second leg
      welddistance3 = 8 # second path second leg
      zup = .375
      # inches
      wd1 = welddistance1 * 25.4 / 1000
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      zup = zup * 25.4 / 1000
  
      x = pointintersect[0] + l1delxunit * zup
      y = pointintersect[1] + l1delyunit * zup
      z = pointintersect[2] + zup
  
      #apply actual rxryrz to points
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l1delxunit * wd2
      y = y + l1delyunit * wd2
      point5 = p[x, y, z, rx, ry, rz]
  
      # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l1delxunit * (zup)
      y = pointintersect[1] + l1delyunit * zup
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_1 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l1delxunit * rod
      y = pointintersect[1] + l1delyunit * rod
      point_2 = p[x, y, z, rx, ry, rz]
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l2delxunit * wd3
      y = pointintersect[1] + l2delyunit * wd3
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_5 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l2delxunit * rod
      y = pointintersect[1] + l2delyunit * rod
      point_4 = p[x, y, z, rx, ry, rz]
  
      #FIND POINT 3
      # by calling analyze_touchpoints()
      atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
      point_3 = atret[5]
  
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
      return struct2
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  def calculate_DOtA_points_left(struct1, listleans):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance1 = 8 # vertical weld distance
      welddistance2 = 6 # first path second leg
      welddistance3 = 8 # second path second leg
      zup = .375
      # inches
      wd1 = welddistance1 * 25.4 / 1000
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      zup = zup * 25.4 / 1000
  
      x = pointintersect[0] + l2delxunit * zup
      y = pointintersect[1] + l2delyunit * zup
      z = pointintersect[2] + zup
  
      #apply actual rxryrz to points
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz]
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l2delxunit * wd2
      y = y + l2delyunit * wd2
      point5 = p[x, y, z, rx, ry, rz]
  
      # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l2delxunit * (zup)
      y = pointintersect[1] + l2delyunit * zup
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_1 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l2delxunit * rod
      y = pointintersect[1] + l2delyunit * rod
      point_2 = p[x, y, z, rx, ry, rz]
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l1delxunit * wd3
      y = pointintersect[1] + l1delyunit * wd3
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_5 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l1delxunit * rod
      y = pointintersect[1] + l1delyunit * rod
      point_4 = p[x, y, z, rx, ry, rz]
  
      #FIND POINT 3
      # by calling analyze_touchpoints()
      atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
      point_3 = atret[5]
      #point 3 will not have the correct rxryrz though because now the gun needs to be face up.
      rxryrz = convert_heading_to_axang_ccw(heading2)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_3 = p[point_3[0], point_3[1], point_3[2], rx, ry, rz]
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
      return struct2
  end
  
  # this function analyzes the vertical points
  # calculates the slope of the edge in question
  # specifically, for each inch up in the z direction, what is the change in x and change in y direction
  # returns a list of [nx, ny]
  def analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3):
      # first, find the equations of the planes from the 6 points
      plane1 = findplane(p11, p12, p13)
      plane2 = findplane(p21, p22, p23)
      # Find the Direction Vector of the Line: The direction vector d of the line of intersection can be found by taking the cross product of the normal vectors of each plane (a, b, and c)
      nx = plane1[1]*plane2[2] - plane1[2]*plane2[1]
      ny = plane1[2]*plane2[0] - plane1[0]*plane2[2]
      nz = plane1[0]*plane2[1] - plane1[1]*plane2[0]
      # normalize the vector so the z length is 1
      multiplier = 1 / nz
      nx = nx * multiplier
      ny = ny * multiplier
      nz = nz * multiplier # should become equal to 1
      ret = [nx, ny]
      return ret
  end
  
  # given 3 points, this finds the plane and its equation
  # rereturns ax + by + cz + d = 0 in a list of [a, b, c, d]
  def findplane(p11, p12, p13):
      # extract coordinates
      x1 = p11[0]
      y1 = p11[1]
      z1 = p11[2]
      x2 = p12[0]
      y2 = p12[1]
      z2 = p12[2]
      x3 = p13[0]
      y3 = p13[1]
      z3 = p13[2]
      # create vectors from the points
      v1x = x2-x1
      v1y = y2-y1
      v1z = z2-z1
      v2x = x3-x1
      v2y = y3-y1
      v2z = z3-z1
      #calculate the normal vector using the cross product
      nx = v1y*v2z - v1z*v2y # i component
      ny = v1z*v2x - v1x*v2z # j component
      nz = v1x*v2y - v1y*v2x # k component
      # calculate d in the plane equation
      d = -1 * (nx*x1 + ny*y1 + nz*z1)
      ret = [nx, ny, nz, d]
      return ret
  end
  
  # given a heading, (ccw from +x axis), find the mx+b slope
  # fails if exactly vertical
  def get_slope_from_heading(heading):
      return tan(heading)
  end
  
  
  
  # this function finds the points (and rxryrz) of the 2 points (start and end) of vertical weld section
  def find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, offset, wd, heading1, heading3):
  
    # find right side stuff
    # find the point in 3d space that is .375 up and .375 over
    x = pointintersect[0] + l1delxunit * offset
    y = pointintersect[1] + l1delyunit * offset
    z = pointintersect[2] + offset
    # find rxryrz
    rxryrz = convert_heading_to_axang_preheatup(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    path2r1 = p[x, y, z, rx, ry, rz]
    path2r2 = p[x, y, z + wd, rx, ry, rz]
  
    # find left side
    # find the point in 3d space that is .375 up and .375 over
    x = pointintersect[0] + l2delxunit * offset
    y = pointintersect[1] + l2delyunit * offset
    z = pointintersect[2] + offset
    # find rxryrz
    rxryrz = convert_heading_to_axang_preheatup(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    path2l1 = p[x, y, z, rx, ry, rz]
    path2l2 = p[x, y, z + wd, rx, ry, rz]
  
    ret = struct(path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
    return ret
  end
  
  # this function converts a unit vector to its heading angle ccw from x+ axis
  # takes uvx and uvy
  # returns heading in radians
  def convert_uv_to_heading(uvx, uvy):
    baseang = atan(uvy/uvx)
    if uvx < 0:
      ang = baseang + pi
    elif uvy < 0:
      ang = baseang + pi * 2
    else:
      ang = baseang
    end
    return ang
  end
  
  # this function finds the equation of a line, perpendicular to a given line, and going through a given point
  # takes 3 arguments: m (the original line's slope), x (point's x coord), y (point's y coord). the b of the original line is not needed
  # returns a list of [m,b] (the slope and intercept of the new line)
  def find_perpendicular_line(origm, x, y):
    m = (1/origm) * -1
    b = y - m*x
    ret = [m, b]
    return ret
  end
  
  # this function finds the intersection point between two lines in the xy plane
  # takes 4 arguments: m1, b1, m2, b2
  # returns a list of [x,y] (the point of intersection)
  def find_intersection(m1, b1, m2, b2):
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    x = (b2-b1) / (m1-m2)
    y = m1 * x + b1
    ret = [x, y]
    return ret
  end
  
  # this function finds the distance between 2 points in 3d space
  # it takes 6 arguments: x1, y1, z1, x2, y2, z2
  # it returns a distance
  def distance_between(x1, y1, z1, x2, y2, z2):
    distsquared = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)
    dist = sqrt(distsquared)
    return dist
  end
  
  # this function takes a point, a unit vector, and a distance, and adds the distance to the point in the direction of the unit vector (3d space)
  # it returns a point as a list of coordinates
  def add_vectordistance_to_point(xi, yi, zi, uvx, uvy, uvz, delta):
    xf = xi + uvx * delta
    yf = yi + uvy * delta
    zf = zi + uvz * delta
    ret = [xf, yf, zf]
    return ret
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the bottom side of the gun facing up.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang(heading):
   axisxraw = -1 * sin(heading)
   axisyraw = cos(heading) + 1
   axiszraw = sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing up. Used for welding in a vertical path.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_preheatup(heading):
   axisxraw = -sin(heading) + 1
   axisyraw = cos(heading)
   axiszraw = cos(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (-sin(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing down. Used for welding in a vertical path downwards.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_preheatdown(heading):
   axisxraw = -sin(heading) - 1
   axisyraw = cos(heading)
   axiszraw = -cos(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (sin(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing right. Used for welding counterclockwise around the box.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_ccw(heading):
   axisxraw = -sin(heading)
   axisyraw = cos(heading) - 1
   axiszraw = -sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (-cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function is for getting the points along the path of the corner homing 45
  # point0 is the point where they touched
  def get_corner_homing_45_pathpoints(point0):
    p0x = point0[0]
    p0y = point0[1]
    p0z = point0[2]
    p0rx = point0[3]
    p0ry = point0[4]
    p0rz = point0[5]
  
    #constants
    #distances of how far away from point the touchpoints are
    d0 = 0.10 # how far from the box to retreat and approach
    d1 = 0.03 # first distance from init point
    d2 = 0.15 # second distance from init point
    d3 = 0.125 #vertical distance from first point
    sqrt2 = 0.707106781 # 1/sqrt(2) , the inverse of the sqrt(2)
  
    ph1 = p[p0x + d0, p0y, p0z + d1, p0rx, p0ry, p0rz] #approach point for turn
  
    ph2 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y+d0*0.5+sqrt2*d1, p0z+d1, .445, -1.562, .483]
    ph3 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y+d0*0.5+sqrt2*d2, p0z+d1, .445, -1.562, .483]
    ph4 = p[p0x+d0-d0*0.5-sqrt2*d1, p0y-d0*0.5-sqrt2*d1, p0z+d1, 1.699, 3.576, 1.841]
    ph5 = p[p0x+d0-d0*0.5-sqrt2*d2, p0y-d0*0.5-sqrt2*d2, p0z+d1, 1.699, 3.576, 1.841]
  
    # go back to ph1
    ph6 = p[p0x + d0, p0y, p0z -0.05, 0, 0, 0] # approach point for under turn
    # moveL from ph1 to ph6
    ph7 = p[p0x-d1, p0y, p0z-0.05, 0, 0, 0]
  
    # add the vertical touch points
    ph2up = p[ph2[0], ph2[1], ph2[2]+d3, ph2[3], ph2[4], ph2[5]]
    ph4up = p[ph4[0], ph4[1], ph4[2]+d3, ph4[3], ph4[4], ph4[5]]
    ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4, ph5=ph5, ph6=ph6, ph7=ph7, ph2up=ph2up, ph4up=ph4up)
    return ret
  end
  $ 102 "If leftchoice≟ True "
  if (leftchoice ==   True  ):
    $ 103 "pathturn≔main_calculate_left(p11,p12,p21,p22,p3,p13,p23)"
    global pathturn=main_calculate_left(p11,p12,p21,p22,p3,p13,p23)
    $ 104 "Call move_path_3left"
    move_path_3left()
  else:
    $ 105 "Else" "noBreak"
    $ 106 "pathturn≔main_calculate_right(p11,p12,p21,p22,p3,p13,p23)"
    global pathturn=main_calculate_right(p11,p12,p21,p22,p3,p13,p23)
    $ 107 "move_path_3right()"
    move_path_3right()
  end
  $ 109 "MoveJ"
  $ 110 "Waypoint_46" "breakAfter"
  movej(get_inverse_kin(Waypoint_46_p, qnear=Waypoint_46_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 111 "Home"
  movej([-3.266964260731834, -1.1426250499539599, 1.6915939489946439, 0.9363536077674468, -0.002476040516995681, -1.5388119856448528], a=1.3962634015954636, v=1.0471975511965976)
end
