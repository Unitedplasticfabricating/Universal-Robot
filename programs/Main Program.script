def Main_Program():
  global _hidden_verificationVariable=0
  step_count_ef4628b7_3bf4_4344_8274_e41c2c4e5143 = 0.0
  thread Step_Counter_Thread_73ad19e4_304f_4293_8782_e512d608e2cc():
    while (True):
      step_count_ef4628b7_3bf4_4344_8274_e41c2c4e5143 = step_count_ef4628b7_3bf4_4344_8274_e41c2c4e5143 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_73ad19e4_304f_4293_8782_e512d608e2cc()
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[-0.0042110779091591305,-0.2798289119592719,0.10591607363377763,1.2092,-1.2092,1.2092])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(7.750000, [0.000000, -0.007000, 0.070000], [0.046720, 0.046720, 0.046720, 0.000000, 0.000000, 0.000000])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  global freedrive_m_var=  False  
  global Waypoint_22_p=p[-.161036555831, .970524399959, .722042384791, -.554954311189, .106465018540, .328580879483]
  global Waypoint_22_q=[-1.3071630636798304, -1.3366777312806626, 2.2083633581744593, 3.7187773424335937, -2.9519384543048304, 0.9132363796234131]
  global Waypoint_23_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_23_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_2_p=p[-.548957282596, .386284559177, .143710178207, 1.570800598292, -.000025190822, .000004803470]
  global Waypoint_2_q=[-1.0516188780414026, -1.010990933781006, 2.1562450567828577, -1.143702046280243, -1.0526168982135218, -0.0017235914813440445]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_3_p=p[.432120633847, .373496143704, .463992564600, -.000014136521, -3.141567738104, -.000014867905]
  global Waypoint_3_q=[-2.7853482405291956, -1.8143698177733363, 2.4549508730517786, -2.210560461083883, -1.5711315313922327, 1.9254603385925293]
  global Waypoint_4_p=p[.432136735069, .373501596410, .340883510249, -.000031606225, -3.141589553529, -.000013823620]
  global Waypoint_4_q=[-2.785483185444967, -1.6431261501707972, 2.568024222050802, -2.49489750484609, -1.5709694067584437, 1.9253177642822266]
  global Waypoint_5_p=p[.432160287104, .281352183882, .340893061994, .000015375091, 3.141574034920, .000032661568]
  global Waypoint_5_q=[-2.9616554419146937, -1.7250400982298792, 2.631975237523214, -2.4769565067686976, -1.5710294882403772, 1.7491776943206787]
  global Waypoint_6_p=p[.432128063058, .281346135716, .478493221894, .000013346378, -3.141574975494, -.000002942308]
  global Waypoint_6_q=[-2.961463991795675, -1.9219290218748988, 2.4929660002337855, -2.141019483605856, -1.571230713521139, 1.7493857145309448]
  global Waypoint_10_p=p[-.658264763546, .299530128456, .030909835036, .426821001551, -1.621505068649, .437070885767]
  global Waypoint_10_q=[-1.350241486226217, -0.9702387017062684, 2.492185179387228, -1.7834822140135707, -0.33723670641054326, 1.8489984273910522]
  global Waypoint_11_p=p[-.448862677341, .524599667441, -.175967040878, 2.473330473302, -1.874382924863, .205319206046]
  global Waypoint_11_q=[-1.1354392210589808, -1.0039964479259034, 2.441021744404928, -2.875528474847311, -1.6043828169452112, 1.7329596281051636]
  global Waypoint_12_p=p[-.542919433581, .212782147188, .086749705211, -.745950140780, -1.570054240894, -.808284086705]
  global Waypoint_12_q=[-0.26738197008241826, -1.11244489372287, 2.793460194264547, -1.547202582736947, -4.00090462366213, 1.5620925426483154]
  global Waypoint_13_p=p[-.542919433581, .212782147188, .086749705211, -.745950140780, -1.570054240894, -.808284086705]
  global Waypoint_13_q=[-0.26738197008241826, -1.11244489372287, 2.793460194264547, -1.547202582736947, -4.00090462366213, 1.5620925426483154]
  global Waypoint_14_p=p[-.448862677341, .524599667441, -.175967040878, 2.473330473302, -1.874382924863, .205319206046]
  global Waypoint_14_q=[-1.1354392210589808, -1.0039964479259034, 2.441021744404928, -2.875528474847311, -1.6043828169452112, 1.7329596281051636]
  global Waypoint_15_p=p[-.658264763546, .299530128456, .030909835036, .426821001551, -1.621505068649, .437070885767]
  global Waypoint_15_q=[-1.350241486226217, -0.9702387017062684, 2.492185179387228, -1.7834822140135707, -0.33723670641054326, 1.8489984273910522]
  global Waypoint_16_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_16_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  global Waypoint_17_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_17_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  global Waypoint_18_p=p[-.658264763546, .299530128456, .030909835036, .426821001551, -1.621505068649, .437070885767]
  global Waypoint_18_q=[-1.350241486226217, -0.9702387017062684, 2.492185179387228, -1.7834822140135707, -0.33723670641054326, 1.8489984273910522]
  def move_path_3():
    $ 20 "move_path_3" "noBreak"
    $ 21 "'this is the path for Down, Over, then Back Around'"
    # 'this is the path for Down, Over, then Back Around'
    $ 22 "Comment"
    # Comment
    $ 23 "Home"
    movej([-3.523764549353853, -1.8742328384451357, 2.4457816539194326, 0.058650484450722296, -0.22275931369636837, -0.6273979632655688], a=1.3962634015954636, v=1.0471975511965976)
    $ 24 "MoveJ"
    $ 25 "Waypoint_22" "breakAfter"
    movej(get_inverse_kin(Waypoint_22_p, qnear=Waypoint_22_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 26 "Waypoint_23" "breakAfter"
    movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 31 "Comment"
    # Comment
    $ 32 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 33 "MoveJ"
    $ 34 "p1" "breakAfter"
    movej(p1, a=1.3962634015954636, v=1.0471975511965976)
    $ 35 "Comment"
    # Comment
    $ 36 "Comment"
    # Comment
  end
  def Test_Teach_Position():
    $ 78 "Test_Teach_Position" "noBreak"
    $ 79 "Home"
    movej([-3.523764549353853, -1.8742328384451357, 2.4457816539194326, 0.058650484450722296, -0.22275931369636837, -0.6273979632655688], a=1.3962634015954636, v=1.0471975511965976)
    $ 83 "MoveJ"
    $ 84 "Waypoint_2" "breakAfter"
    set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 85 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 86 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 87 "Popup: Move the robot to the peg center, then click 'Continue'"
    popup("Move the robot to the peg center, then click 'Continue'", "Message", False, False, blocking=True)
    $ 88 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 89 "Wait: 0.25"
    sleep(0.25)
    $ 90 "sync()"
    sync()
    $ 91 "tcp_pose≔get_actual_joint_positions()"
    global tcp_pose= get_actual_joint_positions ()
  end
  def Corner_Homing_BRB():
    $ 134 "Corner_Homing_BRB" "noBreak"
    $ 135 "'Use this program when tool is already positioned close to corner (back right bottom corner)'"
    # 'Use this program when tool is already positioned close to corner (back right bottom corner)'
    $ 136 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
    # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
    $ 137 "align_tcp_left()"
    align_tcp_left()
    $ 138 "'right side'"
    # 'right side'
    $ 139 "MoveL"
    $ 140 "Direction: Base X-"
    global move_thread_flag_140=0
    thread move_thread_140():
      enter_critical
      move_thread_flag_140 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_140 = 2
      exit_critical
    end
    move_thread_flag_140 = 0
    move_thread_han_140 = run move_thread_140()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_140 > 1):
        join move_thread_han_140
        $ 141 "Until (distance)"
        break
      end
      sync()
    end
    $ 142 "MoveL"
    $ 143 "Direction: Base Y-"
    global move_thread_flag_143=0
    thread move_thread_143():
      enter_critical
      move_thread_flag_143 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_143 = 2
      exit_critical
    end
    move_thread_flag_143 = 0
    move_thread_han_143 = run move_thread_143()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_143
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 144 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 145 "p11≔get_actual_tcp_pose()"
    global p11= get_actual_tcp_pose ()
    $ 146 "MoveL"
    $ 147 "Direction: Base Y+"
    global move_thread_flag_147=0
    thread move_thread_147():
      enter_critical
      move_thread_flag_147 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_147 = 2
      exit_critical
    end
    move_thread_flag_147 = 0
    move_thread_han_147 = run move_thread_147()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_147 > 1):
        join move_thread_han_147
        $ 148 "Until (distance)"
        break
      end
      sync()
    end
    $ 149 "MoveL"
    $ 150 "Direction: Base X-"
    global move_thread_flag_150=0
    thread move_thread_150():
      enter_critical
      move_thread_flag_150 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.15)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_150 = 2
      exit_critical
    end
    move_thread_flag_150 = 0
    move_thread_han_150 = run move_thread_150()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_150 > 1):
        join move_thread_han_150
        $ 151 "Until (distance)"
        break
      end
      sync()
    end
    $ 152 "MoveL"
    $ 153 "Direction: Base Y-"
    global move_thread_flag_153=0
    thread move_thread_153():
      enter_critical
      move_thread_flag_153 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_153 = 2
      exit_critical
    end
    move_thread_flag_153 = 0
    move_thread_han_153 = run move_thread_153()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_153
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 154 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 155 "p12≔get_actual_tcp_pose()"
    global p12= get_actual_tcp_pose ()
    $ 156 "MoveL"
    $ 157 "Direction: Base Y+"
    global move_thread_flag_157=0
    thread move_thread_157():
      enter_critical
      move_thread_flag_157 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_157 = 2
      exit_critical
    end
    move_thread_flag_157 = 0
    move_thread_han_157 = run move_thread_157()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_157 > 1):
        join move_thread_han_157
        $ 158 "Until (distance)"
        break
      end
      sync()
    end
    $ 159 "MoveL"
    $ 160 "Direction: Base X+"
    global move_thread_flag_160=0
    thread move_thread_160():
      enter_critical
      move_thread_flag_160 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.3)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_160 = 2
      exit_critical
    end
    move_thread_flag_160 = 0
    move_thread_han_160 = run move_thread_160()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_160 > 1):
        join move_thread_han_160
        $ 161 "Until (distance)"
        break
      end
      sync()
    end
    $ 162 "align_tcp_forward()"
    align_tcp_forward()
    $ 163 "'back side'"
    # 'back side'
    $ 164 "MoveL"
    $ 165 "Direction: Base Y-"
    global move_thread_flag_165=0
    thread move_thread_165():
      enter_critical
      move_thread_flag_165 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_165 = 2
      exit_critical
    end
    move_thread_flag_165 = 0
    move_thread_han_165 = run move_thread_165()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_165 > 1):
        join move_thread_han_165
        $ 166 "Until (distance)"
        break
      end
      sync()
    end
    $ 167 "MoveL"
    $ 168 "Direction: Base X-"
    global move_thread_flag_168=0
    thread move_thread_168():
      enter_critical
      move_thread_flag_168 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_168 = 2
      exit_critical
    end
    move_thread_flag_168 = 0
    move_thread_han_168 = run move_thread_168()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_168
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 169 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 170 "p21≔get_actual_tcp_pose()"
    global p21= get_actual_tcp_pose ()
    $ 171 "MoveL"
    $ 172 "Direction: Base X+"
    global move_thread_flag_172=0
    thread move_thread_172():
      enter_critical
      move_thread_flag_172 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_172 = 2
      exit_critical
    end
    move_thread_flag_172 = 0
    move_thread_han_172 = run move_thread_172()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_172 > 1):
        join move_thread_han_172
        $ 173 "Until (distance)"
        break
      end
      sync()
    end
    $ 174 "MoveL"
    $ 175 "Direction: Base Y-"
    global move_thread_flag_175=0
    thread move_thread_175():
      enter_critical
      move_thread_flag_175 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.15)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_175 = 2
      exit_critical
    end
    move_thread_flag_175 = 0
    move_thread_han_175 = run move_thread_175()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_175 > 1):
        join move_thread_han_175
        $ 176 "Until (distance)"
        break
      end
      sync()
    end
    $ 177 "MoveL"
    $ 178 "Direction: Base X-"
    global move_thread_flag_178=0
    thread move_thread_178():
      enter_critical
      move_thread_flag_178 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_178 = 2
      exit_critical
    end
    move_thread_flag_178 = 0
    move_thread_han_178 = run move_thread_178()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_178
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 179 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 180 "p22≔get_actual_tcp_pose()"
    global p22= get_actual_tcp_pose ()
    $ 181 "MoveL"
    $ 182 "Direction: Base X+"
    global move_thread_flag_182=0
    thread move_thread_182():
      enter_critical
      move_thread_flag_182 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_182 = 2
      exit_critical
    end
    move_thread_flag_182 = 0
    move_thread_han_182 = run move_thread_182()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_182 > 1):
        join move_thread_han_182
        $ 183 "Until (distance)"
        break
      end
      sync()
    end
    $ 184 "'regroup for up turn'"
    # 'regroup for up turn'
    $ 185 "MoveL"
    $ 186 "Direction: Base X+"
    global move_thread_flag_186=0
    thread move_thread_186():
      enter_critical
      move_thread_flag_186 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_186 = 2
      exit_critical
    end
    move_thread_flag_186 = 0
    move_thread_han_186 = run move_thread_186()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_186 > 1):
        join move_thread_han_186
        $ 187 "Until (distance)"
        break
      end
      sync()
    end
    $ 188 "Direction: Base Y+"
    global move_thread_flag_188=0
    thread move_thread_188():
      enter_critical
      move_thread_flag_188 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.5)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_188 = 2
      exit_critical
    end
    move_thread_flag_188 = 0
    move_thread_han_188 = run move_thread_188()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_188 > 1):
        join move_thread_han_188
        $ 189 "Until (distance)"
        break
      end
      sync()
    end
    $ 190 "MoveL"
    $ 191 "Direction: Base Z-"
    global move_thread_flag_191=0
    thread move_thread_191():
      enter_critical
      move_thread_flag_191 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_191 = 2
      exit_critical
    end
    move_thread_flag_191 = 0
    move_thread_han_191 = run move_thread_191()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_191 > 1):
        join move_thread_han_191
        $ 192 "Until (distance)"
        break
      end
      sync()
    end
    $ 193 "align_tcp_up()"
    align_tcp_up()
    $ 194 "MoveL"
    $ 195 "Direction: Base X-"
    global move_thread_flag_195=0
    thread move_thread_195():
      enter_critical
      move_thread_flag_195 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.25)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_195 = 2
      exit_critical
    end
    move_thread_flag_195 = 0
    move_thread_han_195 = run move_thread_195()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_195 > 1):
        join move_thread_han_195
        $ 196 "Until (distance)"
        break
      end
      sync()
    end
    $ 197 "Direction: Base Y-"
    global move_thread_flag_197=0
    thread move_thread_197():
      enter_critical
      move_thread_flag_197 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.34)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_197 = 2
      exit_critical
    end
    move_thread_flag_197 = 0
    move_thread_han_197 = run move_thread_197()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_197 > 1):
        join move_thread_han_197
        $ 198 "Until (distance)"
        break
      end
      sync()
    end
    $ 199 "'bottom side'"
    # 'bottom side'
    $ 200 "MoveL"
    $ 201 "Direction: Base Z+"
    global move_thread_flag_201=0
    thread move_thread_201():
      enter_critical
      move_thread_flag_201 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_201 = 2
      exit_critical
    end
    move_thread_flag_201 = 0
    move_thread_han_201 = run move_thread_201()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_201
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 202 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 203 "p3≔get_actual_tcp_pose()"
    global p3= get_actual_tcp_pose ()
    $ 204 "MoveL"
    $ 205 "Direction: Base Z-"
    global move_thread_flag_205=0
    thread move_thread_205():
      enter_critical
      move_thread_flag_205 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_205 = 2
      exit_critical
    end
    move_thread_flag_205 = 0
    move_thread_han_205 = run move_thread_205()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_205 > 1):
        join move_thread_han_205
        $ 206 "Until (distance)"
        break
      end
      sync()
    end
    $ 207 "MoveL"
    $ 208 "Direction: Base X+"
    global move_thread_flag_208=0
    thread move_thread_208():
      enter_critical
      move_thread_flag_208 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_208 = 2
      exit_critical
    end
    move_thread_flag_208 = 0
    move_thread_han_208 = run move_thread_208()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_208 > 1):
        join move_thread_han_208
        $ 209 "Until (distance)"
        break
      end
      sync()
    end
    $ 210 "Direction: Base Y+"
    global move_thread_flag_210=0
    thread move_thread_210():
      enter_critical
      move_thread_flag_210 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_210 = 2
      exit_critical
    end
    move_thread_flag_210 = 0
    move_thread_han_210 = run move_thread_210()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_210 > 1):
        join move_thread_han_210
        $ 211 "Until (distance)"
        break
      end
      sync()
    end
  end
  def extrude_knife():
    $ 212 "extrude_knife" "noBreak"
    $ 213 "'Move to bucket'"
    # 'Move to bucket'
    $ 214 "MoveJ"
    $ 215 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 216 "MoveL"
    $ 217 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=1.2, v=0.25)
    $ 218 "'extrude out a foot'"
    # 'extrude out a foot'
    $ 219 "Wait: 6.0"
    sleep(6.0)
    $ 220 "MoveL"
    $ 221 "'slice over knife'"
    # 'slice over knife'
    $ 222 "Waypoint_5" "breakAfter"
    movel(Waypoint_5_p, a=1.2, v=0.04)
    $ 223 "MoveL"
    $ 224 "Waypoint_6" "breakAfter"
    movel(Waypoint_6_p, a=1.2, v=0.25)
    $ 225 "'raise up away from knife'"
    # 'raise up away from knife'
    $ 226 "Home"
    movej([-3.523764549353853, -1.8742328384451357, 2.4457816539194326, 0.058650484450722296, -0.22275931369636837, -0.6273979632655688], a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_left():
    $ 227 "align_tcp_left" "noBreak"
    $ 228 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 229 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 230 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 231 "MoveJ"
    $ 232 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_forward():
    $ 233 "align_tcp_forward" "noBreak"
    $ 234 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 235 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 236 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 237 "MoveJ"
    $ 238 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_up():
    $ 239 "align_tcp_up" "noBreak"
    $ 240 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 241 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 242 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 243 "MoveJ"
    $ 244 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def Corner_Homing_45():
    $ 245 "Corner_Homing_45" "noBreak"
    $ 246 "'Use this program when tool is already positioned close to corner at 45deg'"
    # 'Use this program when tool is already positioned close to corner at 45deg'
    $ 247 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
    # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
    $ 248 "Set"
    set_tcp(p[-0.0032389957884720044,-0.045696511022507505,0.25739827382857544,0.0,0.0,0.0])
    $ 249 "'dummy move below for debug'"
    # 'dummy move below for debug'
    $ 254 "Wait: 1.0"
    sleep(1.0)
    $ 255 "tp≔get_actual_tcp_pose()"
    global tp= get_actual_tcp_pose ()
    $ 256 "Script: analyze_touchpoints.script"
    # this file creates the function for analyzing touchpoints
    # define pi
    pi = 3.1415926535
    
    # this is the main entry point for calculations.
    # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
    # specifically for Down, Over, then Around (DOtA)
    # specifically for right-sided boxes (vertical weld on right side of edge
    def main_calculate_right(p11, p12, p21, p22, p3):
        struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
        struct2 = calculate_DOtA_points(struct1)
        return struct2
    end
    
    # it takes 5 arguments as points
    # it returns a struct containing: (pointintersect, pointapproach1, pointapproach2, point1, point2, point3, point4, point5, pointreturn1, heading1, heading2, heading3, path2r1, path2r2, path2l1, path2l2)
    # specifically for Around then Up (AtU)
    def analyze_touchpoints(p11, p12, p21, p22, p3):
      # FIND THE INTERSECTION
      # comment get the z
      zcoord=p3[2]
    
      # get the raw points from the first line
      l1p1x=p11[0]
      l1p1y=p11[1]
      l1p2x=p12[0]
      l1p2y=p12[1]
    
      # equate the first line in 2d space
      ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
    
      # b = y - mx
      bl1 = l1p1y - ml1 * l1p1x
    
      # get the raw points from the second line
      l2p1x=p21[0]
      l2p1y=p21[1]
      l2p2x=p22[0]
      l2p2y=p22[1]
    
      # equate the second line in 2d space
      ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
    
      # b = y - mx
      bl2 = l2p1y - ml2 * l2p1x
    
    
      # find the intersection of the two lines
      # m1x+b1 = m2x+b2
      # m1x - m2x = b2 - b1
      # x = (b2-b1) / (m1-m2)
      xintersect = (bl2-bl1) / (ml1-ml2)
      yintersect = ml1 * xintersect + bl1
    
      #FIND THE VECTORS
      #define a vector from the intersection to the second point on the first line
      l1delxfull = l1p2x - xintersect
      l1delyfull = l1p2y - yintersect
    
      l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
    
      l1delxunit = l1delxfull / l1delmag
      l1delyunit = l1delyfull / l1delmag
    
      #define a vector from the intersection to the second point on the second line
      l2delxfull = l2p2x - xintersect
      l2delyfull = l2p2y - yintersect
    
      l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
    
      l2delxunit = l2delxfull / l2delmag
      l2delyunit = l2delyfull / l2delmag
    
      # FIND THE FOUR POINTS ON THE LINES
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance = 8
      roundoverdistance = 0.05
      zup = .375
      # inches
      wd = welddistance * 25.4 / 1000
      rod = roundoverdistance * 25.4 / 1000
      zup = zup * 25.4 / 1000
    
      # now we have the unit vector. extend the weld distance from the intersection
      x = xintersect + l1delxunit * wd
      y = yintersect + l1delyunit * wd
      z = zcoord + zup
    
      point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
    
      x = xintersect + l1delxunit * rod
      y = yintersect + l1delyunit * rod
    
      point2 = p[x,y,z,1.570796,0,0]
    
      # now we have the unit vector. extend the weld distance from the intersection
      x = xintersect + l2delxunit * wd
      y = yintersect + l2delyunit * wd
    
      point5 = p[x,y,z,0,-1.570796,0]
    
      x = xintersect + l2delxunit * rod
      y = yintersect + l2delyunit * rod
    
      point4 = p[x,y,z,0,-1.570796,0]
    
      #DEFINE APPROACH POINTS
      pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
      pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
      pointapproach2 = p[point1[0], point1[1]+0.1, point1[2], point1[3], point1[4], point1[5]]
      pointreturn1 = p[point5[0]+0.1, point5[1], point5[2], point5[3], point5[4], point5[5]]
    
      #FIND HEADINGS
      #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
      headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
      headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
      # find halfway heading
      heading2 = (headingvector1 + headingvector2)/2
      # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
      heading1 = headingvector1 + pi/2
      heading3 = headingvector2 - pi/2
    
      #FIND POINT 3
      #see if we have to / can find point 3
      findpoint3 = True
      if roundoverdistance == 0:
        findpoint3 = False
      end
      if findpoint3:
        # i need to find the point3 such that the arc from p2 to p3 to p4 is tangent to p1-p2 and p4-p5. making this a smooth path will be good
        # the direction of movement is from pointintersect in the direction of heading2
        # how much movement though? this will depend on whether it is actually a 90 degree angle or not.
        # first, find the perpendicular lines through points 2 and 4
        perp2 = find_perpendicular_line(ml1, point2[0], point2[1])
        perp4 = find_perpendicular_line(ml2, point4[0], point4[1])
        # next, find the intersection of those two lines
        perpintersect = find_intersection(perp2[0], perp2[1], perp4[0], perp4[1])
        radiusofcircle = distance_between(perpintersect[0], perpintersect[1], 0, point2[0], point2[1], 0)
        # find a vector the direction of heading2
        uvx = cos(heading2)
        uvy = sin(heading2)
        # compute point3. pass in negative radius because the direction is into the tank but we want to move from the intersection out to the rounded edge.
        point3coords = add_vectordistance_to_point(perpintersect[0], perpintersect[1], z, uvx, uvy, 0, -1 * radiusofcircle)
        point3 = p[point3coords[0], point3coords[1], point3coords[2], 0, 0, 0]
      end
    
      #APPLY ACTUAL RXRYRZ TO POINTS
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      pointapproach1 = p[pointapproach1[0], pointapproach1[1], pointapproach1[2], rx, ry, rz]
      pointapproach2 = p[pointapproach2[0], pointapproach2[1], pointapproach2[2], rx, ry, rz]
      point1 = p[point1[0], point1[1], point1[2], rx, ry, rz]
      point2 = p[point2[0], point2[1], point2[2], rx, ry, rz]
      rxryrz = convert_heading_to_axang(heading2)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      if findpoint3:
        point3 = p[point3[0], point3[1], point3[2], rx, ry, rz]
      else:
        point3 = point2
      end
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point4 = p[point4[0], point4[1], point4[2], rx, ry, rz]
      point5 = p[point5[0], point5[1], point5[2], rx, ry, rz]
      pointreturn1 = p[pointreturn1[0], pointreturn1[1], pointreturn1[2], rx, ry, rz]
    
      #find path2 (the part that goes up)
      four_vertical_points = find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, zup, wd, heading1, heading3)
      path2r1 = four_vertical_points[0]
      path2r2 = four_vertical_points[1]
      path2l1 = four_vertical_points[2]
      path2l2 = four_vertical_points[3]
    
      #RETURN STRUCT
      ret = struct(pointintersect=pointintersect, pointapproach1=pointapproach1, pointapproach2=pointapproach2, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, pointreturn1=pointreturn1, heading1=heading1, heading2=heading2, heading3=heading3, path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
      return ret
    end
    
    # it takes 5 arguments as points
    # it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
    def analyze_touchpoints_only(p11, p12, p21, p22, p3):
      # FIND THE INTERSECTION
      # comment get the z
      zcoord=p3[2]
    
      # get the raw points from the first line
      l1p1x=p11[0]
      l1p1y=p11[1]
      l1p2x=p12[0]
      l1p2y=p12[1]
    
      # equate the first line in 2d space
      ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
    
      # b = y - mx
      bl1 = l1p1y - ml1 * l1p1x
    
      # get the raw points from the second line
      l2p1x=p21[0]
      l2p1y=p21[1]
      l2p2x=p22[0]
      l2p2y=p22[1]
    
      # equate the second line in 2d space
      ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
    
      # b = y - mx
      bl2 = l2p1y - ml2 * l2p1x
    
    
      # find the intersection of the two lines
      # m1x+b1 = m2x+b2
      # m1x - m2x = b2 - b1
      # x = (b2-b1) / (m1-m2)
      xintersect = (bl2-bl1) / (ml1-ml2)
      yintersect = ml1 * xintersect + bl1
    
      pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
    
      #FIND THE VECTORS
      #define a vector from the intersection to the second point on the first line
      l1delxfull = l1p2x - xintersect
      l1delyfull = l1p2y - yintersect
    
      l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
    
      l1delxunit = l1delxfull / l1delmag
      l1delyunit = l1delyfull / l1delmag
    
      #define a vector from the intersection to the second point on the second line
      l2delxfull = l2p2x - xintersect
      l2delyfull = l2p2y - yintersect
    
      l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
    
      l2delxunit = l2delxfull / l2delmag
      l2delyunit = l2delyfull / l2delmag
    
      #FIND HEADINGS
      #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
      headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
      headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
      # find halfway heading
      heading2 = (headingvector1 + headingvector2)/2
      # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
      heading1 = headingvector1 + pi/2
      heading3 = headingvector2 - pi/2
    
      #RETURN STRUCT
      ret = struct(pointintersect=pointintersect, heading1=heading1, heading2=heading2, heading3=heading3, l1delxunit=l1delxunit, l1delyunit=l1delyunit, l2delxunit=l2delxunit, l2delyunit=l2delyunit)
      return ret
    end
    
    # given a struct from analyze_touchpoints_only(), calculate the points
    def calculate_DOtA_points(struct1):
        # get the stuff from the struct
        pointintersect = struct1[0]
        heading1 = struct1[1]
        heading2 = struct1[2]
        heading3 = struct1[3]
        l1delxunit = struct1[4]
        l1delyunit = struct1[5]
        l2delxunit = struct1[6]
        l2delyunit = struct1[7]
    
        # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
        # find locations 8 inches away from  intersect point
        # CONST
        welddistance = 8
        zup = .375
        # inches
        wd = welddistance * 25.4 / 1000
        zup = zup * 25.4 / 1000
    
        x = pointintersect[0] + l1delxunit * zup
        y = pointintersect[1] + l1delyunit * zup
        z = pointintersect[2] + zup
    
        #APPLY ACTUAL RXRYRZ TO POINTS
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang_preheatdown(heading1)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
    
        point1 = p[x, y, z + wd, rx, ry, rz]
        point2 = p[x, y, z, rx, ry, rz]
    
        # convert the headings to rxryrz and insert those values into the relevant points
        rxryrz = convert_heading_to_axang_ccw(heading1)
        rx = rxryrz[0]
        ry = rxryrz[1]
        rz = rxryrz[2]
    
        point4 = p[x, y, z, rx, ry, rz]
        x = x + l1delxunit * wd
        y = y + l1delyunit * wd
        point5 = p[x, y, z, rx, ry, rz]
    
    
    
    
        roundoverdistance = 0.05
        rod = roundoverdistance * 25.4 / 1000
    
        struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5)
        return struct2
    end
    
    # this function finds the points (and rxryrz) of the 2 points (start and end) of vertical weld section
    def find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, offset, wd, heading1, heading3):
    
      # find right side stuff
      # find the point in 3d space that is .375 up and .375 over
      x = pointintersect[0] + l1delxunit * offset
      y = pointintersect[1] + l1delyunit * offset
      z = pointintersect[2] + offset
      # find rxryrz
      rxryrz = convert_heading_to_axang_preheatup(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      path2r1 = p[x, y, z, rx, ry, rz]
      path2r2 = p[x, y, z + wd, rx, ry, rz]
    
      # find left side
      # find the point in 3d space that is .375 up and .375 over
      x = pointintersect[0] + l2delxunit * offset
      y = pointintersect[1] + l2delyunit * offset
      z = pointintersect[2] + offset
      # find rxryrz
      rxryrz = convert_heading_to_axang_preheatup(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      path2l1 = p[x, y, z, rx, ry, rz]
      path2l2 = p[x, y, z + wd, rx, ry, rz]
    
      ret = struct(path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
      return ret
    end
    
    # this function converts a unit vector to its heading angle ccw from x+ axis
    # takes uvx and uvy
    # returns heading in radians
    def convert_uv_to_heading(uvx, uvy):
      baseang = atan(uvy/uvx)
      if uvx < 0:
        ang = baseang + pi
      elif uvy < 0:
        ang = baseang + pi * 2
      else:
        ang = baseang
      end
      return ang
    end
    
    # this function finds the equation of a line, perpendicular to a given line, and going through a given point
    # takes 3 arguments: m (the original line's slope), x (point's x coord), y (point's y coord). the b of the original line is not needed
    # returns a list of [m,b] (the slope and intercept of the new line)
    def find_perpendicular_line(origm, x, y):
      m = (1/origm) * -1
      b = y - m*x
      ret = [m, b]
      return ret
    end
    
    # this function finds the intersection point between two lines in the xy plane
    # takes 4 arguments: m1, b1, m2, b2
    # returns a list of [x,y] (the point of intersection)
    def find_intersection(m1, b1, m2, b2):
      # m1x+b1 = m2x+b2
      # m1x - m2x = b2 - b1
      # x = (b2-b1) / (m1-m2)
      x = (b2-b1) / (m1-m2)
      y = m1 * x + b1
      ret = [x, y]
      return ret
    end
    
    # this function finds the distance between 2 points in 3d space
    # it takes 6 arguments: x1, y1, z1, x2, y2, z2
    # it returns a distance
    def distance_between(x1, y1, z1, x2, y2, z2):
      distsquared = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)
      dist = sqrt(distsquared)
      return dist
    end
    
    # this function takes a point, a unit vector, and a distance, and adds the distance to the point in the direction of the unit vector (3d space)
    # it returns a point as a list of coordinates
    def add_vectordistance_to_point(xi, yi, zi, uvx, uvy, uvz, delta):
      xf = xi + uvx * delta
      yf = yi + uvy * delta
      zf = zi + uvz * delta
      ret = [xf, yf, zf]
      return ret
    end
    
    # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
    # this will point the gun in this heading with the bottom side of the gun facing up.
    # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
    def convert_heading_to_axang(heading):
     axisxraw = -1 * sin(heading)
     axisyraw = cos(heading) + 1
     axiszraw = sin(heading)
    
     magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    
     axisxunit = axisxraw / magnitude
     axisyunit = axisyraw / magnitude
     axiszunit = axiszraw / magnitude
    
     angle = acos( (cos(heading) - 1) / 2 )
    
     rxout = axisxunit * angle
     ryout = axisyunit * angle
     rzout = axiszunit * angle
    
     return [rxout, ryout, rzout]
    end
    
    # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
    # this will point the gun in this heading with the preheat side of the gun tip facing up. Used for welding in a vertical path.
    # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
    def convert_heading_to_axang_preheatup(heading):
     axisxraw = -sin(heading) + 1
     axisyraw = cos(heading)
     axiszraw = cos(heading)
    
     magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    
     axisxunit = axisxraw / magnitude
     axisyunit = axisyraw / magnitude
     axiszunit = axiszraw / magnitude
    
     angle = acos( (-sin(heading) - 1) / 2 )
    
     rxout = axisxunit * angle
     ryout = axisyunit * angle
     rzout = axiszunit * angle
    
     return [rxout, ryout, rzout]
    end
    
    # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
    # this will point the gun in this heading with the preheat side of the gun tip facing down. Used for welding in a vertical path downwards.
    # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
    def convert_heading_to_axang_preheatdown(heading):
     axisxraw = -sin(heading) - 1
     axisyraw = cos(heading)
     axiszraw = -cos(heading)
    
     magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    
     axisxunit = axisxraw / magnitude
     axisyunit = axisyraw / magnitude
     axiszunit = axiszraw / magnitude
    
     angle = acos( (sin(heading) - 1) / 2 )
    
     rxout = axisxunit * angle
     ryout = axisyunit * angle
     rzout = axiszunit * angle
    
     return [rxout, ryout, rzout]
    end
    
    # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
    # this will point the gun in this heading with the preheat side of the gun tip facing right. Used for welding counterclockwise around the box.
    # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
    def convert_heading_to_axang_ccw(heading):
     axisxraw = -sin(heading)
     axisyraw = cos(heading) - 1
     axiszraw = -sin(heading)
    
     magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
    
     axisxunit = axisxraw / magnitude
     axisyunit = axisyraw / magnitude
     axiszunit = axiszraw / magnitude
    
     angle = acos( (-cos(heading) - 1) / 2 )
    
     rxout = axisxunit * angle
     ryout = axisyunit * angle
     rzout = axiszunit * angle
    
     return [rxout, ryout, rzout]
    end
    
    # this function is for getting the points along the path of the corner homing 45
    # point0 is the point where they touched
    def get_corner_homing_45_pathpoints(point0):
      p0x = point0[0]
      p0y = point0[1]
      p0z = point0[2]
      p0rx = point0[3]
      p0ry = point0[4]
      p0rz = point0[5]
    
      #constants
      #distances of how far away from point the touchpoints are
      d0 = 0.15 # how far from the box to retreat and approach
      d1 = 0.05
      d2 = 0.2
      sqrt2 = 0.707106781
    
      ph1 = p[p0x + d0, p0y, p0z + .05, p0rx, p0ry, p0rz] #approach point for turn
    
      ph2 = p[p0x+d0-d0*sqrt2-sqrt2*d1, p0y+d0*sqrt2+sqrt2*d1, p0z+.05, .445, -1.562, .483]
      ph3 = p[p0x+d0-d0*sqrt2-sqrt2*d2, p0y+d0*sqrt2+sqrt2*d2, p0z+.05, .445, -1.562, .483]
      ph4 = p[p0x+d0-d0*sqrt2-sqrt2*d1, p0y-d0*sqrt2-sqrt2*d1, p0z+.05, 1.699, 3.576, 1.841]
      ph5 = p[p0x+d0-d0*sqrt2-sqrt2*d2, p0y-d0*sqrt2-sqrt2*d2, p0z+.05, 1.699, 3.576, 1.841]
    
      # go back to ph1
      ph6 = p[p0x + .05, p0y, p0z -.05, 0, 0, 0] # approach point for under turn
      # moveL from ph1 to ph6
      ph7 = p[p0x-.05, p0y, p0z-.05, 0, 0, 0]
      ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4, ph5=ph5, ph6=ph6, ph7=ph7)
      return ret
    end
    $ 257 "path_pre≔get_corner_homing_45_pathpoints(tp)"
    global path_pre=get_corner_homing_45_pathpoints(tp)
    $ 258 "ph1≔path_pre[0]"
    global ph1=path_pre[0]
    $ 259 "ph2≔path_pre[1]"
    global ph2=path_pre[1]
    $ 260 "ph3≔path_pre[2]"
    global ph3=path_pre[2]
    $ 261 "ph4≔path_pre[3]"
    global ph4=path_pre[3]
    $ 262 "ph5≔path_pre[4]"
    global ph5=path_pre[4]
    $ 263 "ph6≔path_pre[5]"
    global ph6=path_pre[5]
    $ 264 "ph7≔path_pre[6]"
    global ph7=path_pre[6]
    $ 265 "MoveJ"
    $ 266 "ph1" "breakAfter"
    movej(ph1, a=1.3962634015954636, v=1.0471975511965976)
    $ 267 "ph2" "breakAfter"
    movej(ph2, a=1.3962634015954636, v=1.0471975511965976)
    $ 268 "MoveL"
    $ 269 "Direction: Base"
    global move_thread_flag_269=0
    thread move_thread_269():
      enter_critical
      move_thread_flag_269 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_269 = 2
      exit_critical
    end
    move_thread_flag_269 = 0
    move_thread_han_269 = run move_thread_269()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_269
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 270 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 271 "p11≔get_actual_tcp_pose()"
    global p11= get_actual_tcp_pose ()
    $ 272 "MoveJ"
    $ 273 "ph3" "breakAfter"
    movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
    $ 274 "MoveL"
    $ 275 "Direction: Base"
    global move_thread_flag_275=0
    thread move_thread_275():
      enter_critical
      move_thread_flag_275 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_275 = 2
      exit_critical
    end
    move_thread_flag_275 = 0
    move_thread_han_275 = run move_thread_275()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_275
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 276 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 277 "p12≔get_actual_tcp_pose()"
    global p12= get_actual_tcp_pose ()
    $ 278 "MoveJ"
    $ 279 "ph3" "breakAfter"
    movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
    $ 280 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 281 "MoveJ"
    $ 282 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=0.3490658503988659)
    $ 283 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=0.3490658503988659)
    $ 284 "MoveJ"
    $ 285 "ph4" "breakAfter"
    movej(ph4, a=1.3962634015954636, v=1.0471975511965976)
    $ 286 "MoveL"
    $ 287 "Direction: Base"
    global move_thread_flag_287=0
    thread move_thread_287():
      enter_critical
      move_thread_flag_287 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_287 = 2
      exit_critical
    end
    move_thread_flag_287 = 0
    move_thread_han_287 = run move_thread_287()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_287
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 288 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 289 "p21≔get_actual_tcp_pose()"
    global p21= get_actual_tcp_pose ()
    $ 290 "MoveJ"
    $ 291 "ph5" "breakAfter"
    movej(ph5, a=1.3962634015954636, v=1.0471975511965976)
    $ 292 "MoveL"
    $ 293 "Direction: Base"
    global move_thread_flag_293=0
    thread move_thread_293():
      enter_critical
      move_thread_flag_293 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_293 = 2
      exit_critical
    end
    move_thread_flag_293 = 0
    move_thread_han_293 = run move_thread_293()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_293
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 294 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 295 "p22≔get_actual_tcp_pose()"
    global p22= get_actual_tcp_pose ()
    $ 296 "MoveJ"
    $ 297 "ph5" "breakAfter"
    movej(ph5, a=1.3962634015954636, v=1.0471975511965976)
    $ 298 "ph4" "breakAfter"
    movej(ph4, a=1.3962634015954636, v=1.0471975511965976)
    $ 299 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 300 "Waypoint_14" "breakAfter"
    movej(get_inverse_kin(Waypoint_14_p, qnear=Waypoint_14_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 301 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 302 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 303 "ph6" "breakAfter"
    movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
    $ 304 "ph7" "breakAfter"
    movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
    $ 305 "MoveL"
    $ 306 "Direction: Base Z+"
    global move_thread_flag_306=0
    thread move_thread_306():
      enter_critical
      move_thread_flag_306 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
      movel(towardsPos, a=0.1, v=0.05)
      move_thread_flag_306 = 2
      exit_critical
    end
    move_thread_flag_306 = 0
    move_thread_han_306 = run move_thread_306()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_306
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 307 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 308 "p3≔get_actual_tcp_pose()"
    global p3= get_actual_tcp_pose ()
    $ 309 "MoveJ"
    $ 310 "ph7" "breakAfter"
    movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
    $ 311 "ph6" "breakAfter"
    movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
    $ 312 "Waypoint_17" "breakAfter"
    movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 313 "Waypoint_18" "breakAfter"
    movej(get_inverse_kin(Waypoint_18_p, qnear=Waypoint_18_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 314 "Home"
    movej([-3.523764549353853, -1.8742328384451357, 2.4457816539194326, 0.058650484450722296, -0.22275931369636837, -0.6273979632655688], a=1.3962634015954636, v=1.0471975511965976)
    $ 315 "Comment"
    # Comment
    $ 316 "Comment"
    # Comment
    $ 317 "Comment"
    # Comment
    $ 318 "Comment"
    # Comment
    $ 319 "Comment"
    # Comment
    $ 320 "Comment"
    # Comment
  end
  $ 321 "Thread_1"
  thread Thread_1():
    while (True):
      $ 322 "Loop  True "
      while (  True  ):
        $ 323 "If freedrive_m_var≟ True "
        if (freedrive_m_var ==   True  ):
          $ 324 "freedrive_mode()"
          freedrive_mode()
        else:
          $ 325 "Else" "noBreak"
          $ 326 "end_freedrive_mode()"
          end_freedrive_mode()
        end
        $ 327 "sync()"
        sync()
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 2 "Robot Program"
  $ 3 "'start of main program'"
  # 'start of main program'
  $ 4 "Home"
  movej([-3.523764549353853, -1.8742328384451357, 2.4457816539194326, 0.058650484450722296, -0.22275931369636837, -0.6273979632655688], a=1.3962634015954636, v=1.0471975511965976)
  $ 5 "Set"
  set_tcp(p[-0.0032389957884720044,-0.045696511022507505,0.25739827382857544,0.0,0.0,0.0])
  $ 6 "Test_Teach_Position()"
  Test_Teach_Position()
  $ 7 "Set"
  set_tcp(p[-0.0032389957884720044,-0.045696511022507505,0.25739827382857544,0.0,0.0,0.0])
  $ 8 "Corner_Homing_45()"
  Corner_Homing_45()
  $ 9 "Set"
  set_tcp(p[-0.0042110779091591305,-0.2798289119592719,0.10591607363377763,1.2092,-1.2092,1.2092])
  $ 10 "extrude_knife()"
  extrude_knife()
  $ 11 "Script: analyze_touchpoints.script"
  # this file creates the function for analyzing touchpoints
  # define pi
  pi = 3.1415926535
  
  # this is the main entry point for calculations.
  # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
  # specifically for Down, Over, then Around (DOtA)
  # specifically for right-sided boxes (vertical weld on right side of edge
  def main_calculate_right(p11, p12, p21, p22, p3):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      struct2 = calculate_DOtA_points(struct1)
      return struct2
  end
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, pointapproach1, pointapproach2, point1, point2, point3, point4, point5, pointreturn1, heading1, heading2, heading3, path2r1, path2r2, path2l1, path2l2)
  # specifically for Around then Up (AtU)
  def analyze_touchpoints(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    # FIND THE FOUR POINTS ON THE LINES
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance = 8
    roundoverdistance = 0.05
    zup = .375
    # inches
    wd = welddistance * 25.4 / 1000
    rod = roundoverdistance * 25.4 / 1000
    zup = zup * 25.4 / 1000
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l1delxunit * wd
    y = yintersect + l1delyunit * wd
    z = zcoord + zup
  
    point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
  
    x = xintersect + l1delxunit * rod
    y = yintersect + l1delyunit * rod
  
    point2 = p[x,y,z,1.570796,0,0]
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l2delxunit * wd
    y = yintersect + l2delyunit * wd
  
    point5 = p[x,y,z,0,-1.570796,0]
  
    x = xintersect + l2delxunit * rod
    y = yintersect + l2delyunit * rod
  
    point4 = p[x,y,z,0,-1.570796,0]
  
    #DEFINE APPROACH POINTS
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
    pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
    pointapproach2 = p[point1[0], point1[1]+0.1, point1[2], point1[3], point1[4], point1[5]]
    pointreturn1 = p[point5[0]+0.1, point5[1], point5[2], point5[3], point5[4], point5[5]]
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #FIND POINT 3
    #see if we have to / can find point 3
    findpoint3 = True
    if roundoverdistance == 0:
      findpoint3 = False
    end
    if findpoint3:
      # i need to find the point3 such that the arc from p2 to p3 to p4 is tangent to p1-p2 and p4-p5. making this a smooth path will be good
      # the direction of movement is from pointintersect in the direction of heading2
      # how much movement though? this will depend on whether it is actually a 90 degree angle or not.
      # first, find the perpendicular lines through points 2 and 4
      perp2 = find_perpendicular_line(ml1, point2[0], point2[1])
      perp4 = find_perpendicular_line(ml2, point4[0], point4[1])
      # next, find the intersection of those two lines
      perpintersect = find_intersection(perp2[0], perp2[1], perp4[0], perp4[1])
      radiusofcircle = distance_between(perpintersect[0], perpintersect[1], 0, point2[0], point2[1], 0)
      # find a vector the direction of heading2
      uvx = cos(heading2)
      uvy = sin(heading2)
      # compute point3. pass in negative radius because the direction is into the tank but we want to move from the intersection out to the rounded edge.
      point3coords = add_vectordistance_to_point(perpintersect[0], perpintersect[1], z, uvx, uvy, 0, -1 * radiusofcircle)
      point3 = p[point3coords[0], point3coords[1], point3coords[2], 0, 0, 0]
    end
  
    #APPLY ACTUAL RXRYRZ TO POINTS
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    pointapproach1 = p[pointapproach1[0], pointapproach1[1], pointapproach1[2], rx, ry, rz]
    pointapproach2 = p[pointapproach2[0], pointapproach2[1], pointapproach2[2], rx, ry, rz]
    point1 = p[point1[0], point1[1], point1[2], rx, ry, rz]
    point2 = p[point2[0], point2[1], point2[2], rx, ry, rz]
    rxryrz = convert_heading_to_axang(heading2)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    if findpoint3:
      point3 = p[point3[0], point3[1], point3[2], rx, ry, rz]
    else:
      point3 = point2
    end
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point4 = p[point4[0], point4[1], point4[2], rx, ry, rz]
    point5 = p[point5[0], point5[1], point5[2], rx, ry, rz]
    pointreturn1 = p[pointreturn1[0], pointreturn1[1], pointreturn1[2], rx, ry, rz]
  
    #find path2 (the part that goes up)
    four_vertical_points = find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, zup, wd, heading1, heading3)
    path2r1 = four_vertical_points[0]
    path2r2 = four_vertical_points[1]
    path2l1 = four_vertical_points[2]
    path2l2 = four_vertical_points[3]
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, pointapproach1=pointapproach1, pointapproach2=pointapproach2, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, pointreturn1=pointreturn1, heading1=heading1, heading2=heading2, heading3=heading3, path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
    return ret
  end
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
  def analyze_touchpoints_only(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, heading1=heading1, heading2=heading2, heading3=heading3, l1delxunit=l1delxunit, l1delyunit=l1delyunit, l2delxunit=l2delxunit, l2delyunit=l2delyunit)
    return ret
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  def calculate_DOtA_points(struct1):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance = 8
      zup = .375
      # inches
      wd = welddistance * 25.4 / 1000
      zup = zup * 25.4 / 1000
  
      x = pointintersect[0] + l1delxunit * zup
      y = pointintersect[1] + l1delyunit * zup
      z = pointintersect[2] + zup
  
      #APPLY ACTUAL RXRYRZ TO POINTS
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x, y, z + wd, rx, ry, rz]
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l1delxunit * wd
      y = y + l1delyunit * wd
      point5 = p[x, y, z, rx, ry, rz]
  
  
  
  
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5)
      return struct2
  end
  
  # this function finds the points (and rxryrz) of the 2 points (start and end) of vertical weld section
  def find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, offset, wd, heading1, heading3):
  
    # find right side stuff
    # find the point in 3d space that is .375 up and .375 over
    x = pointintersect[0] + l1delxunit * offset
    y = pointintersect[1] + l1delyunit * offset
    z = pointintersect[2] + offset
    # find rxryrz
    rxryrz = convert_heading_to_axang_preheatup(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    path2r1 = p[x, y, z, rx, ry, rz]
    path2r2 = p[x, y, z + wd, rx, ry, rz]
  
    # find left side
    # find the point in 3d space that is .375 up and .375 over
    x = pointintersect[0] + l2delxunit * offset
    y = pointintersect[1] + l2delyunit * offset
    z = pointintersect[2] + offset
    # find rxryrz
    rxryrz = convert_heading_to_axang_preheatup(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    path2l1 = p[x, y, z, rx, ry, rz]
    path2l2 = p[x, y, z + wd, rx, ry, rz]
  
    ret = struct(path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
    return ret
  end
  
  # this function converts a unit vector to its heading angle ccw from x+ axis
  # takes uvx and uvy
  # returns heading in radians
  def convert_uv_to_heading(uvx, uvy):
    baseang = atan(uvy/uvx)
    if uvx < 0:
      ang = baseang + pi
    elif uvy < 0:
      ang = baseang + pi * 2
    else:
      ang = baseang
    end
    return ang
  end
  
  # this function finds the equation of a line, perpendicular to a given line, and going through a given point
  # takes 3 arguments: m (the original line's slope), x (point's x coord), y (point's y coord). the b of the original line is not needed
  # returns a list of [m,b] (the slope and intercept of the new line)
  def find_perpendicular_line(origm, x, y):
    m = (1/origm) * -1
    b = y - m*x
    ret = [m, b]
    return ret
  end
  
  # this function finds the intersection point between two lines in the xy plane
  # takes 4 arguments: m1, b1, m2, b2
  # returns a list of [x,y] (the point of intersection)
  def find_intersection(m1, b1, m2, b2):
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    x = (b2-b1) / (m1-m2)
    y = m1 * x + b1
    ret = [x, y]
    return ret
  end
  
  # this function finds the distance between 2 points in 3d space
  # it takes 6 arguments: x1, y1, z1, x2, y2, z2
  # it returns a distance
  def distance_between(x1, y1, z1, x2, y2, z2):
    distsquared = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)
    dist = sqrt(distsquared)
    return dist
  end
  
  # this function takes a point, a unit vector, and a distance, and adds the distance to the point in the direction of the unit vector (3d space)
  # it returns a point as a list of coordinates
  def add_vectordistance_to_point(xi, yi, zi, uvx, uvy, uvz, delta):
    xf = xi + uvx * delta
    yf = yi + uvy * delta
    zf = zi + uvz * delta
    ret = [xf, yf, zf]
    return ret
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the bottom side of the gun facing up.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang(heading):
   axisxraw = -1 * sin(heading)
   axisyraw = cos(heading) + 1
   axiszraw = sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing up. Used for welding in a vertical path.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_preheatup(heading):
   axisxraw = -sin(heading) + 1
   axisyraw = cos(heading)
   axiszraw = cos(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (-sin(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing down. Used for welding in a vertical path downwards.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_preheatdown(heading):
   axisxraw = -sin(heading) - 1
   axisyraw = cos(heading)
   axiszraw = -cos(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (sin(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing right. Used for welding counterclockwise around the box.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_ccw(heading):
   axisxraw = -sin(heading)
   axisyraw = cos(heading) - 1
   axiszraw = -sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (-cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function is for getting the points along the path of the corner homing 45
  # point0 is the point where they touched
  def get_corner_homing_45_pathpoints(point0):
    p0x = point0[0]
    p0y = point0[1]
    p0z = point0[2]
    p0rx = point0[3]
    p0ry = point0[4]
    p0rz = point0[5]
  
    #constants
    #distances of how far away from point the touchpoints are
    d0 = 0.15 # how far from the box to retreat and approach
    d1 = 0.05
    d2 = 0.2
    sqrt2 = 0.707106781
  
    ph1 = p[p0x + d0, p0y, p0z + .05, p0rx, p0ry, p0rz] #approach point for turn
  
    ph2 = p[p0x+d0-d0*sqrt2-sqrt2*d1, p0y+d0*sqrt2+sqrt2*d1, p0z+.05, .445, -1.562, .483]
    ph3 = p[p0x+d0-d0*sqrt2-sqrt2*d2, p0y+d0*sqrt2+sqrt2*d2, p0z+.05, .445, -1.562, .483]
    ph4 = p[p0x+d0-d0*sqrt2-sqrt2*d1, p0y-d0*sqrt2-sqrt2*d1, p0z+.05, 1.699, 3.576, 1.841]
    ph5 = p[p0x+d0-d0*sqrt2-sqrt2*d2, p0y-d0*sqrt2-sqrt2*d2, p0z+.05, 1.699, 3.576, 1.841]
  
    # go back to ph1
    ph6 = p[p0x + .05, p0y, p0z -.05, 0, 0, 0] # approach point for under turn
    # moveL from ph1 to ph6
    ph7 = p[p0x-.05, p0y, p0z-.05, 0, 0, 0]
    ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4, ph5=ph5, ph6=ph6, ph7=ph7)
    return ret
  end
  $ 16 "pathturn≔main_calculate_right(p11,p12,p21,p22,p3)"
  global pathturn=main_calculate_right(p11,p12,p21,p22,p3)
  $ 17 "Popup"
  popup(str_cat("",pathturn), "Message", False, False, blocking=True)
  $ 18 "Call move_path_3"
  move_path_3()
  $ 19 "Home"
  movej([-3.523764549353853, -1.8742328384451357, 2.4457816539194326, 0.058650484450722296, -0.22275931369636837, -0.6273979632655688], a=1.3962634015954636, v=1.0471975511965976)
end
