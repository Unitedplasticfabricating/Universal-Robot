def Main_Program():
  global _hidden_verificationVariable=0
  step_count_e751192d_b33a_4499_abc3_9e625180c6c7 = 0.0
  thread Step_Counter_Thread_9bca54ff_a688_40d0_972a_e2c68936f46f():
    while (True):
      step_count_e751192d_b33a_4499_abc3_9e625180c6c7 = step_count_e751192d_b33a_4499_abc3_9e625180c6c7 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_9bca54ff_a688_40d0_972a_e2c68936f46f()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.310000, [0.000000, 0.000000, 0.009500], [0.000219, 0.000219, 0.000219, 0.000000, 0.000000, 0.000000])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  global freedrive_m_var=  False  
  global Waypoint_1_p=p[.183612702909, .373491415748, .464002429884, -.000031211095, 3.141572859461, .000004622808]
  global Waypoint_1_q=[-2.527531687413351, -2.1028810940184535, 2.591139856969015, -2.0582763157286585, -1.5713656584369105, 2.1834325790405273]
  global Waypoint_2_p=p[-.545552386461, .384638463642, .171639485768, .668511604681, -1.949272130073, 1.726627182696]
  global Waypoint_2_q=[-1.0565226713763636, -1.0868892234614869, 2.1878750959979456, -1.2335426074317475, -1.0471814314471644, 2.53226637840271]
  global Waypoint_7_p=p[-.372860657265, .716170383118, .314676530127, 1.570809017190, -.000000152759, .000003968716]
  global Waypoint_7_q=[-1.3816140333758753, -1.0546258252910157, 1.8334205786334437, -0.7777959269336243, -1.3827489058123987, 6.28196907043457]
  global Waypoint_8_p=p[-.372860657265, .716170383118, .314676530127, 1.570809017190, -.000000152759, .000003968716]
  global Waypoint_8_q=[-1.3816140333758753, -1.0546258252910157, 1.8334205786334437, -0.7777959269336243, -1.3827489058123987, 6.28196907043457]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_3_p=p[.432120633847, .373496143704, .463992564600, -.000014136521, -3.141567738104, -.000014867905]
  global Waypoint_3_q=[-2.7853482405291956, -1.8143698177733363, 2.4549508730517786, -2.210560461083883, -1.5711315313922327, 1.9254603385925293]
  global Waypoint_4_p=p[.432136735069, .373501596410, .340883510249, -.000031606225, -3.141589553529, -.000013823620]
  global Waypoint_4_q=[-2.785483185444967, -1.6431261501707972, 2.568024222050802, -2.49489750484609, -1.5709694067584437, 1.9253177642822266]
  global Waypoint_5_p=p[.432160287104, .281352183882, .340893061994, .000015375091, 3.141574034920, .000032661568]
  global Waypoint_5_q=[-2.9616554419146937, -1.7250400982298792, 2.631975237523214, -2.4769565067686976, -1.5710294882403772, 1.7491776943206787]
  global Waypoint_6_p=p[.432128063058, .281346135716, .478493221894, .000013346378, -3.141574975494, -.000002942308]
  global Waypoint_6_q=[-2.961463991795675, -1.9219290218748988, 2.4929660002337855, -2.141019483605856, -1.571230713521139, 1.7493857145309448]
  def Test_Teach_Position():
    $ 9 "Test_Teach_Position" "noBreak"
    $ 10 "Home"
    movej([-2.5278157671606145, -1.852465766610969, 2.7650339410037645, -2.482569784177298, -1.5711424260709022, 2.183095047178716], a=1.3962634015954636, v=1.0471975511965976)
    $ 11 "MoveL"
    $ 12 "Waypoint_1" "breakAfter"
    movel(Waypoint_1_p, a=1.2, v=0.25)
    $ 13 "'move welder up out of holder'"
    # 'move welder up out of holder'
    $ 14 "MoveJ"
    $ 15 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 16 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 17 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 18 "Popup: Move the robot to the peg center, then click 'Continue'"
    popup("Move the robot to the peg center, then click 'Continue'", "Message", False, False, blocking=True)
    $ 19 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 20 "Wait: 0.25"
    sleep(0.25)
    $ 21 "sync()"
    sync()
    $ 22 "tcp_pose≔get_actual_joint_positions()"
    global tcp_pose= get_actual_joint_positions ()
  end
  def move_path_1():
    $ 23 "move_path_1" "noBreak"
    $ 24 "pa1≔path1[1]"
    global pa1=path1[1]
    $ 25 "pa2≔path1[2]"
    global pa2=path1[2]
    $ 26 "p1≔path1[3]"
    global p1=path1[3]
    $ 27 "p2≔path1[4]"
    global p2=path1[4]
    $ 28 "p4≔path1[6]"
    global p4=path1[6]
    $ 29 "p5≔path1[7]"
    global p5=path1[7]
    $ 30 "pr1≔path1[8]"
    global pr1=path1[8]
    $ 31 "Popup"
    popup(str_cat("",path1), "Message", False, False, blocking=True)
    $ 32 "Popup"
    popup(str_cat("",p2), "Message", False, False, blocking=True)
    $ 33 "MoveJ"
    $ 34 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 35 "MoveJ"
    $ 36 "pa1" "breakAfter"
    movej(pa1, a=1.3962634015954636, v=1.0471975511965976)
    $ 37 "MoveL"
    $ 38 "pa2" "breakAfter"
    movel(pa2, a=1.2, v=0.2)
    $ 39 "MoveL"
    $ 40 "p1" "breakAfter"
    movel(p1, a=1.2, v=0.05)
    $ 41 "Wait: 1.0"
    sleep(1.0)
    $ 42 "MoveL"
    $ 43 "p2" "breakAfter"
    movel(p2, a=1.2, v=0.012)
    $ 44 "Wait: 3.0"
    sleep(3.0)
    $ 45 "Script: speedl_test2.script"
    #rot_speed=0.1
    #current_pose=get_actual_tcp_pose()
    #time_int = 5
    #target_pose=pose_trans(current_pose, p[0,0,0,0,0,rot_speed*time_int])
    #speedl(pose_sub(target_pose, current_pose), rot_speed, time_int)
    
    #get the headings and compare
    #current heading
    heading1=path1[9]
    #destination heading
    heading3 = path1[11]
    headingdelta = heading3 - heading1
    time_int = 3 #const
    rot_speed = headingdelta/time_int
    
    speedl([0,0,0,0,0,rot_speed],0.5,time_int)
    $ 46 "MoveP"
    $ 47 "p5" "breakAfter"
    movep(p5, a=1.2, v=0.012, r=0.025)
    $ 50 "MoveL"
    $ 51 "pr1" "breakAfter"
    movel(pr1, a=1.2, v=0.25)
    $ 52 "MoveJ"
    $ 53 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
  end
  def Corner_Homing_BRB():
    $ 54 "Corner_Homing_BRB" "noBreak"
    $ 55 "'Use this program when tool is already positioned close to corner (back right bottom corner)'"
    # 'Use this program when tool is already positioned close to corner (back right bottom corner)'
    $ 56 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
    # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
    $ 57 "align_tcp_left()"
    align_tcp_left()
    $ 58 "'right side'"
    # 'right side'
    $ 59 "MoveL"
    $ 60 "Direction: Base X-"
    global move_thread_flag_60=0
    thread move_thread_60():
      enter_critical
      move_thread_flag_60 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_60 = 2
      exit_critical
    end
    move_thread_flag_60 = 0
    move_thread_han_60 = run move_thread_60()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_60 > 1):
        join move_thread_han_60
        $ 61 "Until (distance)"
        break
      end
      sync()
    end
    $ 62 "MoveL"
    $ 63 "Direction: Base Y-"
    global move_thread_flag_63=0
    thread move_thread_63():
      enter_critical
      move_thread_flag_63 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_63 = 2
      exit_critical
    end
    move_thread_flag_63 = 0
    move_thread_han_63 = run move_thread_63()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_63
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 64 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 65 "p11≔get_actual_tcp_pose()"
    global p11= get_actual_tcp_pose ()
    $ 66 "MoveL"
    $ 67 "Direction: Base Y+"
    global move_thread_flag_67=0
    thread move_thread_67():
      enter_critical
      move_thread_flag_67 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_67 = 2
      exit_critical
    end
    move_thread_flag_67 = 0
    move_thread_han_67 = run move_thread_67()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_67 > 1):
        join move_thread_han_67
        $ 68 "Until (distance)"
        break
      end
      sync()
    end
    $ 69 "MoveL"
    $ 70 "Direction: Base X-"
    global move_thread_flag_70=0
    thread move_thread_70():
      enter_critical
      move_thread_flag_70 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.15)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_70 = 2
      exit_critical
    end
    move_thread_flag_70 = 0
    move_thread_han_70 = run move_thread_70()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_70 > 1):
        join move_thread_han_70
        $ 71 "Until (distance)"
        break
      end
      sync()
    end
    $ 72 "MoveL"
    $ 73 "Direction: Base Y-"
    global move_thread_flag_73=0
    thread move_thread_73():
      enter_critical
      move_thread_flag_73 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_73 = 2
      exit_critical
    end
    move_thread_flag_73 = 0
    move_thread_han_73 = run move_thread_73()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_73
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 74 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 75 "p12≔get_actual_tcp_pose()"
    global p12= get_actual_tcp_pose ()
    $ 76 "MoveL"
    $ 77 "Direction: Base Y+"
    global move_thread_flag_77=0
    thread move_thread_77():
      enter_critical
      move_thread_flag_77 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_77 = 2
      exit_critical
    end
    move_thread_flag_77 = 0
    move_thread_han_77 = run move_thread_77()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_77 > 1):
        join move_thread_han_77
        $ 78 "Until (distance)"
        break
      end
      sync()
    end
    $ 79 "MoveL"
    $ 80 "Direction: Base X+"
    global move_thread_flag_80=0
    thread move_thread_80():
      enter_critical
      move_thread_flag_80 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.3)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_80 = 2
      exit_critical
    end
    move_thread_flag_80 = 0
    move_thread_han_80 = run move_thread_80()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_80 > 1):
        join move_thread_han_80
        $ 81 "Until (distance)"
        break
      end
      sync()
    end
    $ 82 "align_tcp_forward()"
    align_tcp_forward()
    $ 83 "'back side'"
    # 'back side'
    $ 84 "MoveL"
    $ 85 "Direction: Base Y-"
    global move_thread_flag_85=0
    thread move_thread_85():
      enter_critical
      move_thread_flag_85 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_85 = 2
      exit_critical
    end
    move_thread_flag_85 = 0
    move_thread_han_85 = run move_thread_85()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_85 > 1):
        join move_thread_han_85
        $ 86 "Until (distance)"
        break
      end
      sync()
    end
    $ 87 "MoveL"
    $ 88 "Direction: Base X-"
    global move_thread_flag_88=0
    thread move_thread_88():
      enter_critical
      move_thread_flag_88 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_88 = 2
      exit_critical
    end
    move_thread_flag_88 = 0
    move_thread_han_88 = run move_thread_88()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_88
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 89 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 90 "p21≔get_actual_tcp_pose()"
    global p21= get_actual_tcp_pose ()
    $ 91 "MoveL"
    $ 92 "Direction: Base X+"
    global move_thread_flag_92=0
    thread move_thread_92():
      enter_critical
      move_thread_flag_92 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_92 = 2
      exit_critical
    end
    move_thread_flag_92 = 0
    move_thread_han_92 = run move_thread_92()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_92 > 1):
        join move_thread_han_92
        $ 93 "Until (distance)"
        break
      end
      sync()
    end
    $ 94 "MoveL"
    $ 95 "Direction: Base Y-"
    global move_thread_flag_95=0
    thread move_thread_95():
      enter_critical
      move_thread_flag_95 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.15)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_95 = 2
      exit_critical
    end
    move_thread_flag_95 = 0
    move_thread_han_95 = run move_thread_95()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_95 > 1):
        join move_thread_han_95
        $ 96 "Until (distance)"
        break
      end
      sync()
    end
    $ 97 "MoveL"
    $ 98 "Direction: Base X-"
    global move_thread_flag_98=0
    thread move_thread_98():
      enter_critical
      move_thread_flag_98 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_98 = 2
      exit_critical
    end
    move_thread_flag_98 = 0
    move_thread_han_98 = run move_thread_98()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_98
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 99 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 100 "p22≔get_actual_tcp_pose()"
    global p22= get_actual_tcp_pose ()
    $ 101 "MoveL"
    $ 102 "Direction: Base X+"
    global move_thread_flag_102=0
    thread move_thread_102():
      enter_critical
      move_thread_flag_102 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_102 = 2
      exit_critical
    end
    move_thread_flag_102 = 0
    move_thread_han_102 = run move_thread_102()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_102 > 1):
        join move_thread_han_102
        $ 103 "Until (distance)"
        break
      end
      sync()
    end
    $ 104 "'regroup for up turn'"
    # 'regroup for up turn'
    $ 105 "MoveL"
    $ 106 "Direction: Base X+"
    global move_thread_flag_106=0
    thread move_thread_106():
      enter_critical
      move_thread_flag_106 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_106 = 2
      exit_critical
    end
    move_thread_flag_106 = 0
    move_thread_han_106 = run move_thread_106()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_106 > 1):
        join move_thread_han_106
        $ 107 "Until (distance)"
        break
      end
      sync()
    end
    $ 108 "Direction: Base Y+"
    global move_thread_flag_108=0
    thread move_thread_108():
      enter_critical
      move_thread_flag_108 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.5)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_108 = 2
      exit_critical
    end
    move_thread_flag_108 = 0
    move_thread_han_108 = run move_thread_108()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_108 > 1):
        join move_thread_han_108
        $ 109 "Until (distance)"
        break
      end
      sync()
    end
    $ 110 "MoveL"
    $ 111 "Direction: Base Z-"
    global move_thread_flag_111=0
    thread move_thread_111():
      enter_critical
      move_thread_flag_111 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_111 = 2
      exit_critical
    end
    move_thread_flag_111 = 0
    move_thread_han_111 = run move_thread_111()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_111 > 1):
        join move_thread_han_111
        $ 112 "Until (distance)"
        break
      end
      sync()
    end
    $ 113 "align_tcp_up()"
    align_tcp_up()
    $ 114 "MoveL"
    $ 115 "Direction: Base X-"
    global move_thread_flag_115=0
    thread move_thread_115():
      enter_critical
      move_thread_flag_115 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.25)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_115 = 2
      exit_critical
    end
    move_thread_flag_115 = 0
    move_thread_han_115 = run move_thread_115()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_115 > 1):
        join move_thread_han_115
        $ 116 "Until (distance)"
        break
      end
      sync()
    end
    $ 117 "Direction: Base Y-"
    global move_thread_flag_117=0
    thread move_thread_117():
      enter_critical
      move_thread_flag_117 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.32)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_117 = 2
      exit_critical
    end
    move_thread_flag_117 = 0
    move_thread_han_117 = run move_thread_117()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_117 > 1):
        join move_thread_han_117
        $ 118 "Until (distance)"
        break
      end
      sync()
    end
    $ 119 "'bottom side'"
    # 'bottom side'
    $ 120 "MoveL"
    $ 121 "Direction: Base Z+"
    global move_thread_flag_121=0
    thread move_thread_121():
      enter_critical
      move_thread_flag_121 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_121 = 2
      exit_critical
    end
    move_thread_flag_121 = 0
    move_thread_han_121 = run move_thread_121()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_121
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 122 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 123 "p3≔get_actual_tcp_pose()"
    global p3= get_actual_tcp_pose ()
    $ 124 "MoveL"
    $ 125 "Direction: Base Z-"
    global move_thread_flag_125=0
    thread move_thread_125():
      enter_critical
      move_thread_flag_125 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_125 = 2
      exit_critical
    end
    move_thread_flag_125 = 0
    move_thread_han_125 = run move_thread_125()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_125 > 1):
        join move_thread_han_125
        $ 126 "Until (distance)"
        break
      end
      sync()
    end
    $ 127 "MoveL"
    $ 128 "Direction: Base X+"
    global move_thread_flag_128=0
    thread move_thread_128():
      enter_critical
      move_thread_flag_128 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_128 = 2
      exit_critical
    end
    move_thread_flag_128 = 0
    move_thread_han_128 = run move_thread_128()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_128 > 1):
        join move_thread_han_128
        $ 129 "Until (distance)"
        break
      end
      sync()
    end
    $ 130 "Direction: Base Y+"
    global move_thread_flag_130=0
    thread move_thread_130():
      enter_critical
      move_thread_flag_130 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_130 = 2
      exit_critical
    end
    move_thread_flag_130 = 0
    move_thread_han_130 = run move_thread_130()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_130 > 1):
        join move_thread_han_130
        $ 131 "Until (distance)"
        break
      end
      sync()
    end
  end
  def extrude_knife():
    $ 132 "extrude_knife" "noBreak"
    $ 133 "'Move to bucket'"
    # 'Move to bucket'
    $ 134 "MoveJ"
    $ 135 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 136 "MoveL"
    $ 137 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=1.2, v=0.25)
    $ 138 "'extrude out a foot'"
    # 'extrude out a foot'
    $ 139 "Wait: 1.0"
    sleep(1.0)
    $ 140 "MoveL"
    $ 141 "'slice over knife'"
    # 'slice over knife'
    $ 142 "Waypoint_5" "breakAfter"
    movel(Waypoint_5_p, a=1.2, v=0.04)
    $ 143 "MoveL"
    $ 144 "Waypoint_6" "breakAfter"
    movel(Waypoint_6_p, a=1.2, v=0.25)
    $ 145 "'raise up away from knife'"
    # 'raise up away from knife'
  end
  def align_tcp_left():
    $ 146 "align_tcp_left" "noBreak"
    $ 147 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 148 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 149 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 150 "MoveJ"
    $ 151 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_up():
    $ 152 "align_tcp_up" "noBreak"
    $ 153 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 154 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 155 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 156 "MoveJ"
    $ 157 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_forward():
    $ 158 "align_tcp_forward" "noBreak"
    $ 159 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 160 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 161 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 162 "MoveJ"
    $ 163 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 164 "Thread_1"
  thread Thread_1():
    while (True):
      $ 165 "Loop  True "
      while (  True  ):
        $ 166 "If freedrive_m_var≟ True "
        if (freedrive_m_var ==   True  ):
          $ 167 "freedrive_mode()"
          freedrive_mode()
        else:
          $ 168 "Else" "noBreak"
          $ 169 "end_freedrive_mode()"
          end_freedrive_mode()
        end
        $ 170 "sync()"
        sync()
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 2 "Robot Program"
  $ 3 "Test_Teach_Position()"
  Test_Teach_Position()
  $ 4 "Corner_Homing_BRB()"
  Corner_Homing_BRB()
  $ 5 "extrude_knife()"
  extrude_knife()
  $ 6 "Script: analyze_touchpoints.script"
  # this file creates the function for analyzing touchpoints
  # define pi
  pi = 3.1415926535
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, pointapproach1, pointapproach2, point1, point2, point3, point4, point5, pointreturn1, heading1, heading2, heading3)
  def analyze_touchpoints(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    # FIND THE FOUR POINTS ON THE LINES
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance = 8
    roundoverdistance = 0
    zup = .375
    # inches
    wd = welddistance * 25.4 / 1000
    rod = roundoverdistance * 25.4 / 1000
    zup = zup * 25.4 / 1000
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l1delxunit * wd
    y = yintersect + l1delyunit * wd
    z = zcoord + zup
  
    point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
  
    x = xintersect + l1delxunit * rod
    y = yintersect + l1delyunit * rod
  
    point2 = p[x,y,z,1.570796,0,0]
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l2delxunit * wd
    y = yintersect + l2delyunit * wd
  
    point5 = p[x,y,z,0,-1.570796,0]
  
    x = xintersect + l2delxunit * rod
    y = yintersect + l2delyunit * rod
  
    point4 = p[x,y,z,0,-1.570796,0]
  
    #DEFINE APPROACH POINTS
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
    pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
    pointapproach2 = p[point1[0], point1[1]+0.1, point1[2], point1[3], point1[4], point1[5]]
    pointreturn1 = p[point5[0]+0.1, point5[1], point5[2], point5[3], point5[4], point5[5]]
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #FIND POINT 3
    #see if we have to / can find point 3
    findpoint3 = True
    if roundoverdistance = 0:
      findpoint3 = False
    end
    if findpoint3:
      # i need to find the point3 such that the arc from p2 to p3 to p4 is tangent to p1-p2 and p4-p5. making this a smooth path will be good
      # the direction of movement is from pointintersect in the direction of heading2
      # how much movement though? this will depend on whether it is actually a 90 degree angle or not.
      # first, find the perpendicular lines through points 2 and 4
      perp2 = find_perpendicular_line(ml1, point2[0], point2[1])
      perp4 = find_perpendicular_line(ml2, point4[0], point4[1])
      # next, find the intersection of those two lines
      perpintersect = find_intersection(perp2[0], perp2[1], perp4[0], perp4[1])
      radiusofcircle = distance_between(perpintersect[0], perpintersect[1], 0, point2[0], point2[1], 0)
      # find a vector the direction of heading2
      uvx = cos(heading2)
      uvy = sin(heading2)
      # compute point3. pass in negative radius because the direction is into the tank but we want to move from the intersection out to the rounded edge.
      point3coords = add_vectordistance_to_point(perpintersect[0], perpintersect[1], z, uvx, uvy, 0, -1 * radiusofcircle)
      point3 = p[point3coords[0], point3coords[1], point3coords[2], 0, 0, 0]
    end
  
    #APPLY ACTUAL RXRYRZ TO POINTS
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    pointapproach1 = p[pointapproach1[0], pointapproach1[1], pointapproach1[2], rx, ry, rz]
    pointapproach2 = p[pointapproach2[0], pointapproach2[1], pointapproach2[2], rx, ry, rz]
    point1 = p[point1[0], point1[1], point1[2], rx, ry, rz]
    point2 = p[point2[0], point2[1], point2[2], rx, ry, rz]
    rxryrz = convert_heading_to_axang(heading2)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    if findpoint3:
      point3 = p[point3[0], point3[1], point3[2], rx, ry, rz]
    else:
      point3 = point2
    end
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point4 = p[point4[0], point4[1], point4[2], rx, ry, rz]
    point5 = p[point5[0], point5[1], point5[2], rx, ry, rz]
    pointreturn1 = p[pointreturn1[0], pointreturn1[1], pointreturn1[2], rx, ry, rz]
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, pointapproach1=pointapproach1, pointapproach2=pointapproach2, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, pointreturn1=pointreturn1, heading1=heading1, heading2=heading2, heading3=heading3)
    return ret
  end
  
  # this function converts a unit vector to its heading angle ccw from x+ axis
  # takes uvx and uvy
  # returns heading in radians
  def convert_uv_to_heading(uvx, uvy):
    baseang = atan(uvy/uvx)
    if uvx < 0:
      ang = baseang + pi
    elif uvy < 0:
      ang = baseang + pi * 2
    else:
      ang = baseang
    end
    return ang
  end
  
  # this function finds the equation of a line, perpendicular to a given line, and going through a given point
  # takes 3 arguments: m (the original line's slope), x (point's x coord), y (point's y coord). the b of the original line is not needed
  # returns a list of [m,b] (the slope and intercept of the new line)
  def find_perpendicular_line(origm, x, y):
    m = (1/origm) * -1
    b = y - m*x
    ret = [m, b]
    return ret
  end
  
  # this function finds the intersection point between two lines in the xy plane
  # takes 4 arguments: m1, b1, m2, b2
  # returns a list of [x,y] (the point of intersection)
  def find_intersection(m1, b1, m2, b2):
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    x = (b2-b1) / (m1-m2)
    y = m1 * x + b1
    ret = [x, y]
    return ret
  end
  
  # this function finds the distance between 2 points in 3d space
  # it takes 6 arguments: x1, y1, z1, x2, y2, z2
  # it returns a distance
  def distance_between(x1, y1, z1, x2, y2, z2):
    distsquared = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)
    dist = sqrt(distsquared)
    return dist
  end
  
  # this function takes a point, a unit vector, and a distance, and adds the distance to the point in the direction of the unit vector (3d space)
  # it returns a point as a list of coordinates
  def add_vectordistance_to_point(xi, yi, zi, uvx, uvy, uvz, delta):
    xf = xi + uvx * delta
    yf = yi + uvy * delta
    zf = zi + uvz * delta
    ret = [xf, yf, zf]
    return ret
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  def convert_heading_to_axang(heading):
   axisxraw = -1 * sin(heading)
   axisyraw = cos(heading) + 1
   axiszraw = sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  
  
  $ 7 "path1≔analyze_touchpoints(p11,p12,p21,p22,p3)"
  global path1=analyze_touchpoints(p11,p12,p21,p22,p3)
  $ 8 "move_path_1()"
  move_path_1()
end
