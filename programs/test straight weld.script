def test_straight_weld():
  global _hidden_verificationVariable=0
  set_tcp(p[-0.005053217471465032,-0.33170982315522196,0.10357409938002443,1.2092,-1.2092,1.2092])
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(8.250000, [-0.001000, -0.057000, 0.067000], [0.051851, 0.051851, 0.051851, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_29890784_625e_4962_a755_63c5494a2c71 = 0.0
  thread Step_Counter_Thread_1303d555_6c3f_4ffe_8dfe_450ac815851d():
    while (True):
      step_count_29890784_625e_4962_a755_63c5494a2c71 = step_count_29890784_625e_4962_a755_63c5494a2c71 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_1303d555_6c3f_4ffe_8dfe_450ac815851d()
  global Waypoint_8_p=p[.359081530006, .445185990121, .397106285345, 1.952918531567, 2.290647881540, .187158683275]
  global Waypoint_8_q=[-3.181993071232931, -2.0569125614561976, 2.211938206349508, -0.22708065927539067, -0.19934207597841436, -0.10534269014467412]
  global Waypoint_1_p=p[-.363139328061, .469334526200, .372923313828, .321130277460, 3.110718699137, .105053753359]
  global Waypoint_1_q=[-1.7868922392474573, -1.6437040768065394, 2.4420865217791956, 1.7428130346485595, 0.012459516525268555, -2.6093266646014612]
  global Waypoint_2_p=p[-.161023331933, .970525402154, .722063200778, -.554925016960, .106473111408, .328573194202]
  global Waypoint_2_q=[-1.3005145231830042, -1.3158996862224122, 2.2638405005084437, 3.677180452937744, -2.952611271535055, 0.9485541582107544]
  global Waypoint_3_p=p[-.308534056623, .606017694986, .242406145481, 1.369779140455, 1.066803939341, -1.257241685229]
  global Waypoint_3_q=[-1.4819467703448694, -0.9207381767085572, 1.5371878782855433, 0.9638222891041259, 1.6575342416763306, 0.24962489306926727]
  global Waypoint_4_p=p[-1.302621746323, .471672085666, .225000000000, 1.875615861259, .600131089111, -1.848319178363]
  global Waypoint_4_q=[-0.7333633944516542, -0.6253910173667014, 0.9832326711779946, 1.2213119616333472, 1.580921504112931, 1.7818058886017758]
  global Waypoint_5_p=p[-1.433411735503, .473471308954, .225000000000, 1.875280865003, .603722625115, -1.852311916154]
  global Waypoint_5_q=[-0.6683792703713491, -0.4496419068197399, 0.6219213322793626, 1.4031259616167633, 1.580487111302169, 1.8475669599512976]
  global Waypoint_6_p=p[-1.188017059666, .139834501007, .225000000000, 1.874814936175, .604332597686, -1.851808986183]
  global Waypoint_6_q=[-0.5529802356444034, -0.9029593356437218, 1.5295972351126421, 0.9499579130159566, 1.5801176236410068, 1.9621564217352658]
  global Waypoint_7_p=p[-.982135148678, .139822027395, .225000000000, 1.874813548707, .604322025756, -1.851786018405]
  global Waypoint_7_q=[-0.6917578954213361, -1.0779895131704667, 1.8527459165188123, 0.8004401611371224, 1.5810879548689707, 1.8233982181559218]
  $ 2 "Robot Program"
  $ 3 "Home"
  movej([-3.4579734502641006, -2.05691362454537, 2.326567589830591, -0.22707360390354125, -0.19934432301767302, -0.10534790278823536], a=1.3962634015954636, v=1.0471975511965976)
  $ 4 "MoveJ"
  $ 5 "Waypoint_8" "breakAfter"
  movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 6 "'extrude out a foot'"
  # 'extrude out a foot'
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 7 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 8 "Wait: 48.0"
  sleep(48.0)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 9 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 10 "Popup: grab extrusion then press ok"
  popup("grab extrusion then press ok", "Message", False, False, blocking=True)
  $ 11 "'approach'"
  # 'approach'
  $ 12 "MoveJ"
  $ 13 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 14 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 15 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 16 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 17 "'get into position'"
  # 'get into position'
  $ 18 "MoveL"
  $ 19 "Waypoint_5" "breakAfter"
  movel(Waypoint_5_p, a=0.1, v=0.02)
  $ 20 "'preheat'"
  # 'preheat'
  $ 21 "Wait: 8.0"
  sleep(8.0)
  $ 22 "'extrude'"
  # 'extrude'
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 23 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 24 "Wait: 0.1"
  sleep(0.1)
  $ 25 "MoveL"
  $ 26 "Waypoint_6" "breakAfter"
  movel(Waypoint_6_p, a=0.05, v=0.01)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 27 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 28 "MoveJ"
  $ 29 "Waypoint_7" "breakAfter"
  movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 30 "'go back'"
  # 'go back'
  $ 31 "MoveJ"
  $ 32 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 33 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 34 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 35 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 36 "Home"
  movej([-3.4579734502641006, -2.05691362454537, 2.326567589830591, -0.22707360390354125, -0.19934432301767302, -0.10534790278823536], a=1.3962634015954636, v=1.0471975511965976)
end
