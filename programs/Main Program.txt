 Program
   Variables Setup
   Robot Program
     'start of main program'
     Home
     Set
     Test_Teach_Position()
     Set
     Corner_Homing_45()
     Set
     extrude_knife()
     Script: analyze_touchpoints.script
     'path1≔analyze_touchpoints(p11,p12,p21,p22,p3)'
     'Call move_path_1'
     'MoveJ'
     pathturn≔main_calculate_right(p11,p12,p21,p22,p3)
     'Popup'
     Call move_path_3
     Home
   move_path_3
     'this is the path for Down, Over, then Back Around'
     Comment
     Home
     MoveJ
       Waypoint_1
       Waypoint_7
       'Waypoint_1'
       'Waypoint_2'
       'Waypoint_3'
       'Home'
     Comment
     p1≔pathturn[0]
     p2≔pathturn[1]
     p4≔pathturn[2]
     p5≔pathturn[3]
     MoveJ
       p1
     Wait: 6.0
     MoveL
       p2
     Wait: 2.0
     MoveL
       p4
     MoveL
       p5
     Comment
     pret1≔p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]
     p_1≔pathturn[4]
     p_2≔pathturn[5]
     p_3≔pathturn[6]
     p_4≔pathturn[7]
     p_5≔pathturn[8]
     MoveJ
       pret1
       Waypoint_8
       Waypoint_9
       Waypoint_22
     MoveJ
       p_1
     MoveL
       p_2
     MoveP
       CircleMove
         p_3
         p_4
     MoveL
       p_5
     MoveL
       Waypoint_23
     MoveJ
       Waypoint_24
     Comment
     Comment
     Comment
     Comment
     Comment
     Comment
     Comment
     Home
   Test_Teach_Position
     Home
     'MoveL'
     MoveJ
       Waypoint_2
     freedrive_m_var≔ False 
     freedrive_m_var≔ True 
     Popup: Move the robot to the peg center, then click 'Continue'
     freedrive_m_var≔ False 
     Wait: 0.25
     sync()
     tcp_pose≔get_actual_joint_positions()
   'move_path_1'
   Corner_Homing_BRB
     'Use this program when tool is already positioned close to corner (back right bottom corner)'
     'tool flange will seek all 3 sides. will save those 5 locs in p__'
     align_tcp_left()
     'right side'
     MoveL
       Direction: Base X-
         Until (distance)
     MoveL
       Direction: Base Y-
         Until (tool_contact_detection)
     p11≔get_actual_tcp_pose()
     MoveL
       Direction: Base Y+
         Until (distance)
     MoveL
       Direction: Base X-
         Until (distance)
     MoveL
       Direction: Base Y-
         Until (tool_contact_detection)
     p12≔get_actual_tcp_pose()
     MoveL
       Direction: Base Y+
         Until (distance)
     MoveL
       Direction: Base X+
         Until (distance)
     align_tcp_forward()
     'back side'
     MoveL
       Direction: Base Y-
         Until (distance)
     MoveL
       Direction: Base X-
         Until (tool_contact_detection)
     p21≔get_actual_tcp_pose()
     MoveL
       Direction: Base X+
         Until (distance)
     MoveL
       Direction: Base Y-
         Until (distance)
     MoveL
       Direction: Base X-
         Until (tool_contact_detection)
     p22≔get_actual_tcp_pose()
     MoveL
       Direction: Base X+
         Until (distance)
     'regroup for up turn'
     MoveL
       Direction: Base X+
         Until (distance)
       Direction: Base Y+
         Until (distance)
     MoveL
       Direction: Base Z-
         Until (distance)
     align_tcp_up()
     MoveL
       Direction: Base X-
         Until (distance)
       Direction: Base Y-
         Until (distance)
     'bottom side'
     MoveL
       Direction: Base Z+
         Until (tool_contact_detection)
     p3≔get_actual_tcp_pose()
     MoveL
       Direction: Base Z-
         Until (distance)
     MoveL
       Direction: Base X+
         Until (distance)
       Direction: Base Y+
         Until (distance)
   extrude_knife
     'Move to bucket'
     MoveJ
       Waypoint_3
     MoveL
       Waypoint_4
     'extrude out a foot'
     Wait: 6.0
     MoveL
       'slice over knife'
       Waypoint_5
     MoveL
       Waypoint_6
       'raise up away from knife'
     Home
   align_tcp_left
     'this program aligns the tcp parallel to the y direction'
     cp≔get_actual_tcp_pose()
     aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]
     MoveJ
       aligned_y_pose
   align_tcp_forward
     'this program aligns the tcp parallel to the y direction'
     cp≔get_actual_tcp_pose()
     aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]
     MoveJ
       aligned_y_pose
   align_tcp_up
     'this program aligns the tcp parallel to the y direction'
     cp≔get_actual_tcp_pose()
     aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]
     MoveJ
       aligned_y_pose
   Corner_Homing_45
     'Use this program when tool is already positioned close to corner at 45deg'
     'tool flange will seek all 3 sides. will save those 5 locs in p__'
     Set
     'dummy move below for debug'
     'Home'
     'MoveJ'
     Wait: 1.0
     tp≔get_actual_tcp_pose()
     Script: analyze_touchpoints.script
     path_pre≔get_corner_homing_45_pathpoints(tp)
     ph1≔path_pre[0]
     ph2≔path_pre[1]
     ph3≔path_pre[2]
     ph4≔path_pre[3]
     ph5≔path_pre[4]
     ph6≔path_pre[5]
     ph7≔path_pre[6]
     MoveJ
       ph1
       ph2
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p11≔get_actual_tcp_pose()
     MoveJ
       ph3
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p12≔get_actual_tcp_pose()
     MoveJ
       ph3
       Waypoint_10
     MoveJ
       Waypoint_11
       Waypoint_12
     MoveJ
       ph4
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p21≔get_actual_tcp_pose()
     MoveJ
       ph5
     MoveL
       Direction: Base
         Until (tool_contact_detection)
     p22≔get_actual_tcp_pose()
     MoveJ
       ph5
       ph4
       Waypoint_13
       Waypoint_14
       Waypoint_15
       Waypoint_16
       ph6
       ph7
     MoveL
       Direction: Base Z+
         Until (tool_contact_detection)
     p3≔get_actual_tcp_pose()
     MoveJ
       ph7
       ph6
       Waypoint_17
       Waypoint_18
     Home
     Comment
     Comment
     Comment
     Comment
     Comment
     Comment
   Thread_1
     Loop  True 
       If freedrive_m_var≟ True 
         freedrive_mode()
       Else
         end_freedrive_mode()
       sync()
