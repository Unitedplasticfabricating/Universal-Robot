def Test_Teach_Sleeve_Fillet():
  global _hidden_verificationVariable=0
  step_count_01f5a6c8_181f_4fb1_9154_f6521e7944d5 = 0.0
  thread Step_Counter_Thread_a78b00b5_ec02_47e9_9be0_237c01b12c36():
    while (True):
      step_count_01f5a6c8_181f_4fb1_9154_f6521e7944d5 = step_count_01f5a6c8_181f_4fb1_9154_f6521e7944d5 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_a78b00b5_ec02_47e9_9be0_237c01b12c36()
  set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global free_dr_already=  False  
  global freedrive_m_var=  False  
  global Waypoint_40_p=p[.360688403366, .270119715397, .646144746546, .057805349154, 2.125995180379, 2.134053153683]
  global Waypoint_40_q=[-3.4579489866839808, -2.0569035015501917, 2.3265796343432825, -0.22706706941638188, -0.1993501822101038, -0.10534793535341436]
  global Waypoint_4_p=p[-.946630124632, .032923381900, .107552705981, 1.185454309960, -1.454555354099, -1.299118354301]
  global Waypoint_4_q=[-0.2569616476642054, -0.5652156633189698, 2.1277363936053675, 1.6977440553852539, -1.5244362990008753, -3.155255142842428]
  global Waypoint_5_p=p[-1.246556955217, .036359765855, -.286524111400, .362936624150, -1.259487309986, -1.722169695113]
  global Waypoint_5_q=[0.021328113973140717, -0.19566209733996587, 1.7540667692767542, 4.160078211421631, -4.071899954472677, -0.05374271074403936]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_6_p=p[.394188295971, .534375672619, .630191192789, .057805349154, 2.125995180379, 2.134053153683]
  global Waypoint_6_q=[-3.460614019099072, -2.0560080618431087, 2.3261236780302905, -0.22243716377378675, -0.20045530471078976, -0.110516442897584]
  $ 40 "Thread_1"
  thread Thread_1():
    $ 41 "Loop  True "
    while (  True  ):
      $ 42 "If freedrive_m_var≟ True "
      if (freedrive_m_var ==   True  ):
        $ 43 "freedrive_mode()"
        freedrive_mode()
        $ 44 "free_dr_already≔ True "
        global free_dr_already=  True  
      else:
        $ 45 "Else" "noBreak"
        $ 46 "If free_dr_already"
        if (free_dr_already):
          $ 47 "end_freedrive_mode()"
          end_freedrive_mode()
          $ 48 "free_dr_already≔ False "
          global free_dr_already=  False  
        end
      end
      $ 49 "sync()"
      sync()
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 2 "Robot Program"
    $ 3 "Set"
    set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
    $ 7 "MoveJ"
    $ 8 "Waypoint_40" "breakAfter"
    set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
    movej(get_inverse_kin(Waypoint_40_p, qnear=Waypoint_40_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "'above waypoint is home'"
    # 'above waypoint is home'
    $ 12 "Waypoint_4" "breakAfter"
    set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 13 "Set"
    set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
    $ 14 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 15 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 16 "Popup: Move the TCP to point 1 on the edge then click 'Continue'"
    popup("Move the TCP to point 1 on the edge then click 'Continue'", "Message", False, False, blocking=True)
    $ 17 "tcp_pose_left≔get_actual_tcp_pose()"
    global tcp_pose_left= get_actual_tcp_pose ()
    $ 18 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 19 "sync()"
    sync()
    $ 20 "Wait: 0.01"
    sleep(0.01)
    $ 21 "MoveJ"
    $ 22 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "MoveJ"
    $ 24 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 25 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 26 "Popup: Move the TCP to point 2 on the edge then click 'Continue'"
    popup("Move the TCP to point 2 on the edge then click 'Continue'", "Message", False, False, blocking=True)
    $ 27 "tcp_pose_right≔get_actual_tcp_pose()"
    global tcp_pose_right= get_actual_tcp_pose ()
    $ 28 "Popup: Move the TCP to point 3 on the edge then click 'Continue'"
    popup("Move the TCP to point 3 on the edge then click 'Continue'", "Message", False, False, blocking=True)
    $ 29 "tcp_3≔get_actual_tcp_pose()"
    global tcp_3= get_actual_tcp_pose ()
    $ 30 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 31 "Wait: 0.25"
    sleep(0.25)
    $ 32 "sync()"
    sync()
    $ 33 "MoveL"
    $ 34 "Direction: Base"
    global move_thread_flag_34=0
    thread move_thread_34():
      enter_critical
      move_thread_flag_34 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,-0.5], 0.15)
      movel(towardsPos, a=1.2, v=0.1)
      move_thread_flag_34 = 2
      exit_critical
    end
    move_thread_flag_34 = 0
    move_thread_han_34 = run move_thread_34()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_34 > 1):
        join move_thread_han_34
        $ 35 "Until (distance)"
        break
      end
      sync()
    end
    $ 36 "MoveJ"
    $ 37 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 38 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 39 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
