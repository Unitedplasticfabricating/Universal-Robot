def Step_Corner_Around_Up():
  global _hidden_verificationVariable=0
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_180e5910_9a75_428e_b335_32fb1023a526 = 0.0
  thread Step_Counter_Thread_477c9a7a_a780_4362_853b_fa8699b24cca():
    while (True):
      step_count_180e5910_9a75_428e_b335_32fb1023a526 = step_count_180e5910_9a75_428e_b335_32fb1023a526 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_477c9a7a_a780_4362_853b_fa8699b24cca()
  global endpt_of_L_p=p[-1.080053541010, .352632940315, -.086722122575, .034138323661, -.000794950937, -2.630970910212]
  global endpt_of_L_q=[-0.7288746434602373, 0.09414474833129827, 1.3534511747335065, 1.7769157751222373, -0.33301002562846893, -0.07220727355382817]
  global imprecise_p=p[-1.395520617412, .339518222007, -.063923933709, .076560634863, -.034712548280, -2.593534170151]
  global imprecise_q=[-0.5534003416644495, 0.17247383176770015, 0.862671200429098, 2.2172841268726806, -0.472511116658346, -0.05950814882387334]
  global Waypoint_2_p=p[-1.395520617229, .339518221911, -.075451357924, .013411160346, -.052421395460, -2.595149508073]
  global Waypoint_2_q=[-0.5419964048226475, 0.2296396489695721, 0.7471542514957417, 2.1684303975105266, -0.4834824758645695, 0.035988584604530284]
  global Waypoint_3_p=p[-1.363088089911, .286142331689, -.072943102022, .013411160346, -.052421395460, -2.595149508073]
  global Waypoint_3_q=[-0.5177274487303452, 0.18472582672345705, 0.885413673980089, 2.0749617316997444, -0.5077737437427992, 0.036072166093989284]
  global Waypoint_1_p=p[-1.363088089686, .286142331576, -.072943102243, .246777452396, -.885611316230, -2.462240997167]
  global Waypoint_1_q=[-0.4250088639972507, 0.02752197209528491, 1.2858478908305484, 1.8312595794184947, -0.6005541717112877, 0.6865618234807602]
  global Waypoint_4_p=p[-1.363088089563, .286142331462, -.072943102304, .557823510228, -1.995565622393, -1.842891908022]
  global Waypoint_4_q=[-0.35018553449202017, -0.3093752441552322, 1.6874540134301772, 1.7660385169173403, -0.6755411227058294, 1.6467755203037702]
  global Waypoint_5_p=p[-1.363853802416, .287864313597, .202007715700, .534861162883, -1.913664433499, -1.911961212391]
  global Waypoint_5_q=[-0.35125404625717493, -0.5935761813558393, 1.8184879072745819, 1.9189557245291267, -0.6746048387761556, 1.5684798821021404]
  global Waypoint_6_p=p[-1.055376856472, .266316268621, -.070866329630, -.001368065845, .072072898288, -.822368938135]
  global Waypoint_6_q=[-0.4998825232135218, -0.12293465555224614, 1.0098236242877405, -0.9532327812961121, -1.2469342390643519, -3.149652067814962]
  global Waypoint_7_p=p[-1.055376856277, .266316268514, -.079466329650, -.001368065845, .072072898288, -.822368938135]
  global Waypoint_7_q=[-0.4998860686797224, -0.11376893524885645, 1.0023116323357466, -0.9548875188450587, -1.2469424210119957, -3.1496488995771443]
  global Waypoint_8_p=p[-.998403729570, .319288964113, -.081739477962, -.001368065849, .072072898282, -.822368938135]
  global Waypoint_8_q=[-0.5568140054562818, -0.13903446501445238, 1.0813378689424515, -1.0075111304731514, -1.3037307111338023, -3.1535350978682395]
  global Waypoint_9_p=p[-.998403729475, .319288964083, -.081739478223, .884463951737, -.319863276745, -.793152299340]
  global Waypoint_9_q=[-0.772606912584596, -0.32614630285887714, 1.36223113914767, -1.0990365844962575, -1.5189707796429452, -2.226024238652971]
  global Waypoint_10_p=p[-.998403729325, .319288964148, -.081739478304, 1.496129092424, -.597426462823, -.693244411539]
  global Waypoint_10_q=[-0.8351176573889827, -0.5378611067109427, 1.4927145426684074, -1.0177108175182212, -1.5812660095718103, -1.5741767087363634]
  global Waypoint_11_p=p[-.977341110917, .298379464079, .383403631801, 1.496129092424, -.597426462823, -.693244411539]
  global Waypoint_11_q=[-0.8362264799919643, -0.9364674259329, 1.4882150165367962, -0.6146107917408576, -1.582301402983484, -1.5746659930303508]
  global Waypoint_12_p=p[-1.015126703939, .349356626766, -.100767667235, -.047502117041, .031668620771, -2.884151600967]
  global Waypoint_12_q=[-0.7331971696822244, 0.12057363838430568, 1.424553807299759, 1.547530504857324, -0.5815125069853204, 0.013849867661794413]
  global Waypoint_13_p=p[-1.015126703888, .349356626831, -.100767667544, -.035691268919, .036750850327, -2.459414625349]
  global Waypoint_13_q=[-0.770140374334269, 0.12810695617941104, 1.268456713999256, 1.633476995576089, -0.12017492949213704, 0.07480209560779993]
  global Waypoint_14_p=p[-.966444151196, .289338792179, -.103526372870, -.035691268914, .036750850329, -2.459414625350]
  global Waypoint_14_q=[-0.7597710286770631, 0.12059109373039689, 1.382344210193942, 1.5362581359583425, -0.13044057042879054, 0.06555361964185558]
  global Waypoint_15_p=p[-.966444151035, .289338792208, -.103526372868, -.052779658001, .028800236572, -3.060410899096]
  global Waypoint_15_q=[-0.6816733389627601, 0.1304443136451759, 1.5546616102546602, 1.4133284672836943, -0.8092263195535114, 0.007896063247939011]
  global Waypoint_16_p=p[-1.021436700501, .285676414648, -.074593474039, .049408131508, -.004538908321, 2.302991188999]
  global Waypoint_16_q=[-0.35918938948558043, 0.09275698447115577, 1.500426435347494, 1.5061120445748586, -2.0502909046890743, -0.008916145517961382]
  global Waypoint_17_p=p[-1.096236328763, .240938279861, -.073252543267, .049578913575, -.004844190971, 2.312177537615]
  global Waypoint_17_q=[-0.28564181604480154, 0.093400733670542, 1.4023676245156116, 1.6016041393180855, -2.114608266372401, -0.012534882481502585]
  while (True):
    $ 2 "Robot Program"
    $ 3 "dummy points"
    $ 4 "MoveJ"
    $ 5 "endpt_of_L" "breakAfter"
    movej(get_inverse_kin(endpt_of_L_p, qnear=endpt_of_L_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 6 "'left seam path'"
    # 'left seam path'
    $ 7 "MoveJ"
    $ 8 "imprecise" "breakAfter"
    movej(get_inverse_kin(imprecise_p, qnear=imprecise_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 10 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 11 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 12 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 13 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 14 "'right seam path'"
    # 'right seam path'
    $ 15 "'must be closer'"
    # 'must be closer'
    $ 16 "MoveJ"
    $ 17 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 18 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 19 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 21 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 22 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "'under L path for closer'"
    # 'under L path for closer'
    $ 24 "MoveJ"
    $ 25 "'major problems regarding self collisions'"
    # 'major problems regarding self collisions'
    $ 26 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 27 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 28 "Waypoint_14" "breakAfter"
    movej(get_inverse_kin(Waypoint_14_p, qnear=Waypoint_14_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 29 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 30 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 31 "Waypoint_17" "breakAfter"
    movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
