def Corner_Homing_BRB():
  global _hidden_verificationVariable=0
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_target_payload(0.310000, [0.000000, 0.000000, 0.009500], [0.000219, 0.000219, 0.000219, 0.000000, 0.000000, 0.000000])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb = 0.0
  thread Step_Counter_Thread_70793aa9_04f0_4a00_a81a_f8e9561ae1e6():
    while (True):
      step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb = step_count_25c65f44_06b5_40e8_ab7a_4740e82bbebb + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_70793aa9_04f0_4a00_a81a_f8e9561ae1e6()
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  def align_tcp_up():
    $ 83 "align_tcp_up" "noBreak"
    $ 84 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 85 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 86 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 87 "MoveJ"
    $ 88 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_left():
    $ 89 "align_tcp_left" "noBreak"
    $ 90 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 91 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 92 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 93 "MoveJ"
    $ 94 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_forward():
    $ 95 "align_tcp_forward" "noBreak"
    $ 96 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 97 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 98 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 99 "MoveJ"
    $ 100 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 2 "Robot Program"
  $ 3 "'Use this program when tool is already positioned close to corner (back right bottom corner)'"
  # 'Use this program when tool is already positioned close to corner (back right bottom corner)'
  $ 4 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
  # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
  $ 5 "align_tcp_left()"
  align_tcp_left()
  $ 6 "'right side'"
  # 'right side'
  $ 7 "MoveL"
  $ 8 "Direction: Base X-"
  global move_thread_flag_8=0
  thread move_thread_8():
    enter_critical
    move_thread_flag_8 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_8 = 2
    exit_critical
  end
  move_thread_flag_8 = 0
  move_thread_han_8 = run move_thread_8()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_8 > 1):
      join move_thread_han_8
      $ 9 "Until (distance)"
      break
    end
    sync()
  end
  $ 10 "MoveL"
  $ 11 "Direction: Base Y-"
  global move_thread_flag_11=0
  thread move_thread_11():
    enter_critical
    move_thread_flag_11 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_11 = 2
    exit_critical
  end
  move_thread_flag_11 = 0
  move_thread_han_11 = run move_thread_11()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_11
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 12 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 13 "p11≔get_actual_tcp_pose()"
  global p11= get_actual_tcp_pose ()
  $ 14 "MoveL"
  $ 15 "Direction: Base Y+"
  global move_thread_flag_15=0
  thread move_thread_15():
    enter_critical
    move_thread_flag_15 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_15 = 2
    exit_critical
  end
  move_thread_flag_15 = 0
  move_thread_han_15 = run move_thread_15()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_15 > 1):
      join move_thread_han_15
      $ 16 "Until (distance)"
      break
    end
    sync()
  end
  $ 17 "MoveL"
  $ 18 "Direction: Base X-"
  global move_thread_flag_18=0
  thread move_thread_18():
    enter_critical
    move_thread_flag_18 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_18 = 2
    exit_critical
  end
  move_thread_flag_18 = 0
  move_thread_han_18 = run move_thread_18()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_18 > 1):
      join move_thread_han_18
      $ 19 "Until (distance)"
      break
    end
    sync()
  end
  $ 20 "MoveL"
  $ 21 "Direction: Base Y-"
  global move_thread_flag_21=0
  thread move_thread_21():
    enter_critical
    move_thread_flag_21 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_21 = 2
    exit_critical
  end
  move_thread_flag_21 = 0
  move_thread_han_21 = run move_thread_21()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_21
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 22 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 23 "p12≔get_actual_tcp_pose()"
  global p12= get_actual_tcp_pose ()
  $ 24 "MoveL"
  $ 25 "Direction: Base Y+"
  global move_thread_flag_25=0
  thread move_thread_25():
    enter_critical
    move_thread_flag_25 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_25 = 2
    exit_critical
  end
  move_thread_flag_25 = 0
  move_thread_han_25 = run move_thread_25()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_25 > 1):
      join move_thread_han_25
      $ 26 "Until (distance)"
      break
    end
    sync()
  end
  $ 27 "MoveL"
  $ 28 "Direction: Base X+"
  global move_thread_flag_28=0
  thread move_thread_28():
    enter_critical
    move_thread_flag_28 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_28 = 2
    exit_critical
  end
  move_thread_flag_28 = 0
  move_thread_han_28 = run move_thread_28()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_28 > 1):
      join move_thread_han_28
      $ 29 "Until (distance)"
      break
    end
    sync()
  end
  $ 30 "align_tcp_forward()"
  align_tcp_forward()
  $ 31 "'back side'"
  # 'back side'
  $ 32 "MoveL"
  $ 33 "Direction: Base Y-"
  global move_thread_flag_33=0
  thread move_thread_33():
    enter_critical
    move_thread_flag_33 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_33 = 2
    exit_critical
  end
  move_thread_flag_33 = 0
  move_thread_han_33 = run move_thread_33()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_33 > 1):
      join move_thread_han_33
      $ 34 "Until (distance)"
      break
    end
    sync()
  end
  $ 35 "MoveL"
  $ 36 "Direction: Base X-"
  global move_thread_flag_36=0
  thread move_thread_36():
    enter_critical
    move_thread_flag_36 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_36 = 2
    exit_critical
  end
  move_thread_flag_36 = 0
  move_thread_han_36 = run move_thread_36()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_36
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 37 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 38 "p21≔get_actual_tcp_pose()"
  global p21= get_actual_tcp_pose ()
  $ 39 "MoveL"
  $ 40 "Direction: Base X+"
  global move_thread_flag_40=0
  thread move_thread_40():
    enter_critical
    move_thread_flag_40 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_40 = 2
    exit_critical
  end
  move_thread_flag_40 = 0
  move_thread_han_40 = run move_thread_40()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_40 > 1):
      join move_thread_han_40
      $ 41 "Until (distance)"
      break
    end
    sync()
  end
  $ 42 "MoveL"
  $ 43 "Direction: Base Y-"
  global move_thread_flag_43=0
  thread move_thread_43():
    enter_critical
    move_thread_flag_43 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_43 = 2
    exit_critical
  end
  move_thread_flag_43 = 0
  move_thread_han_43 = run move_thread_43()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_43 > 1):
      join move_thread_han_43
      $ 44 "Until (distance)"
      break
    end
    sync()
  end
  $ 45 "MoveL"
  $ 46 "Direction: Base X-"
  global move_thread_flag_46=0
  thread move_thread_46():
    enter_critical
    move_thread_flag_46 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_46 = 2
    exit_critical
  end
  move_thread_flag_46 = 0
  move_thread_han_46 = run move_thread_46()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_46
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 47 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 48 "p22≔get_actual_tcp_pose()"
  global p22= get_actual_tcp_pose ()
  $ 49 "MoveL"
  $ 50 "Direction: Base X+"
  global move_thread_flag_50=0
  thread move_thread_50():
    enter_critical
    move_thread_flag_50 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_50 = 2
    exit_critical
  end
  move_thread_flag_50 = 0
  move_thread_han_50 = run move_thread_50()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_50 > 1):
      join move_thread_han_50
      $ 51 "Until (distance)"
      break
    end
    sync()
  end
  $ 52 "'regroup for up turn'"
  # 'regroup for up turn'
  $ 53 "MoveL"
  $ 54 "Direction: Base X+"
  global move_thread_flag_54=0
  thread move_thread_54():
    enter_critical
    move_thread_flag_54 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_54 = 2
    exit_critical
  end
  move_thread_flag_54 = 0
  move_thread_han_54 = run move_thread_54()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_54 > 1):
      join move_thread_han_54
      $ 55 "Until (distance)"
      break
    end
    sync()
  end
  $ 56 "Direction: Base Y+"
  global move_thread_flag_56=0
  thread move_thread_56():
    enter_critical
    move_thread_flag_56 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.4)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_56 = 2
    exit_critical
  end
  move_thread_flag_56 = 0
  move_thread_han_56 = run move_thread_56()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_56 > 1):
      join move_thread_han_56
      $ 57 "Until (distance)"
      break
    end
    sync()
  end
  $ 58 "MoveL"
  $ 59 "Direction: Base Z-"
  global move_thread_flag_59=0
  thread move_thread_59():
    enter_critical
    move_thread_flag_59 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_59 = 2
    exit_critical
  end
  move_thread_flag_59 = 0
  move_thread_han_59 = run move_thread_59()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_59 > 1):
      join move_thread_han_59
      $ 60 "Until (distance)"
      break
    end
    sync()
  end
  $ 61 "align_tcp_up()"
  align_tcp_up()
  $ 62 "MoveL"
  $ 63 "Direction: Base X-"
  global move_thread_flag_63=0
  thread move_thread_63():
    enter_critical
    move_thread_flag_63 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.25)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_63 = 2
    exit_critical
  end
  move_thread_flag_63 = 0
  move_thread_han_63 = run move_thread_63()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_63 > 1):
      join move_thread_han_63
      $ 64 "Until (distance)"
      break
    end
    sync()
  end
  $ 65 "Direction: Base Y-"
  global move_thread_flag_65=0
  thread move_thread_65():
    enter_critical
    move_thread_flag_65 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.3)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_65 = 2
    exit_critical
  end
  move_thread_flag_65 = 0
  move_thread_han_65 = run move_thread_65()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_65 > 1):
      join move_thread_han_65
      $ 66 "Until (distance)"
      break
    end
    sync()
  end
  $ 67 "'bottom side'"
  # 'bottom side'
  $ 68 "MoveL"
  $ 69 "Direction: Base Y-"
  global move_thread_flag_69=0
  thread move_thread_69():
    enter_critical
    move_thread_flag_69 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.12)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_69 = 2
    exit_critical
  end
  move_thread_flag_69 = 0
  move_thread_han_69 = run move_thread_69()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_69 > 1):
      join move_thread_han_69
      $ 70 "Until (distance)"
      break
    end
    sync()
  end
  $ 71 "MoveL"
  $ 72 "Direction: Base Z+"
  global move_thread_flag_72=0
  thread move_thread_72():
    enter_critical
    move_thread_flag_72 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_72 = 2
    exit_critical
  end
  move_thread_flag_72 = 0
  move_thread_han_72 = run move_thread_72()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_72
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 73 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 74 "p3≔get_actual_tcp_pose()"
  global p3= get_actual_tcp_pose ()
  $ 75 "MoveL"
  $ 76 "Direction: Base Z-"
  global move_thread_flag_76=0
  thread move_thread_76():
    enter_critical
    move_thread_flag_76 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_76 = 2
    exit_critical
  end
  move_thread_flag_76 = 0
  move_thread_han_76 = run move_thread_76()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_76 > 1):
      join move_thread_han_76
      $ 77 "Until (distance)"
      break
    end
    sync()
  end
  $ 78 "MoveL"
  $ 79 "Direction: Base X+"
  global move_thread_flag_79=0
  thread move_thread_79():
    enter_critical
    move_thread_flag_79 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_79 = 2
    exit_critical
  end
  move_thread_flag_79 = 0
  move_thread_han_79 = run move_thread_79()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_79 > 1):
      join move_thread_han_79
      $ 80 "Until (distance)"
      break
    end
    sync()
  end
  $ 81 "Direction: Base Y+"
  global move_thread_flag_81=0
  thread move_thread_81():
    enter_critical
    move_thread_flag_81 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_81 = 2
    exit_critical
  end
  move_thread_flag_81 = 0
  move_thread_han_81 = run move_thread_81()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_81 > 1):
      join move_thread_han_81
      $ 82 "Until (distance)"
      break
    end
    sync()
  end
end
