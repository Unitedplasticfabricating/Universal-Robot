def Corner_Homing_BRB():
  global _hidden_verificationVariable=0
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_target_payload(0.000000, [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[-4.516483728619642E-6,-4.494070941040221E-6,-3.385497268221845E-5,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  step_count_2e819fbe_8984_4a2b_8d1f_91501e3fbf18 = 0.0
  thread Step_Counter_Thread_501536ef_e188_45d2_a9a9_d9dc8aeb4fc4():
    while (True):
      step_count_2e819fbe_8984_4a2b_8d1f_91501e3fbf18 = step_count_2e819fbe_8984_4a2b_8d1f_91501e3fbf18 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_501536ef_e188_45d2_a9a9_d9dc8aeb4fc4()
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  def align_tcp_forward():
    $ 30 "align_tcp_forward" "noBreak"
    $ 31 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 32 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 33 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,1.570796,0]
    $ 34 "MoveJ"
    $ 35 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_left():
    $ 36 "align_tcp_left" "noBreak"
    $ 37 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 38 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 39 "aligned_y_pose≔p[cp[0],cp[1],cp[2],-1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],-1.570796,0,0]
    $ 40 "MoveJ"
    $ 41 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 2 "Robot Program"
  $ 3 "'Use this program when tool is already positioned close to corner (back right bottom corner)'"
  # 'Use this program when tool is already positioned close to corner (back right bottom corner)'
  $ 4 "'tool flange will seek all 3 sides and then bring tcp to the corner'"
  # 'tool flange will seek all 3 sides and then bring tcp to the corner'
  $ 5 "Call align_tcp_left"
  align_tcp_left()
  $ 6 "MoveL"
  $ 7 "Direction: Base X+"
  global move_thread_flag_7=0
  thread move_thread_7():
    enter_critical
    move_thread_flag_7 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_7 = 2
    exit_critical
  end
  move_thread_flag_7 = 0
  move_thread_han_7 = run move_thread_7()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_7 > 1):
      join move_thread_han_7
      $ 8 "Until (distance)"
      break
    end
    sync()
  end
  $ 9 "MoveL"
  $ 10 "Direction: Base Y+"
  global move_thread_flag_10=0
  thread move_thread_10():
    enter_critical
    move_thread_flag_10 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_10 = 2
    exit_critical
  end
  move_thread_flag_10 = 0
  move_thread_han_10 = run move_thread_10()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_10
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 11 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 12 "p11≔get_actual_tcp_pose()"
  global p11= get_actual_tcp_pose ()
  $ 13 "MoveL"
  $ 14 "Direction: Base Y-"
  global move_thread_flag_14=0
  thread move_thread_14():
    enter_critical
    move_thread_flag_14 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_14 = 2
    exit_critical
  end
  move_thread_flag_14 = 0
  move_thread_han_14 = run move_thread_14()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_14 > 1):
      join move_thread_han_14
      $ 15 "Until (distance)"
      break
    end
    sync()
  end
  $ 16 "MoveL"
  $ 17 "Direction: Base X+"
  global move_thread_flag_17=0
  thread move_thread_17():
    enter_critical
    move_thread_flag_17 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_17 = 2
    exit_critical
  end
  move_thread_flag_17 = 0
  move_thread_han_17 = run move_thread_17()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_17 > 1):
      join move_thread_han_17
      $ 18 "Until (distance)"
      break
    end
    sync()
  end
  $ 19 "MoveL"
  $ 20 "Direction: Base Y+"
  global move_thread_flag_20=0
  thread move_thread_20():
    enter_critical
    move_thread_flag_20 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 1000.0)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_20 = 2
    exit_critical
  end
  move_thread_flag_20 = 0
  move_thread_han_20 = run move_thread_20()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_20
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 21 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 22 "p12≔get_actual_tcp_pose()"
  global p12= get_actual_tcp_pose ()
  $ 23 "MoveL"
  $ 24 "Direction: Base Y-"
  global move_thread_flag_24=0
  thread move_thread_24():
    enter_critical
    move_thread_flag_24 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.05)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_24 = 2
    exit_critical
  end
  move_thread_flag_24 = 0
  move_thread_han_24 = run move_thread_24()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_24 > 1):
      join move_thread_han_24
      $ 25 "Until (distance)"
      break
    end
    sync()
  end
  $ 26 "MoveL"
  $ 27 "Direction: Base X-"
  global move_thread_flag_27=0
  thread move_thread_27():
    enter_critical
    move_thread_flag_27 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.3)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_27 = 2
    exit_critical
  end
  move_thread_flag_27 = 0
  move_thread_han_27 = run move_thread_27()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_27 > 1):
      join move_thread_han_27
      $ 28 "Until (distance)"
      break
    end
    sync()
  end
  $ 29 "Call align_tcp_forward"
  align_tcp_forward()
end
