def walter():
  global _hidden_verificationVariable=0
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tcp(p[-0.0095,-0.328,0.105,1.2092,-1.2092,1.2092])
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_safety_mode_transition_hardness(1)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_72833100_fc90_47fe_9319_845165f37ee4 = 0.0
  thread Step_Counter_Thread_30e245f8_6016_415d_897a_51588f41a57d():
    while (True):
      step_count_72833100_fc90_47fe_9319_845165f37ee4 = step_count_72833100_fc90_47fe_9319_845165f37ee4 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_30e245f8_6016_415d_897a_51588f41a57d()
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_1_p=p[.135784482586, .828379775022, .441044676535, -1.117154836558, -2.927735111128, -.172376810473]
  global Waypoint_1_q=[-2.3332792874341854, -1.4561504462386239, 1.7916431511549897, 0.5792429165006757, -0.05442939800610347, -1.0156050671789645]
  global Waypoint_3_p=p[-.458665217855, .624458188405, .656722246005, -.003221840899, 3.140231145592, -.000052549594]
  global Waypoint_3_q=[-1.5707963267951435, -1.5707658096437491, 1.5708001295268081, 0.7853981619630135, -3.725908470642025E-12, -0.7853981633974483]
  global Waypoint_5_p=p[-.458711658920, .717931101097, .656722245948, -.003221840901, 3.140231145623, -.000052549593]
  global Waypoint_5_q=[-1.570759683713348, -1.4609333012690406, 1.4551384366162299, 0.799516151033612, 9.353734677208791E-5, -0.793686845465154]
  global Waypoint_4_p=p[-.152029134335, 1.000000000126, .508552873210, -2.155585589072, -1.010507858748, .596967226972]
  global Waypoint_4_q=[-1.7207549663237254, -1.4686461528378558, 2.19932302457041, 2.544802665033107, -2.0601323069465938, -2.2465796028960723]
  $ 2 "Robot Program"
  $ 3 "Popup: Hello World!"
  popup("Hello World!", "Message", False, False, blocking=True)
  $ 4 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
  $ 5 "MoveL"
  $ 6 "Direction: Base Z+"
  global move_thread_flag_6=0
  thread move_thread_6():
    enter_critical
    move_thread_flag_6 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 0.5)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_6 = 2
    exit_critical
  end
  move_thread_flag_6 = 0
  move_thread_han_6 = run move_thread_6()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_6 > 1):
      join move_thread_han_6
      $ 7 "Until (distance)"
      break
    end
    sync()
  end
  $ 8 "MoveJ"
  $ 9 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 10 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
  $ 11 "MoveJ"
  $ 12 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.3962634015954636)
  $ 13 "MoveL"
  $ 14 "Direction: Base Z-"
  global move_thread_flag_14=0
  thread move_thread_14():
    enter_critical
    move_thread_flag_14 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.1)
    movel(towardsPos, a=0.05, v=0.05)
    move_thread_flag_14 = 2
    exit_critical
  end
  move_thread_flag_14 = 0
  move_thread_han_14 = run move_thread_14()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_14 > 1):
      join move_thread_han_14
      $ 15 "Until (distance)"
      break
    end
    sync()
  end
  $ 16 "Loop 3 times"
  Loop_1 = 0
  while (Loop_1 < 3):
    $ 17 "Direction: Base"
    global move_thread_flag_17=0
    thread move_thread_17():
      enter_critical
      move_thread_flag_17 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,-1.0,0.0], 0.2)
      movel(towardsPos, a=0.05, v=0.05, r=0.05)
      move_thread_flag_17 = 2
      exit_critical
    end
    move_thread_flag_17 = 0
    move_thread_han_17 = run move_thread_17()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_17 > 1):
        join move_thread_han_17
        $ 18 "Until (distance)"
        break
      end
      sync()
    end
    $ 19 "Direction: Base"
    global move_thread_flag_19=0
    thread move_thread_19():
      enter_critical
      move_thread_flag_19 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,1.0,0.0], 0.2)
      movel(towardsPos, a=0.05, v=0.05, r=0.05)
      move_thread_flag_19 = 2
      exit_critical
    end
    move_thread_flag_19 = 0
    move_thread_han_19 = run move_thread_19()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_19 > 1):
        join move_thread_han_19
        $ 20 "Until (distance)"
        break
      end
      sync()
    end
    Loop_1 = Loop_1 + 1
  end
  $ 21 "MoveJ"
  $ 22 "Waypoint_5" "breakAfter"
  movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 23 "freedrive_mode()"
  freedrive_mode()
  $ 24 "fdStatus≔get_freedrive_status()"
  global fdStatus=get_freedrive_status()
  $ 25 "tcpPose≔get_actual_tcp_pose()"
  global tcpPose= get_actual_tcp_pose ()
  $ 26 "tcpZ≔tcpPose[2]"
  global tcpZ=tcpPose[2]
  $ 27 "Loop fdStatus == 0 and tcpZ < 0.8"
  while (fdStatus == 0  and  tcpZ < 0.8):
    $ 28 "fdStatus≔get_freedrive_status()"
    global fdStatus=get_freedrive_status()
    $ 29 "tcpPose≔get_actual_tcp_pose()"
    global tcpPose= get_actual_tcp_pose ()
    $ 30 "tcpZ≔tcpPose[2]"
    global tcpZ=tcpPose[2]
  end
  $ 31 "end_freedrive_mode()"
  end_freedrive_mode()
  $ 32 "Popup: Freedrive deactivated."
  popup("Freedrive deactivated.", "Message", False, False, blocking=True)
  $ 33 "MoveJ"
  $ 34 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 35 "Popup: Move tool with fixed TCP."
  popup("Move tool with fixed TCP.", "Message", False, False, blocking=True)
  $ 36 "centerPose≔get_actual_tcp_pose()"
  global centerPose= get_actual_tcp_pose ()
  $ 37 "Loop 3 times"
  Loop_2 = 0
  while (Loop_2 < 3):
    $ 38 "freedrive_mode()"
    freedrive_mode()
    $ 39 "tcpPose≔get_actual_tcp_pose()"
    global tcpPose= get_actual_tcp_pose ()
    $ 40 "tcpZ≔tcpPose[2]"
    global tcpZ=tcpPose[2]
    $ 41 "Loop sqrt(pow(tcpPose[2]-centerPose[2],2)+pow(tcpPose[1]-centerPose[1],2)+pow(tcpPose[0]-centerPose[0],2)) < 0.25"
    while (sqrt(pow(tcpPose[2]-centerPose[2],2)+pow(tcpPose[1]-centerPose[1],2)+pow(tcpPose[0]-centerPose[0],2)) < 0.25):
      $ 42 "tcpPose≔get_actual_tcp_pose()"
      global tcpPose= get_actual_tcp_pose ()
      $ 43 "tcpZ≔tcpPose[2]"
      global tcpZ=tcpPose[2]
    end
    $ 44 "end_freedrive_mode()"
    end_freedrive_mode()
    $ 45 "Wait: 1.0"
    sleep(1.0)
    $ 46 "MoveL"
    $ 47 "centerPose" "breakAfter"
    movel(centerPose, a=1.2, v=0.25)
    $ 48 "Wait: 1.0"
    sleep(1.0)
    Loop_2 = Loop_2 + 1
  end
  $ 49 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
end
