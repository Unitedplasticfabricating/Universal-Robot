def move_path_3right():
  global _hidden_verificationVariable=0
  step_count_054f3189_5318_4801_84bd_11f9ca30010b = 0.0
  thread Step_Counter_Thread_f68a657e_fa44_45a8_91bb_d295c1250127():
    while (True):
      step_count_054f3189_5318_4801_84bd_11f9ca30010b = step_count_054f3189_5318_4801_84bd_11f9ca30010b + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_f68a657e_fa44_45a8_91bb_d295c1250127()
  set_tcp(p[-0.005492233754671227,-0.3325814034474486,0.10639335834084135,1.2092,-1.2092,1.2092])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(8.700000, [-0.001000, -0.057000, 0.067000], [0.056650, 0.056650, 0.056650, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_8_p=p[-.689650873132, .138963273545, .230691387978, -.851994598965, -1.645998530536, 1.646007616333]
  global Waypoint_8_q=[-0.9414032141314905, -1.501500443821289, 2.801856819783346, 4.981602895050802, -4.698942009602682, 1.571649193763733]
  global Waypoint_9_p=p[-.161036555831, .970524399959, .722042384791, -.554954311189, .106465018540, .328580879483]
  global Waypoint_9_q=[-1.3071630636798304, -1.3366777312806626, 2.2083633581744593, 3.7187773424335937, -2.9519384543048304, 0.9132363796234131]
  global Waypoint_22_p=p[-.308534453517, .606084664264, .242393158856, 1.369873371142, 1.066881263643, -1.257197506198]
  global Waypoint_22_q=[-1.4685500303851526, -0.9664557737163086, 1.6195090452777308, 0.9282776552387695, 1.6574476957321167, 0.2630845010280609]
  global Waypoint_23_p=p[-.540166575654, .215949141041, .034631452617, -1.505795438113, 1.057579835594, 1.573514753692]
  global Waypoint_23_q=[-0.46167117754091436, -1.1365486842444916, 2.508885685597555, 0.15223841249432368, 1.4952874183654785, 3.819530963897705]
  global Waypoint_24_p=p[-.308525559537, .606096497354, .242373144855, -2.133742737559, .349425192770, 2.130939839044]
  global Waypoint_24_q=[-1.8709262053119105, -1.2877716285041352, 2.192875687276022, 0.7510036665150146, 1.5878156423568726, 1.5091480016708374]
  $ 2 "Robot Program"
  $ 3 "'this is the path for Down, Over, then Back Around'"
  # 'this is the path for Down, Over, then Back Around'
  $ 4 "Comment"
  # Comment
  $ 5 "Home"
  movej([-3.457960907612077, -2.0569125614558246, 2.3265898863420276, -0.2270763677409846, -0.1993520895578813, -0.10534269014486419], a=1.3962634015954636, v=1.0471975511965976)
  $ 14 "align_ready_for_welding()"
  align_ready_for_welding()
  $ 15 "Comment"
  # Comment
  $ 16 "p1≔pathturn[0]"
  global p1=pathturn[0]
  $ 17 "p2≔pathturn[1]"
  global p2=pathturn[1]
  $ 18 "p4≔pathturn[2]"
  global p4=pathturn[2]
  $ 19 "p5≔pathturn[3]"
  global p5=pathturn[3]
  $ 20 "MoveJ"
  $ 21 "p1" "breakAfter"
  movej(p1, a=1.3962634015954636, v=1.0471975511965976)
  $ 22 "Wait: 8.0"
  sleep(8.0)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 23 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 24 "Wait: 1.0"
  sleep(1.0)
  $ 25 "MoveL"
  $ 26 "p2" "breakAfter"
  movel(p2, a=0.1, v=0.01)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 27 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 28 "Wait: 0.5"
  sleep(0.5)
  $ 30 "MoveL"
  $ 31 "p4" "breakAfter"
  movel(p4, a=0.01, v=0.12)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 32 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 33 "Wait: 1.0"
  sleep(1.0)
  $ 34 "MoveL"
  $ 35 "p5" "breakAfter"
  movel(p5, a=0.1, v=0.01)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 36 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 37 "Wait: 2.0"
  sleep(2.0)
  $ 38 "Comment"
  # Comment
  $ 39 "pret1≔p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]"
  global pret1=p[p5[0]+.1,p5[1],p5[2],p5[3],p5[4],p5[5]]
  $ 40 "p_1≔pathturn[4]"
  global p_1=pathturn[4]
  $ 41 "p_2≔pathturn[5]"
  global p_2=pathturn[5]
  $ 42 "p_3≔pathturn[6]"
  global p_3=pathturn[6]
  $ 43 "p_4≔pathturn[7]"
  global p_4=pathturn[7]
  $ 44 "p_5≔pathturn[8]"
  global p_5=pathturn[8]
  $ 45 "p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
  global p_preheat=p[p_3[0]+.01,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
  $ 46 "p_pre_ret≔p[p_1[0]+.03,p_1[1]+.03,p_1[2],p_1[3],p_1[4],p_1[5]]"
  global p_pre_ret=p[p_1[0]+.03,p_1[1]+.03,p_1[2],p_1[3],p_1[4],p_1[5]]
  $ 47 "p_pre_ret2≔p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]"
  global p_pre_ret2=p[p_3[0]+.1,p_3[1],p_3[2],p_3[3],p_3[4],p_3[5]]
  $ 48 "MoveJ"
  $ 49 "pret1" "breakAfter"
  movej(pret1, a=1.3962634015954636, v=1.3962634015954636)
  $ 50 "Waypoint_8" "breakAfter"
  movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 51 "Waypoint_9" "breakAfter"
  movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.3962634015954636)
  $ 52 "Waypoint_22" "breakAfter"
  movej(get_inverse_kin(Waypoint_22_p, qnear=Waypoint_22_q), a=1.3962634015954636, v=1.3962634015954636)
  $ 53 "'preheat'"
  # 'preheat'
  $ 54 "MoveJ"
  $ 55 "p_pre_ret" "breakAfter"
  movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
  $ 56 "p_pre_ret2" "breakAfter"
  movej(p_pre_ret2, a=1.3962634015954636, v=1.0471975511965976)
  $ 57 "p_preheat" "breakAfter"
  movej(p_preheat, a=1.3962634015954636, v=1.0471975511965976)
  $ 58 "Wait: 8.0"
  sleep(8.0)
  $ 59 "MoveJ"
  $ 60 "p_pre_ret2" "breakAfter"
  movej(p_pre_ret2, a=1.3962634015954636, v=1.0471975511965976)
  $ 61 "p_pre_ret" "breakAfter"
  movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
  $ 62 "Set"
  set_tcp(p[0.00662,-0.33062,0.10207,1.2092,-1.2092,1.2092])
  $ 63 "MoveL"
  $ 64 "p_1" "breakAfter"
  movel(p_1, a=1.2, v=0.05)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 65 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 66 "Wait: 1.0"
  sleep(1.0)
  $ 67 "MoveL"
  $ 68 "p_2" "breakAfter"
  movel(p_2, a=1.2, v=0.01)
  $ 69 "MoveP"
  $ 70 "CircleMove"
  $ 71 "p_3" "noBreak"
  $ 72 "p_4" "breakAfter"
  movec(p_3, p_4, a=0.01, v=5.0E-4, r=0.0, mode=1)
  $ 73 "MoveL"
  $ 74 "p_5" "breakAfter"
  movel(p_5, a=1.2, v=0.012)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 75 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 5000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 76 "Wait: 2.0"
  sleep(2.0)
  $ 77 "MoveL"
  $ 78 "Waypoint_23" "breakAfter"
  movel(Waypoint_23_p, a=1.2, v=0.25)
  $ 79 "MoveJ"
  $ 80 "Waypoint_24" "breakAfter"
  movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 81 "Comment"
  # Comment
  $ 82 "Comment"
  # Comment
  $ 83 "Comment"
  # Comment
  $ 84 "Comment"
  # Comment
  $ 85 "Comment"
  # Comment
  $ 86 "Comment"
  # Comment
  $ 87 "Comment"
  # Comment
  $ 88 "Home"
  movej([-3.457960907612077, -2.0569125614558246, 2.3265898863420276, -0.2270763677409846, -0.1993520895578813, -0.10534269014486419], a=1.3962634015954636, v=1.0471975511965976)
end
