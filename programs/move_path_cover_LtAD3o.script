def move_path_cover_LtAD3o():
  global _hidden_verificationVariable=0
  set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 = 0.0
  thread Step_Counter_Thread_5cae079c_b6a8_4d9c_956a_44e16054eccd():
    while (True):
      step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 = step_count_6066afa7_6d3e_40c2_b283_208ec4fe33a3 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_5cae079c_b6a8_4d9c_956a_44e16054eccd()
  while (True):
    $ 2 "Robot Program"
    $ 3 "Comment"
    # Comment
    $ 4 "align_for_cover_left()"
    align_for_cover_left()
    $ 5 "Set"
    set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 6 "Comment"
    # Comment
    $ 7 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 8 "p2≔pathturn[1]"
    global p2=pathturn[1]
    $ 9 "p3≔pathturn[2]"
    global p3=pathturn[2]
    $ 10 "p4≔pathturn[3]"
    global p4=pathturn[3]
    $ 12 "pa1≔p[p1[0],p1[1],p1[2]+0.05,p1[3],p1[4],p1[5]]"
    global pa1=p[p1[0],p1[1],p1[2]+0.05,p1[3],p1[4],p1[5]]
    $ 13 "pa2≔p[p4[0],p4[1],p4[2]+0.05,p4[3],p4[4],p4[5]]"
    global pa2=p[p4[0],p4[1],p4[2]+0.05,p4[3],p4[4],p4[5]]
    $ 14 "p4a≔p[p4[0],p4[1],p4[2]-0.003,p4[3],p4[4],p4[5]]"
    global p4a=p[p4[0],p4[1],p4[2]-0.003,p4[3],p4[4],p4[5]]
    $ 15 "p2a≔pathturn[10]"
    global p2a=pathturn[10]
    $ 54 "MoveL"
    $ 55 "pa2" "breakAfter"
    movel(pa2, a=1.2, v=0.05)
    $ 56 "Comment"
    # Comment
    $ 60 "p_1≔pathturn[4]"
    global p_1=pathturn[4]
    $ 61 "p_2≔pathturn[5]"
    global p_2=pathturn[5]
    $ 62 "p_3≔pathturn[6]"
    global p_3=pathturn[6]
    $ 63 "p_4≔pathturn[7]"
    global p_4=pathturn[7]
    $ 64 "p_5≔pathturn[8]"
    global p_5=pathturn[8]
    $ 72 "p_preheat≔p[p_3[0]+.01,p_3[1],p_3[2]+0.01,p_3[3],p_3[4],p_3[5]]"
    global p_preheat=p[p_3[0]+.01,p_3[1],p_3[2]+0.01,p_3[3],p_3[4],p_3[5]]
    $ 73 "p_pre_ret≔p[p_1[0],p_1[1],p_1[2]+0.05,p_1[3],p_1[4],p_1[5]]"
    global p_pre_ret=p[p_1[0],p_1[1],p_1[2]+0.05,p_1[3],p_1[4],p_1[5]]
    $ 74 "p_pre_ret2≔p[p_3[0]+.1,p_3[1],p_3[2]+.1,p_3[3],p_3[4],p_3[5]]"
    global p_pre_ret2=p[p_3[0]+.1,p_3[1],p_3[2]+.1,p_3[3],p_3[4],p_3[5]]
    $ 75 "Set"
    set_tcp(p[0.00451,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 76 "MoveJ"
    $ 77 "p_pre_ret" "breakAfter"
    movej(p_pre_ret, a=1.3962634015954636, v=1.0471975511965976)
    $ 78 "MoveL"
    $ 80 "p_pre_ret2" "breakAfter"
    movel(p_pre_ret2, a=0.05, v=0.05)
    $ 81 "p_preheat" "breakAfter"
    movel(p_preheat, a=0.05, v=0.05)
    $ 82 "Wait: 6.0"
    sleep(6.0)
    $ 83 "MoveL"
    $ 84 "p_pre_ret2" "breakAfter"
    movel(p_pre_ret2, a=1.2, v=0.25)
    $ 85 "p_pre_ret" "breakAfter"
    movel(p_pre_ret, a=1.2, v=0.25)
    $ 86 "MoveL"
    $ 87 "p_1" "breakAfter"
    movel(p_1, a=1.2, v=0.02)
    $ 88 "turn ext on"
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 89 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 90 "Serial Bridge uR1"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
    # end: URCap Program Node
    $ 91 "Wait: 1.0"
    sleep(1.0)
    $ 93 "Set DO[0]=On"
    set_standard_digital_out(0, True)
    $ 94 "MoveL"
    $ 95 "p_2" "breakAfter"
    movel(p_2, a=1.2, v=0.01)
    $ 96 "MoveP"
    $ 97 "CircleMove"
    $ 98 "p_3" "noBreak"
    
    $ 99 "p_4" "breakAfter"
    movec(p_3, p_4, a=1.2, v=5.0E-4, r=0.0, mode=1)
    $ 100 "MoveL"
    $ 101 "p_5" "breakAfter"
    movel(p_5, a=1.2, v=0.01)
    # begin: URCap Program Node
    #   Source: WireTank Serial, 4.9.0, WireTank, LLC
    #   Type: WireTank Serial
    $ 134 "Serial Bridge uR0"
    SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
    # end: URCap Program Node
    $ 135 "Wait: 2.0"
    sleep(2.0)
    $ 136 "Set DO[0]=Off"
    set_standard_digital_out(0, False)
    $ 141 "Home"
    movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
    #   Type: MachineLogic for Universal Robots
    $ 142 "MachineLogic Homing"
    while isVentionMovementBusyMachineMotion1==True:
    sleep(0.05)
    end
    if(isVentionMovementBusyMachineMotion1 == False):
    isVentionMovementBusyMachineMotion1 = True
    socket_send_string("estop/status;", "MachineMotion1")
    temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
    while(temp_estop_var_vention=="estop/status true"):
    if temp_estop_var_vention=="estop/status true":
    sendStringWithTimeout("estop/systemreset/request","Ack estop/systemreset/request;","MachineMotion1")
    end
    socket_send_string("estop/status;", "MachineMotion1")
    temp_estop_var_vention = socket_read_string("MachineMotion1",timeout=15)
    if temp_estop_var_vention=="estop/status true":
    popup("MachineMotion in estop, make sure you have all emergency modules released manually. If you continue the system will try to reset MachineMotion automatically.",blocking=True)
    end
    end
    else:
    popup("resource is being used already: MachineMotion1")
    halt
    end
    isVentionMovementBusyMachineMotion1 = True
    sendString("im_home_axis_1", "MachineMotion im_home_axis_1 = completed", "MachineMotion1")
    isVentionMovementBusyMachineMotion1 = False
    sendString("SET im_set_encoder_pos_aux_1 0.000", "Ack", "MachineMotion1")
    isVentionMovementBusyMachineMotion1 = False
    sleep(0.03)
    # end: URCap Program Node
  end
end
