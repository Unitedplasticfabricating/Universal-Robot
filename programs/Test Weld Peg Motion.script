def Test_Weld_Peg_Motion():
  global _hidden_verificationVariable=0
  step_count_30365161_1156_4a67_b8b8_4478c27b7649 = 0.0
  thread Step_Counter_Thread_71d02eff_d0fe_4432_9dd6_b944c87aef43():
    while (True):
      step_count_30365161_1156_4a67_b8b8_4478c27b7649 = step_count_30365161_1156_4a67_b8b8_4478c27b7649 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_71d02eff_d0fe_4432_9dd6_b944c87aef43()
  set_target_payload(0.000000, [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[-4.516483728619642E-6,-4.494070941040221E-6,-3.385497268221845E-5,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-.178197250583, -.413642451030, .275211229853, -.114742878241, 3.086754396979, -.038029494525]
  global Waypoint_1_q=[-1.537032429371969, -1.5288156133941193, -2.7874608039855957, -0.37245316923175054, 1.6235363483428955, -0.039901081715719044]
  global Waypoint_2_p=p[-.178197064196, -.413593920558, .553616971139, -.114741593409, 3.086737617239, -.037888747686]
  global Waypoint_2_q=[-1.536710564290182, -1.051842288380005, -2.485320568084717, -1.151641921406128, 1.623323917388916, -0.03959972063173467]
  global Waypoint_3_p=p[-.637123073765, -.348922923837, .553624887981, -.114755426062, 3.086719366932, -.037941658531]
  global Waypoint_3_q=[-2.372910801564352, -1.4850519385984917, -2.211073398590088, -1.0397523206523438, 1.6244484186172485, -0.8769753615008753]
  global Waypoint_4_p=p[-.637124387548, -.348923181060, .355419240967, -.114738763341, 3.086743445214, -.037960976780]
  global Waypoint_4_q=[-2.3729708830462855, -1.6909362278380335, -2.3691084384918213, -0.6758066576770325, 1.6245042085647583, -0.876960579548971]
  global Waypoint_5_p=p[-.630521330746, -.301962770099, .355441629123, -.114747929519, 3.086762062504, -.037976582888]
  global Waypoint_5_q=[-2.4164188543902796, -1.661666055718893, -2.403520107269287, -0.6729421776584168, 1.6234378814697266, -0.9204791227923792]
  global Waypoint_6_p=p[-.630514600986, -.301956463691, .493474042606, -.114742624798, 3.086758701312, -.037955124054]
  global Waypoint_6_q=[-2.4163671175586146, -1.5014494222453614, -2.2964284420013428, -0.9402617973140259, 1.6233742237091064, -0.9204691092120569]
  global Waypoint_7_p=p[.575579722199, .292975510699, .493475617674, -.114765635599, 3.086720512504, -.037920233669]
  global Waypoint_7_q=[0.7997124791145325, -1.4218644362739106, -2.375715732574463, -0.8945852679065247, 1.5170187950134277, 2.2957448959350586]
  global Waypoint_8_p=p[.575530676780, .292897921756, .493385031953, -.081271844863, 2.367322842767, -.189502619823]
  global Waypoint_8_q=[0.9491087198257446, -1.462498539393284, -2.5431790351867676, -0.2930680078319092, 0.8888055682182312, 2.3030025959014893]
  global Waypoint_9_p=p[.575533362886, .292902220926, .478246440778, -.081267380648, 2.367330994349, -.189494233035]
  global Waypoint_9_q=[0.9490954875946045, -1.486842469578125, -2.5559353828430176, -0.2559672159007569, 0.8888285756111145, 2.303004741668701]
  $ 2 "Robot Program"
  $ 3 "'Start Point: Home'"
  # 'Start Point: Home'
  $ 4 "MoveJ"
  $ 5 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 6 "MoveL"
  $ 7 "'Lift gun out of holder'"
  # 'Lift gun out of holder'
  $ 8 "Waypoint_2" "breakAfter"
  movel(Waypoint_2_p, a=1.2, v=0.25)
  $ 9 "'Move to bucket'"
  # 'Move to bucket'
  $ 10 "Waypoint_3" "breakAfter"
  movel(Waypoint_3_p, a=1.2, v=0.25)
  $ 11 "Waypoint_4" "breakAfter"
  movel(Waypoint_4_p, a=1.2, v=0.25)
  $ 12 "'extrude out a foot'"
  # 'extrude out a foot'
  $ 13 "Wait: 6.0"
  sleep(6.0)
  $ 14 "MoveL"
  $ 15 "'slice over knife'"
  # 'slice over knife'
  $ 16 "Waypoint_5" "breakAfter"
  movel(Waypoint_5_p, a=1.2, v=0.04)
  $ 17 "MoveL"
  $ 18 "Waypoint_6" "breakAfter"
  movel(Waypoint_6_p, a=1.2, v=0.25)
  $ 19 "MoveJ"
  $ 20 "'go to weld peg'"
  # 'go to weld peg'
  $ 21 "Waypoint_7" "breakAfter"
  movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 22 "MoveL"
  $ 23 "'tilt head'"
  # 'tilt head'
  $ 24 "Waypoint_8" "breakAfter"
  movel(Waypoint_8_p, a=1.2, v=0.25)
  $ 25 "Waypoint_9" "breakAfter"
  movel(Waypoint_9_p, a=1.2, v=0.25)
  $ 26 "Comment"
  # Comment
  $ 27 "Wait: 8.0"
  sleep(8.0)
end
