def demo_sleeve_fillet():
  global _hidden_verificationVariable=0
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_5de7a8b2_8831_4d81_a804_768e55f733cc = 0.0
  thread Step_Counter_Thread_818443a9_4320_41c6_b292_16348d979ec7():
    while (True):
      step_count_5de7a8b2_8831_4d81_a804_768e55f733cc = step_count_5de7a8b2_8831_4d81_a804_768e55f733cc + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_818443a9_4320_41c6_b292_16348d979ec7()
  global Waypoint_9_p=p[-.850145886109, .808475745273, .769844544347, -.069431859112, -2.423130314916, -.631676156365]
  global Waypoint_9_q=[-1.2220787853506003, -1.256660740589508, 1.6265504461782903, -4.7829073025812505, -0.66149999097789, -2.4941495405790826]
  global Waypoint_6_p=p[-1.042272932669, .808475745327, .769844544408, -.069431859117, -2.423130314822, -.631676156319]
  global Waypoint_6_q=[-1.0194929683633989, -1.123110160086636, 1.4775345554217605, -4.546601595402292, -0.7424418714147158, -2.7824515501512477]
  global Waypoint_7_p=p[-1.150141801390, .824467663674, .703475838071, -.135475644974, -2.195380186800, -.512968764260]
  global Waypoint_7_q=[-0.9489814956696705, -0.9507273971658572, 1.3987160680816082, -4.786624345673471, -0.978938866793639, -2.7023860160213307]
  global ViaPoint_1_p=p[-1.137967135545, .888776840890, .671430707969, -.715597427410, -2.183341551926, .685859601555]
  global ViaPoint_1_q=[-1.0058615843402308, -0.9633862537196656, 1.4389169851886194, 2.174818916911743, -1.4363716284381312, -2.2376392523394983]
  global EndPoint_1_p=p[-1.139923616692, .872883562597, .596071886835, -1.219041624604, -.929744056606, 2.321499048375]
  global EndPoint_1_q=[-1.0499699751483362, -1.0157251519015809, 1.725600544606344, 3.079662962550781, -1.368213955556051, -1.1875527540790003]
  global ViaPoint_2_p=p[-1.155211344558, .763519509792, .646144445369, .930689835193, -1.694524524994, -2.141396907881]
  global ViaPoint_2_q=[-0.9206088224994105, -1.3259365570596238, 1.9017098585711878, 4.092315836543701, -0.32847720781435186, -0.07638818422426397]
  global Waypoint_1_p=p[-1.152593730322, .814679440607, .699964127430, .098007037082, -2.384276332167, -.448287356942]
  global Waypoint_1_q=[-0.9865496794330042, -0.9495034974864502, 1.2794516722308558, 1.631091518993042, -0.747718636189596, -2.54160982767214]
  global Waypoint_4_p=p[-1.043534274080, .752125725237, .758240786673, -.449838190847, -2.325682515406, -.266484264159]
  global Waypoint_4_q=[-0.9423230330096644, -1.176593617802002, 1.6444066206561487, 1.7965714174458007, -1.1639860312091272, -2.780959431325094]
  global Waypoint_8_p=p[-.754583272336, .757081884790, .772780718775, -.449838190859, -2.325682515432, -.266484264163]
  global Waypoint_8_q=[-1.2877336166754958, -1.3847896804577609, 1.8774803548627075, 1.613369590846811, -0.9633912941872014, -2.458219587071731]
  while (True):
    $ 2 "Robot Program"
    $ 3 "MoveJ"
    $ 6 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "MoveJ"
    $ 11 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 12 "MoveP"
    $ 13 "CircleMove"
    $ 14 "ViaPoint_1" "noBreak"
    
    $ 15 "EndPoint_1" "breakAfter"
    movec(ViaPoint_1_p, EndPoint_1_p, a=1.2, v=0.01, r=0.025, mode=1)
    $ 16 "CircleMove"
    $ 17 "ViaPoint_2" "noBreak"
    
    $ 18 "Waypoint_1" "breakAfter"
    movec(ViaPoint_2_p, Waypoint_1_p, a=1.2, v=0.01, r=0.0, mode=1)
    $ 19 "MoveJ"
    $ 21 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 22 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
