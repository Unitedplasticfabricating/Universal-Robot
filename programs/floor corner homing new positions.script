def floor_corner_homing_new_positions():
  global _hidden_verificationVariable=0
  step_count_9d117d99_c6a1_435a_a8f9_15297cdbf430 = 0.0
  thread Step_Counter_Thread_51ec4239_815b_4b98_b620_101fefe2ef69():
    while (True):
      step_count_9d117d99_c6a1_435a_a8f9_15297cdbf430 = step_count_9d117d99_c6a1_435a_a8f9_15297cdbf430 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_51ec4239_815b_4b98_b620_101fefe2ef69()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[-0.0010317764122757048,-0.018062446645763904,0.28523420717101033,0.0,0.0,0.0])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-1.446031823931, .200324479551, .004428795346, .689578816587, -1.841602441618, -1.824935680890]
  global Waypoint_1_q=[3.4311928749084473, -2.809110303918356, -1.4228595495224, 1.0361789900013427, -5.8836019972907465, 3.164451837539673]
  global Waypoint_2_p=p[-1.410201584368, .399753632974, .129976197960, 1.317654009442, -.719057964787, -.562113908154]
  global Waypoint_2_q=[2.729290246963501, -2.504462858239645, -1.3702754974365234, -2.1849638424315394, -2.6969857851611536, 0.3543210029602051]
  global Waypoint_3_p=p[-1.351883420828, .370368654239, .070225455522, 1.510758862067, -.641048734333, -.617864458564]
  global Waypoint_3_q=[2.727095603942871, -2.504697938958639, -1.3683288097381592, -2.5015255413451136, -2.7525835672961634, -0.08397132555116826]
  global Waypoint_4_p=p[-1.444821908024, .371093235059, .102597246239, .449152456537, -1.986395644594, -2.024213244205]
  global Waypoint_4_q=[3.3249406814575195, -2.5048839054503382, -1.3460431098937988, -2.3736120663084925, -0.22959405580629522, -0.08909351030458623]
  global Waypoint_5_p=p[-1.445122373265, -.084302670264, .704854379832, .034489474396, -.031644411203, -.593691141764]
  global Waypoint_5_q=[3.3251545429229736, -2.5049597225584925, -1.347118854522705, -0.9028828901103516, -1.5859625975238245, 0.7920308113098145]
  global oldhome_p=p[.394188295971, .534375672619, .630191192789, .057805349154, 2.125995180379, 2.134053153683]
  global oldhome_q=[-3.4606140190990686, -2.0560080618431087, 2.3261236780302887, -0.22243716377378497, -0.20045530471078976, -0.110516442897584]
  global Waypoint_7_p=p[-.549992169545, .120050442575, .125646574592, 1.570800598335, -.000025190871, .000004803497]
  global Waypoint_7_q=[-1.0536064149942703, -1.0108983654060637, 2.156470873431242, -1.1445414721355682, -1.0524804359722317, -6.539773744762556E-4]
  global Waypoint_8_p=p[-1.214239487851, .453022471089, .071161225304, 1.266847084533, -.822431573556, -1.027499829301]
  global Waypoint_8_q=[-0.8467615286456507, -0.7659920018962403, 1.9020622412311, -1.5286710833064099, 0.3859733045101166, 0.312410831451416]
  global Waypoint_6_p=p[-1.442843569869, .383579330678, .103953266156, .438799526469, -1.990979143964, -2.028702410896]
  global Waypoint_6_q=[-2.967060629521505, -2.5049268207945765, -1.3439035240356336, -2.3736096821227015, -0.22958213487734014, -0.08909351030458623]
  while (True):
    $ 2 "Robot Program"
    $ 3 "MoveJ"
    $ 4 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 5 "'left side'"
    # 'left side'
    $ 6 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "'right side'"
    # 'right side'
    $ 8 "MoveJ"
    $ 9 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 10 "'right side'"
    # 'right side'
    $ 11 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 12 "'left side'"
    # 'left side'
    $ 13 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 14 "'bottom side'"
    # 'bottom side'
    $ 15 "'cool so how do we get there'"
    # 'cool so how do we get there'
    $ 16 "MoveJ"
    $ 17 "oldhome" "breakAfter"
    movej(get_inverse_kin(oldhome_p, qnear=oldhome_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 18 "'start from test teach position'"
    # 'start from test teach position'
    $ 19 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "'ttp'"
    # 'ttp'
    $ 21 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 22 "'point they picked'"
    # 'point they picked'
    $ 23 "MoveJ"
    $ 24 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 25 "'left side point but base rotated back to normal'"
    # 'left side point but base rotated back to normal'
  end
end
