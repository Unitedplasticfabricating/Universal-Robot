def vert_path_wp_save():
  global _hidden_verificationVariable=0
  step_count_bb260f9f_b35d_4fa5_9196_51f97d34692a = 0.0
  thread Step_Counter_Thread_3f57fde8_be87_45f6_b73f_8ef8e3528eee():
    while (True):
      step_count_bb260f9f_b35d_4fa5_9196_51f97d34692a = step_count_bb260f9f_b35d_4fa5_9196_51f97d34692a + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_3f57fde8_be87_45f6_b73f_8ef8e3528eee()
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[0.00855,-0.27152,0.102,1.2092,-1.2092,1.2092])
  set_target_payload(2.760000, [0.004000, -0.022000, 0.072000], [0.008360, 0.008360, 0.008360, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Plane_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-.955652198299, .609645262545, 1.447606621703, -.000002586602, .000023983690, -.000044728674]
  global Waypoint_1_q=[-0.6190655867206019, -0.3368618053248902, -0.41324496269226074, 3.89075676977124, 2.190887689590454, -4.6617189516240387E-4]
  global Waypoint_2_p=p[-.646472006716, -.000005175669, .568192325689, -.000000485067, -.000006973981, -.000005045961]
  global Waypoint_2_q=[-0.23332149187196904, 0.9707986551472167, -1.9700188636779785, 4.139979048366211, 1.8039493560791016, -2.5588670839482575E-4]
  global Waypoint_3_p=p[-.247841618163, -.000001221844, 1.340099232237, 1.570793608201, -.000028410849, -.000016022498]
  global Waypoint_3_q=[-0.8519218603717249, -0.33198924482379155, -1.6308417320251465, 5.1035817740257166, 2.42344331741333, 1.5703715085983276]
  global Waypoint_4_p=p[-1.179747427322, .376142202196, .007542577009, 1.379988252251, -.891987002417, -.892019582121]
  global Waypoint_4_q=[-0.7655184904681605, -0.2574165624431153, 1.2221644560443323, 2.1762491899677734, 1.189542293548584, 1.5704518556594849]
  global Waypoint_5_p=p[-.308518516300, .606106971306, .242383883754, -2.133736308583, .349453533645, 2.130945814092]
  global Waypoint_5_q=[-1.8566301504718226, -1.2938345235637208, 2.2087047735797327, 0.7414883810230712, 1.586585521697998, 1.5234099626541138]
  global Waypoint_7_p=p[-.540145657443, .215928159451, .034626615128, -1.505818452622, 1.057589549975, 1.573496338188]
  global Waypoint_7_q=[-0.4478219191180628, -1.1245789390853425, 2.485603157673971, 0.16253535329785151, 1.4958982467651367, 3.833399772644043]
  global Waypoint_6_p=p[-1.314145372626, .215925160668, .034627130433, -1.505810875646, 1.057606245516, 1.573489538167]
  global Waypoint_6_q=[-0.14954883257021123, -0.5748068255237122, 1.1567109266864222, 0.9217995840260009, 1.512316107749939, 4.131750583648682]
  while (True):
    $ 2 "Robot Program"
    $ 3 "Home"
    movej([-3.523764549353853, -1.8742328384451357, 2.4457816539194326, 0.058650484450722296, -0.22275931369636837, -0.6273979632655688], a=1.3962634015954636, v=1.0471975511965976)
    $ 4 "MoveJ"
    $ 5 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), t=2.0)
    $ 6 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "MoveJ"
    $ 9 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 10 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 11 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 12 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
