def dummy_step_right():
  global _hidden_verificationVariable=0
  step_count_685bc924_3197_4e47_896c_29f255d2cf80 = 0.0
  thread Step_Counter_Thread_5ef88261_d528_45d4_88a9_6006a74928fc():
    while (True):
      step_count_685bc924_3197_4e47_896c_29f255d2cf80 = step_count_685bc924_3197_4e47_896c_29f255d2cf80 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_5ef88261_d528_45d4_88a9_6006a74928fc()
  set_safety_mode_transition_hardness(1)
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-1.156815506109, .297468255331, .291374636633, -.781184292332, -1.773996506341, 1.712872397156]
  global Waypoint_1_q=[-3.3123873876160483, -1.9539708841981174, -2.065530912880325, -2.2733695721126352, -0.9197942107329453, 1.5376533508378574]
  global Waypoint_2_p=p[-1.152293433656, .297468255258, -.038814361176, -.781184292332, -1.773996506341, 1.712872397156]
  global Waypoint_2_q=[-3.3131877539669503, -2.3475104435328245, -2.1164400948857125, -1.8287330256059748, -0.9205608939203955, 1.5373427364285073]
  global Waypoint_3_p=p[-1.152293433443, .297468255221, -.090396924512, -.781184292332, -1.773996506341, 1.712872397156]
  global Waypoint_3_q=[-3.313159887662775, -2.4156429323626245, -2.1052133207449835, -1.7718008453564664, -0.9205456602007835, 1.5372990061024145]
  global Waypoint_4_p=p[-1.154732620412, .295136778766, -.095598662237, -.432296321504, -.967499014217, 2.153752775760]
  global Waypoint_4_q=[-3.2354409820537495, -2.726419384448233, -1.9482567091800567, -1.6184561634833114, -0.8429420929388982, 2.2995967018129133]
  global Waypoint_5_p=p[-1.158881064352, .291274401646, -.106745680577, -.023579781608, -.026755260950, 2.320206523043]
  global Waypoint_5_q=[-3.0491851748877803, -2.8961739090334415, -1.652801874078225, -1.7463433971726339, -0.6568138813765447, 3.124044600080656]
  global Waypoint_6_p=p[-1.271643257409, .186285165212, -.110880234816, -.023579781607, -.026755260950, 2.320206523043]
  global Waypoint_6_q=[-2.9610156160044965, -2.9303181745838778, -1.4743765033810226, -1.892286330367293, -0.568734481465162, 3.1261294661859766]
  $ 2 "Robot Program"
  $ 3 "MoveJ"
  $ 4 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 5 "MoveP"
  $ 6 "Waypoint_2" "breakAfter"
  movep(Waypoint_2_p, a=1.2, v=0.01, r=0.025)
  $ 7 "Waypoint_3" "breakAfter"
  movep(Waypoint_3_p, a=1.2, v=0.01, r=0.025)
  $ 8 "MoveP"
  $ 9 "Waypoint_4" "breakAfter"
  movep(Waypoint_4_p, a=0.1, v=0.002, r=0.0)
  $ 10 "Waypoint_5" "breakAfter"
  movep(Waypoint_5_p, a=0.1, v=0.002, r=0.0)
  $ 11 "MoveL"
  $ 12 "Waypoint_6" "breakAfter"
  movel(Waypoint_6_p, a=1.2, v=0.01)
end
