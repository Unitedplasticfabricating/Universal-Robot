def Step_Corner_Under_L():
  global _hidden_verificationVariable=0
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_180e5910_9a75_428e_b335_32fb1023a526 = 0.0
  thread Step_Counter_Thread_477c9a7a_a780_4362_853b_fa8699b24cca():
    while (True):
      step_count_180e5910_9a75_428e_b335_32fb1023a526 = step_count_180e5910_9a75_428e_b335_32fb1023a526 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_477c9a7a_a780_4362_853b_fa8699b24cca()
  global Waypoint_1_p=p[-1.444215169882, .361779810377, -.054625125092, .001413735714, .023505293349, -2.509038023570]
  global Waypoint_1_q=[-0.5519941488849085, -0.10394926488909917, 0.9544232527362269, -0.8351094287684937, 0.3872879445552826, -3.172431294118063]
  global Waypoint_2_p=p[-1.360958680131, .248193907531, -.056963144944, .001413735712, .023505293348, -2.509038023570]
  global Waypoint_2_q=[-0.5081364629893415, -0.19415719499263773, 1.2300463618759856, -1.0218415110807548, 0.43118581877475093, -3.1710007085191805]
  global Waypoint_3_p=p[-1.360958679957, .248193907567, -.056963144933, -.005356617173, .026522049063, -3.028120308064]
  global Waypoint_3_q=[-0.43558073666736163, -0.24132521051487732, 1.4043712871089458, -1.1668455225331726, 1.0227282631652441, -3.157433442178185]
  global Waypoint_4_p=p[-1.360958679725, .248193907304, -.056963144909, .014807855629, -.016095220190, 2.165526155533]
  global Waypoint_4_q=[-0.20343789579301763, -0.20392462680377932, 1.2801405140391675, -1.10100136413649, 2.344026145804282, -3.1649492135997512]
  global Waypoint_5_p=p[-1.446158108853, .190559479341, -.057572214027, .014807855628, -.016095220189, 2.165526155533]
  global Waypoint_5_q=[-0.14552905823438778, -0.14687955101846217, 1.0988486227338452, -0.9782370352546073, 2.401893842702902, -3.167000356314613]
  global Waypoint_6_p=p[-1.376345058437, .127861516700, -.113809396538, .001595907765, .020582219621, 2.802219690293]
  global Waypoint_6_q=[-0.21936256090273076, -0.18577690542254643, 1.3827479521380823, -1.1964615446380158, 1.6915944814682007, -3.127293888722555]
  global Waypoint_7_p=p[-1.184504623527, .119918745967, .258583038117, -.016471714160, .055927907680, 2.589615530393]
  global Waypoint_7_q=[-0.1878894011126917, -0.3070121568492432, 1.7233179251300257, 1.7500449854084472, -1.9347408453570765, -6.239695225154058]
  global Waypoint_8_p=p[-1.363711185365, .248047547500, -.070154296532, -.036228240401, .051503975468, 2.499877068036]
  global Waypoint_8_q=[-0.2504077016503201, 0.12478121305693257, 1.0668996732488547, 1.9914576091171678, -1.9614034298830134, -6.240867048115128]
  global Waypoint_9_p=p[-1.427207590491, .344390019708, -.074960016006, .066207898263, -.046967641408, -2.632210644475]
  global Waypoint_9_q=[-0.5366545399390965, 0.21555309167960138, 0.7620666702881405, 2.2454944123963254, -0.5269228031422628, -0.025828378616232328]
  global Waypoint_10_p=p[-1.366187373233, .234655210214, -.069225299510, .066207898260, -.046967641409, -2.632210644475]
  global Waypoint_10_q=[-0.4822399077336783, 0.1387770808780342, 1.006476925424152, 2.0710148649611284, -0.5812246861939325, -0.017913222855561628]
  global Waypoint_11_p=p[-1.366187373131, .234655210209, -.069225299502, -.086379822867, .027701901487, 3.035221967861]
  global Waypoint_11_q=[-0.37277224214223725, 0.0980028567193667, 1.1605787523287088, 1.9442573612867022, -1.3038850153484987, -0.003019621337320366]
  global Waypoint_12_p=p[-1.366187373032, .234655210036, -.069225299429, -.051339059023, .050763155994, 2.096957634606]
  global Waypoint_12_q=[-0.16229366456723682, 0.15516998527563608, 0.9293612455721784, 2.1464481416649956, -2.450749891934345, 0.08287918929341132]
  global Waypoint_13_p=p[-1.499165522243, .157371249555, -.066883421138, -.051339059022, .050763155993, 2.096957634606]
  global Waypoint_13_q=[-0.08898310367957674, 0.2902457795343972, 0.5206686973261174, 2.4290504322821005, -2.5236483884776995, 0.09438090331613605]
  while (True):
    $ 2 "Robot Program"
    $ 3 "dummy points"
    $ 4 "MoveJ"
    $ 5 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 6 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "Waypoint_5" "breakAfter"
    movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 10 "'first one got very tight at the end of pivot rotation'"
    # 'first one got very tight at the end of pivot rotation'
    $ 11 "'try 2'"
    # 'try 2'
    $ 12 "MoveJ"
    $ 13 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 14 "'try 3'"
    # 'try 3'
    $ 15 "MoveJ"
    $ 16 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 17 "MoveJ"
    $ 18 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 19 "MoveJ"
    $ 20 "'this is the correct section of points'"
    # 'this is the correct section of points'
    $ 21 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 22 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 24 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 25 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
