def cover_corner_demo():
  global _hidden_verificationVariable=0
  step_count_50ce2b83_a1b6_427f_a0a4_7e1cab84c5b8 = 0.0
  thread Step_Counter_Thread_0e5d4146_0ae0_40da_842a_564d3a17cd5d():
    while (True):
      step_count_50ce2b83_a1b6_427f_a0a4_7e1cab84c5b8 = step_count_50ce2b83_a1b6_427f_a0a4_7e1cab84c5b8 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_0e5d4146_0ae0_40da_842a_564d3a17cd5d()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[0.00451,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_gravity([0.0, 0.0, 9.82])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-1.254834602956, .293143884554, .440638406244, -1.113328755566, -2.918967184199, -.012034807846]
  global Waypoint_1_q=[-0.3026669661151331, -1.1917468768409272, 1.3485878149615687, -0.17833609998736577, 1.9977459907531738, -0.009145085011617482]
  global Waypoint_2_p=p[-1.415792398577, .118619042242, .414890150253, -1.113328755569, -2.918967184206, -.012034807837]
  global Waypoint_2_q=[-0.11998380165189815, -0.9936865296325017, 1.077756434560066, -0.10783955149575508, 2.1803444056494237, -0.013994167527604517]
  global Waypoint_3_p=p[-1.285353011514, .264727772852, .415081177794, -1.113328755569, -2.918967184207, -.012034807836]
  global Waypoint_3_q=[-0.2686995882092553, -1.1537341429246322, 1.3284965894789658, -0.19659472445504989, 2.0317126031122257, -0.009991571284936107]
  global Waypoint_4_p=p[-1.285353011355, .264727772833, .415081178037, -.966898154858, -2.561335648361, .906346937790]
  global Waypoint_4_q=[-0.460760782586636, -1.2570102612710246, 1.5866991234148662, -0.35012689990856405, 1.8397489307084613, 0.6827981625368533]
  global Waypoint_5_p=p[-1.285353011274, .264727772875, .415081178046, -.678600263019, -1.829845077401, 1.759013522697]
  global Waypoint_5_q=[-0.5836426297114183, -1.164694737531626, 1.8349189824548717, -0.6902628140056599, 1.7169701210971944, 1.5362250568794233]
  global Waypoint_6_p=p[-1.284072331956, .271273600720, .236976122544, -.678600263019, -1.829845077401, 1.759013522697]
  global Waypoint_6_q=[-0.5904983559062345, -1.0107340812338945, 1.90744920841517, -0.9167671743074521, 1.7101285844095298, 1.536150293736445]
  global Waypoint_7_p=p[-1.298613904184, .249951487786, .415062657028, 1.277313155293, -2.862468919900, -.027957035140]
  global Waypoint_7_q=[-0.5412098550570947, -1.000813399349922, 1.0818999092767259, -0.08412800105330742, 0.1910784294189487, -0.015995733914849097]
  global Waypoint_8_p=p[-1.452410033985, .387964358710, .419009895317, 1.277313155293, -2.862468919900, -.027957035140]
  global Waypoint_8_q=[-0.5692258796728566, -0.6755164433425218, 0.49387769021065164, 0.1786486466385947, 0.16287921478496514, -0.016066988724530162]
  global Waypoint_9_p=p[-1.240367709216, .175705767646, .485382866760, -2.561424995869, -1.628125306876, .609552965118]
  global Waypoint_9_q=[-2.9775903860675257, -2.0433231792845667, -1.1003327369689941, -2.6059261761107386, 0.632439374923706, -0.1848061720477503]
  global Waypoint_10_p=p[-1.347448188930, .175705767669, .485382866714, -2.510552735271, -1.536421271119, .247039085187]
  global Waypoint_10_q=[-2.9376243411363028, -2.4293208096156924, -0.4725996794508207, -3.3128549048138414, 0.6719250933635955, 0.1945085638559051]
  global Waypoint_11_p=p[-1.330268918894, .258318068624, .427852415796, -2.728794669097, -1.265911950615, -.076059593625]
  global Waypoint_11_q=[-3.015679661427633, -2.5985661945738734, -0.6995587348937988, 0.02221016466107173, -0.8374589125262659, 3.3300793170928955]
  global Waypoint_12_p=p[-1.319930024212, .270457519533, .428193126175, -2.854283963988, -1.237719335527, -.013673588834]
  global Waypoint_12_q=[-3.052582857434048, -2.6316624083295554, -0.5998624503565253, 0.06517633703288055, -0.8416784368559025, 3.1815230198011513]
  global Waypoint_13_p=p[-1.383927896066, .330344937867, .430336142977, -2.854283963988, -1.237719335527, -.013673588834]
  global Waypoint_13_q=[-3.094757835380761, -2.852026900427017, -0.1361568909246893, -0.17918041392481143, -0.7992870543685626, 3.1830954139457215]
  global Waypoint_14_p=p[-1.383927895965, .330344937871, .012421147856, -2.854283963988, -1.237719335527, -.013673588834]
  global Waypoint_14_q=[-3.0947139185011245, -2.9662607847194344, -0.4692399838233996, 0.2682741778373672, -0.7994771842185919, 3.18289765511388]
  global Waypoint_15_p=p[-1.423443265678, .367322806658, .013744473562, -2.854283963988, -1.237719335527, -.013673588834]
  global Waypoint_15_q=[-3.1190040098409053, -3.1610230814595592, -0.039134624428121434, 0.03231434882501727, -0.7749732702943346, 3.183820879998234]
  global Waypoint_16_p=p[-1.280044180241, .233133264988, .008941083135, -2.854283963988, -1.237719335527, -.013673588833]
  global Waypoint_16_q=[-3.024271184737193, -2.78272594919761, -0.886639360389406, 0.5036392671041716, -0.8701254349731968, 3.180512306009856]
  global Waypoint_21_p=p[-1.280044179690, .233133264895, .013157272711, -2.114385557267, -.928290848692, .402743270121]
  global Waypoint_21_q=[-2.881842305769812, -2.703109906879722, -1.282529535471146, 0.822098865570303, -1.0127324657044259, 4.017243878781256]
  global Waypoint_17_p=p[-1.280044179751, .233133264922, .013157272648, -1.455089680728, -.648515406445, .626608905601]
  global Waypoint_17_q=[-2.8312806073208314, -2.877453266290869, -1.285720645180719, 1.0001777779338168, -1.0632724728175367, 4.733785771929537]
  global Waypoint_18_p=p[-1.280044179790, .233133264910, -.161417916522, -1.455089680728, -.648515406445, .626608905601]
  global Waypoint_18_q=[-2.831170548753574, -3.0646103336650157, -1.1420025563458251, 1.0436252031282343, -1.063301125191984, 4.733768269120496]
  global Waypoint_19_p=p[-1.280044179781, .233133264913, -.514410938324, -1.455089680728, -.648515406445, .626608905601]
  global Waypoint_19_q=[-2.8308638589844537, -3.5278785996304904, -0.5802414686258386, 0.9452224205913575, -1.0633336744692272, 4.733582741416651]
  global Waypoint_20_p=p[-.779391150609, .233133264993, -.161417916413, -1.455089680728, -.648515406444, .626608905602]
  global Waypoint_20_q=[-2.6212025181646696, -2.9738352317989794, -1.9324022340533933, 1.7447126369161559, -1.2735379806538738, 4.72937171120426]
  global Waypoint_22_p=p[-.748165860565, .320706412085, .011481003279, -2.773269243944, 1.340054806940, -.004590934260]
  global Waypoint_22_q=[-3.4498186747180384, -2.1373354397215785, -1.6865811347961426, -2.4310480556883753, -4.120869461690084, 0.07268304377794266]
  global Waypoint_23_p=p[-1.040582512949, .320706412265, .040126565230, -2.883530641956, 1.082554653365, .004039477117]
  global Waypoint_23_q=[-3.3508645999838578, -2.407401401417961, -1.1301111793410437, -2.7188374901231125, -4.204133182787343, 0.07008570848560797]
  global Waypoint_24_p=p[-1.302622908523, .243502475585, .015129884953, -2.911951382294, -1.175244506657, -.006926728010]
  global Waypoint_24_q=[-3.0464319352982407, -2.6550806969779046, -0.6771004966738285, -2.958278362972216, 0.8985809857845544, 0.004523546488296948]
  global Waypoint_25_p=p[-1.387011775263, .331019817010, .015089304400, -2.911951382294, -1.175244506657, -.006926728010]
  global Waypoint_25_q=[-3.1072924680896428, -2.9717658401646005, -0.005394215167886074, -3.3137990188295223, 0.8373793106881173, 0.0052512846469739485]
  global Waypoint_26_p=p[-1.281319549435, .221409235263, .015139914978, -2.911951382294, -1.175244506658, -.006926728010]
  global Waypoint_26_q=[-3.029941795294292, -2.616651256871727, -0.7561909008020749, -2.9175086793317315, 0.9151135618568595, 0.0043583621109126724]
  global Waypoint_27_p=p[-1.281319549332, .221409235239, .015139915101, -2.347795629245, -.949625835997, .306836292948]
  global Waypoint_27_q=[-2.9143171874445426, -2.472186475207621, -1.1499741136085433, -2.6675655258947444, 1.0309572362727955, 0.6401612933202802]
  global turnwayinside_p=p[-.787828687256, .221409235364, .015139915071, -2.347795629245, -.949625835997, .306836292948]
  global turnwayinside_q=[-2.780652687273756, -2.023220051166886, -2.0327872778426332, -2.2331963628157014, 1.1650827393155092, 0.639110175097529]
  global Waypoint_28_p=p[-1.281319549199, .221409235149, .015139915098, -1.489529490902, -.605152389578, .595065998297]
  global Waypoint_28_q=[-2.8257209151783087, -2.5855086172310937, -1.352699509983462, -2.3511999999836615, 1.119662812082348, 1.5685101898320375]
  global Waypoint_29_p=p[-1.281319549124, .221409235174, -.129880285199, -1.489529490902, -.605152389578, .595065998297]
  global Waypoint_29_q=[-2.8256533800467936, -2.715042447932948, -1.3198104537872926, -2.25456430803636, 1.1197096498678825, 1.568531047462151]
  global Waypoint_30_p=p[-1.009408034427, .221409235486, .015139914879, 2.904349092526, -1.192196676704, .006509188450]
  global Waypoint_30_q=[-3.306308302556072, -2.3543241697906647, -1.2815545951257192, -2.653708048978216, 2.1852465412622513, -0.0037486698324649126]
  global alreadyhitting_p=p[-1.066118471920, .163973741236, .015166680788, 2.904349092526, -1.192196676704, .006509188450]
  global alreadyhitting_q=[-3.255185923645093, -2.395823242149561, -1.2002587006006795, -2.693726620262078, 2.2363239126338565, -0.004149578582639535]
  global Waypoint_31_p=p[-1.096485762751, .198657168717, .080338071646, 2.972118859875, -.959639174467, .018822159022]
  global Waypoint_31_q=[-0.41165382066835576, -0.7046496433070679, 1.0278294722186487, -0.3047540944865723, -1.3570078055011194, -0.01810008684267217]
  global Waypoint_34_p=p[-1.261306347355, -.029904505315, .084211035831, 2.972118859875, -.959639174467, .018822159022]
  global Waypoint_34_q=[-0.22037450808694015, -0.5157738377883962, 0.6455708306014216, -0.11012120657595759, -1.165887592614629, -0.02190474039958268]
  global farthestitgoes_p=p[-1.290073576949, .198657168604, .015949481791, 2.972118859875, -.959639174468, .018822159022]
  global farthestitgoes_q=[-0.36089991238124863, -0.3509981123824293, 0.39748808350907794, -0.027826769105055327, -1.306487795036511, -0.019011022490754925]
  global Waypoint_32_p=p[-1.319946948609, .208204291705, .015949481749, 2.972118859875, -.959639174468, .018822159022]
  global Waypoint_32_q=[-0.3597826046942725, -0.16716254672858977, 0.002979818417946589, 0.1828498590121039, -1.3055529640589434, -0.019025039571211266]
  global Waypoint_33_p=p[-1.308107724448, .249989650575, .015949481769, 2.972118859875, -.959639174468, .018822159021]
  global Waypoint_33_q=[-0.38743633615065676, -0.20329219762613882, 0.08155212929443412, 0.14026447344391907, -1.3331642436159, -0.018495921906394486]
  $ 2 "Robot Program"
  $ 3 "'right cover corner weld'"
  # 'right cover corner weld'
  $ 4 "'around then straight'"
  # 'around then straight'
  $ 5 "MoveJ"
  $ 6 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 7 "MoveJ"
  $ 8 "'around'"
  # 'around'
  $ 9 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 10 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 11 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 12 "Waypoint_5" "breakAfter"
  movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 13 "Waypoint_6" "breakAfter"
  movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 14 "'straight'"
  # 'straight'
  $ 15 "Waypoint_7" "breakAfter"
  movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 16 "Waypoint_8" "breakAfter"
  movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 17 "'left cover corner weld'"
  # 'left cover corner weld'
  $ 18 "MoveJ"
  $ 19 "Waypoint_9" "breakAfter"
  movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 20 "'involves base elbow flip'"
  # 'involves base elbow flip'
  $ 21 "'cords are dangling scary close to weld tip (on robot2)'"
  # 'cords are dangling scary close to weld tip (on robot2)'
  $ 22 "MoveJ"
  $ 23 "Waypoint_10" "breakAfter"
  movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 24 "'wrist flip. cords are away and we get more reach, but wrist flip means a close elbow'"
  # 'wrist flip. cords are away and we get more reach, but wrist flip means a close elbow'
  $ 25 "MoveJ"
  $ 26 "Waypoint_11" "breakAfter"
  movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 27 "Waypoint_12" "breakAfter"
  movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 28 "Waypoint_13" "breakAfter"
  movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 29 "'lift column raise. raised to be even with cover (400mm)'"
  # 'lift column raise. raised to be even with cover (400mm)'
  $ 30 "MoveJ"
  $ 31 "Waypoint_14" "breakAfter"
  movej(get_inverse_kin(Waypoint_14_p, qnear=Waypoint_14_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 32 "Waypoint_15" "breakAfter"
  movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 33 "'above point is as far back as robot can reach (7 inches when box is centered and at near side of green tape)'"
  # 'above point is as far back as robot can reach (7 inches when box is centered and at near side of green tape)'
  $ 34 "Waypoint_16" "breakAfter"
  movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 35 "Waypoint_21" "breakAfter"
  movej(get_inverse_kin(Waypoint_21_p, qnear=Waypoint_21_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 36 "Waypoint_17" "breakAfter"
  movej(get_inverse_kin(Waypoint_17_p, qnear=Waypoint_17_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 37 "Waypoint_18" "breakAfter"
  movej(get_inverse_kin(Waypoint_18_p, qnear=Waypoint_18_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 38 "'plenty of space to godown hella far. about 2.5 feet'"
  # 'plenty of space to godown hella far. about 2.5 feet'
  $ 39 "Waypoint_19" "breakAfter"
  movej(get_inverse_kin(Waypoint_19_p, qnear=Waypoint_19_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 40 "'plenty of space to go in farther. about 1.5 feet'"
  # 'plenty of space to go in farther. about 1.5 feet'
  $ 41 "Waypoint_20" "breakAfter"
  movej(get_inverse_kin(Waypoint_20_p, qnear=Waypoint_20_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 42 "'the entire path can be a lot closer. at least a foot closer'"
  # 'the entire path can be a lot closer. at least a foot closer'
  $ 43 "'backaway:'"
  # 'backaway:'
  $ 44 "Waypoint_22" "breakAfter"
  movej(get_inverse_kin(Waypoint_22_p, qnear=Waypoint_22_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 45 "Waypoint_23" "breakAfter"
  movej(get_inverse_kin(Waypoint_23_p, qnear=Waypoint_23_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 46 "'above waypoint collides: back of welder hits cordage on forearm'"
  # 'above waypoint collides: back of welder hits cordage on forearm'
  $ 47 "'undo wrist flip with column raise'"
  # 'undo wrist flip with column raise'
  $ 48 "MoveJ"
  $ 49 "Waypoint_24" "breakAfter"
  movej(get_inverse_kin(Waypoint_24_p, qnear=Waypoint_24_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 50 "Waypoint_25" "breakAfter"
  movej(get_inverse_kin(Waypoint_25_p, qnear=Waypoint_25_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 51 "Waypoint_26" "breakAfter"
  movej(get_inverse_kin(Waypoint_26_p, qnear=Waypoint_26_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 52 "Waypoint_27" "breakAfter"
  movej(get_inverse_kin(Waypoint_27_p, qnear=Waypoint_27_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 53 "turnwayinside" "breakAfter"
  movej(get_inverse_kin(turnwayinside_p, qnear=turnwayinside_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 54 "Waypoint_28" "breakAfter"
  movej(get_inverse_kin(Waypoint_28_p, qnear=Waypoint_28_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 55 "Waypoint_29" "breakAfter"
  movej(get_inverse_kin(Waypoint_29_p, qnear=Waypoint_29_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 56 "'bavkaway'"
  # 'bavkaway'
  $ 57 "Waypoint_30" "breakAfter"
  movej(get_inverse_kin(Waypoint_30_p, qnear=Waypoint_30_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 58 "alreadyhitting" "breakAfter"
  movej(get_inverse_kin(alreadyhitting_p, qnear=alreadyhitting_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 59 "'backaway 2'"
  # 'backaway 2'
  $ 60 "MoveJ"
  $ 61 "Waypoint_31" "breakAfter"
  movej(get_inverse_kin(Waypoint_31_p, qnear=Waypoint_31_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 62 "Waypoint_34" "breakAfter"
  movej(get_inverse_kin(Waypoint_34_p, qnear=Waypoint_34_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 63 "farthestitgoes" "breakAfter"
  movej(get_inverse_kin(farthestitgoes_p, qnear=farthestitgoes_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 64 "Waypoint_32" "breakAfter"
  movej(get_inverse_kin(Waypoint_32_p, qnear=Waypoint_32_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 65 "Waypoint_33" "breakAfter"
  movej(get_inverse_kin(Waypoint_33_p, qnear=Waypoint_33_q), a=1.3962634015954636, v=1.0471975511965976)
end
