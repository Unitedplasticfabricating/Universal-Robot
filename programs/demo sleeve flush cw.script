def demo_sleeve_flush_cw():
  global _hidden_verificationVariable=0
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_5de7a8b2_8831_4d81_a804_768e55f733cc = 0.0
  thread Step_Counter_Thread_818443a9_4320_41c6_b292_16348d979ec7():
    while (True):
      step_count_5de7a8b2_8831_4d81_a804_768e55f733cc = step_count_5de7a8b2_8831_4d81_a804_768e55f733cc + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_818443a9_4320_41c6_b292_16348d979ec7()
  global Waypoint_9_p=p[-.846524365099, .214491645115, .754780106360, .074971370799, -1.638200845129, -.395739692384]
  global Waypoint_9_q=[-0.7773402202311583, -1.3705350738716824, 2.204389779273381, -5.666109719426843, -1.286339997959935, -2.5528047575643216]
  global Waypoint_6_p=p[-1.064157379401, .273627714852, .695242957710, -2.010778326536, -.057001243584, 2.244665891061]
  global Waypoint_6_q=[-0.5883786940228966, -1.7318135951668268, 2.0032243146017747, -1.996320204739182, -1.6119697290591057, -0.5279491824455249]
  global Waypoint_10_p=p[-1.217118377271, .310240026620, .693595387978, -.189056700652, -1.666007582858, -.132400718142]
  global Waypoint_10_q=[-0.4749825636493128, -1.255741075878479, 2.152047936116354, -2.36077942470693, -4.71658701101412, 0.27245044708251953]
  global ViaPoint_1_p=p[-1.219861021244, .338760436573, .624281703748, -1.521203213955, -.966275622179, 1.265830847405]
  global ViaPoint_1_q=[-0.26181108156313115, -1.3847742986730118, 1.9677618185626429, -2.4388143024840296, -2.848731819783346, -0.36489612260927373]
  global EndPoint_1_p=p[-1.221187218731, .272784855886, .575704298057, -2.263518554298, .166117282653, 2.134155624922]
  global EndPoint_1_q=[-0.49946433702577764, -1.482953855102398, 1.8009756247149866, -1.8102971516051234, -1.545272175465719, -0.40637332597841436]
  global ViaPoint_2_p=p[-1.230114376154, .233667052366, .633742655051, 1.304554547315, -1.459435307519, -1.712753351649]
  global ViaPoint_2_q=[-0.5941727797137659, -1.500079871421196, 1.923232380543844, -1.5363159899464627, -0.36953813234438115, -0.4307058493243616]
  global Waypoint_7_p=p[-1.212935816938, .299575982748, .700501213439, .047063191921, -1.557369923390, -.136804316701]
  global Waypoint_7_q=[-0.5433848539935511, -1.1590642792037507, 2.127141777669088, -2.6071649990477503, 1.4736294746398926, 0.4892606735229492]
  global Waypoint_4_p=p[-1.043534274080, .752125725237, .758240786673, -.449838190847, -2.325682515406, -.266484264159]
  global Waypoint_4_q=[-0.9423230330096644, -1.176593617802002, 1.6444066206561487, 1.7965714174458007, -1.1639860312091272, -2.780959431325094]
  global Waypoint_8_p=p[-.754583272336, .757081884790, .772780718775, -.449838190859, -2.325682515432, -.266484264163]
  global Waypoint_8_q=[-1.2877336166754958, -1.3847896804577609, 1.8774803548627075, 1.613369590846811, -0.9633912941872014, -2.458219587071731]
  global Waypoint_11_p=p[-1.232725927755, .242180258845, .622160223006, -1.267918620472, -1.126555271692, 1.050950776433]
  global Waypoint_11_q=[-0.14207107225526983, -1.2752303642085572, 2.0230515638934534, -2.720091005364889, -3.187596861516134, -0.42201310793031865]
  global Waypoint_12_p=p[-1.215591993597, .302474203531, .582980561715, -.178069283529, -1.581482493751, -.074589290362]
  global Waypoint_12_q=[-0.4660556299835896, -1.0666651356963008, 2.180666906690046, -2.6469876180254825, -4.657810704752726, 0.30623299097715584]
  while (True):
    $ 2 "Robot Program"
    $ 3 "MoveJ"
    $ 6 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(Waypoint_9_p, qnear=Waypoint_9_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 7 "Waypoint_6" "breakAfter"
    movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 8 "MoveJ"
    $ 12 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 13 "MoveP"
    $ 14 "CircleMove"
    $ 15 "ViaPoint_1" "noBreak"
    
    $ 16 "EndPoint_1" "breakAfter"
    movec(ViaPoint_1_p, EndPoint_1_p, a=1.2, v=0.01, r=0.025, mode=1)
    $ 17 "CircleMove"
    $ 18 "ViaPoint_2" "noBreak"
    
    $ 19 "Waypoint_7" "breakAfter"
    movec(ViaPoint_2_p, Waypoint_7_p, a=1.2, v=0.01, r=0.0, mode=1)
    $ 20 "MoveJ"
    $ 22 "Waypoint_4" "breakAfter"
    movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 23 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(Waypoint_8_p, qnear=Waypoint_8_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 24 "MoveJ"
    $ 25 "Waypoint_11" "breakAfter"
    movej(get_inverse_kin(Waypoint_11_p, qnear=Waypoint_11_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 26 "Waypoint_12" "breakAfter"
    movej(get_inverse_kin(Waypoint_12_p, qnear=Waypoint_12_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
