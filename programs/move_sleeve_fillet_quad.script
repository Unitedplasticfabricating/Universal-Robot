def move_sleeve_fillet_quad():
  global _hidden_verificationVariable=0
  step_count_22459a16_70ba_4b2a_bc31_c5b6ac8d1e4d = 0.0
  thread Step_Counter_Thread_14417c08_b74a_4f26_80d3_5ff15b3e9ceb():
    while (True):
      step_count_22459a16_70ba_4b2a_bc31_c5b6ac8d1e4d = step_count_22459a16_70ba_4b2a_bc31_c5b6ac8d1e4d + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_14417c08_b74a_4f26_80d3_5ff15b3e9ceb()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_15_p=p[-1.407380776760, .244553517307, .007478427685, -.008114727820, -2.225325196731, -.436594641209]
  global Waypoint_15_q=[-0.3691086333782385, -0.7013310739716356, 1.9895993660378726, -2.2314527189569597, 1.198189490302425, -0.022542608318424584]
  global Waypoint_16_p=p[-1.318965781640, .244553517267, .007478427729, 1.058958647104, -2.110872036946, -.921011904321]
  global Waypoint_16_q=[-0.564465328037361, -0.746352841411726, 2.0497530000767696, -3.000311533025652, 0.20010701746951742, 0.7630713273774462]
  while (True):
    $ 2 "Robot Program"
    $ 3 "Set"
    set_tcp(p[0.00451,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 37 "assign points"
    $ 38 "p1≔pathturn[0]"
    global p1=pathturn[0]
    $ 39 "p2≔pathturn[1]"
    global p2=pathturn[1]
    $ 40 "p3≔pathturn[2]"
    global p3=pathturn[2]
    $ 41 "p4≔pathturn[3]"
    global p4=pathturn[3]
    $ 42 "pa1≔p[p1[0]+0.05,p1[1],p1[2]+0.05,p1[3],p1[4],p1[5]]"
    global pa1=p[p1[0]+0.05,p1[1],p1[2]+0.05,p1[3],p1[4],p1[5]]
    $ 43 "full circle"
    $ 47 "MoveJ"
    $ 51 "pa1" "breakAfter"
    movej(pa1, a=1.3962634015954636, v=1.0471975511965976)
    $ 52 "p1" "breakAfter"
    movej(p1, a=1.3962634015954636, v=1.0471975511965976)
    $ 60 "MoveP"
    $ 61 "CircleMove"
    $ 62 "p2" "noBreak"
    
    $ 63 "p3" "breakAfter"
    movec(p2, p3, a=1.2, v=0.01, r=0.025, mode=1)
    $ 64 "CircleMove"
    $ 65 "p4" "noBreak"
    
    $ 66 "p1" "breakAfter"
    movec(p4, p1, a=1.2, v=0.01, r=0.025, mode=1)
    $ 67 "MoveL"
    $ 68 "Direction: Base"
    global move_thread_flag_68=0
    thread move_thread_68():
      enter_critical
      move_thread_flag_68 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,1.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_68 = 2
      exit_critical
    end
    move_thread_flag_68 = 0
    move_thread_han_68 = run move_thread_68()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_68 > 1):
        join move_thread_han_68
        $ 69 "Until (distance)"
        break
      end
      sync()
    end
    $ 70 "Popup: pause"
    popup("pause", "Message", False, False, blocking=False)
    halt
    $ 71 "MoveJ"
    $ 72 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 73 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
