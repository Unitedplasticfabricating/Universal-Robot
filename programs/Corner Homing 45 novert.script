def Corner_Homing_45_novert():
  global _hidden_verificationVariable=0
  step_count_e6c505da_f58a_45bb_b993_633d9c8e2d74 = 0.0
  thread Step_Counter_Thread_b5100ddf_8e5e_4bd6_b482_7e35b90b5ffb():
    while (True):
      step_count_e6c505da_f58a_45bb_b993_633d9c8e2d74 = step_count_e6c505da_f58a_45bb_b993_633d9c8e2d74 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_b5100ddf_8e5e_4bd6_b482_7e35b90b5ffb()
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.00157,-0.09008,0.25767,0.0,0.0,0.0])
  set_target_payload(8.250000, [-0.001000, -0.057000, 0.067000], [0.051851, 0.051851, 0.051851, 0.000000, 0.000000, 0.000000])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.8.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_4_p=p[-.658264763546, .299530128456, .030909835036, .426821001551, -1.621505068649, .437070885767]
  global Waypoint_4_q=[-1.350241486226217, -0.9702387017062684, 2.492185179387228, -1.7834822140135707, -0.33723670641054326, 1.8489984273910522]
  global Waypoint_6_p=p[-.448862677341, .524599667441, -.175967040878, 2.473330473302, -1.874382924863, .205319206046]
  global Waypoint_6_q=[-1.1354392210589808, -1.0039964479259034, 2.441021744404928, -2.875528474847311, -1.6043828169452112, 1.7329596281051636]
  global Waypoint_7_p=p[-.559130451394, .259233925829, .102445980692, -.822649281727, -1.486064670292, -.881476138414]
  global Waypoint_7_q=[-0.556256119404928, -1.0744255942157288, 2.9114087263690394, -1.7763501606383265, -4.185837809239523, 1.5288889408111572]
  global Waypoint_3_p=p[-.343952006273, .632142227752, .615174722549, -.025948978133, -.008794819136, -.567469912202]
  global Waypoint_3_q=[-1.350241486226217, -0.9702451390079041, 2.492171827946798, -3.0669099293150843, 1.575993537902832, 2.355180025100708]
  $ 2 "Robot Program"
  $ 3 "'Use this program when tool is already positioned close to corner at 45deg'"
  # 'Use this program when tool is already positioned close to corner at 45deg'
  $ 4 "'tool flange will seek all 3 sides. will save those 5 locs in p__'"
  # 'tool flange will seek all 3 sides. will save those 5 locs in p__'
  $ 5 "Set"
  set_tcp(p[0.00157,-0.09008,0.25767,0.0,0.0,0.0])
  $ 6 "'dummy move below for debug'"
  # 'dummy move below for debug'
  $ 11 "Wait: 1.0"
  sleep(1.0)
  $ 12 "tpâ‰”get_actual_tcp_pose()"
  global tp= get_actual_tcp_pose ()
  $ 13 "Script: analyze_touchpoints.script"
  # this file creates the function for analyzing touchpoints
  # define pi
  pi = 3.1415926535
  
  # this is the main entry point for calculations.
  # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
  # specifically for Down, Over, then Around (DOtA)
  # specifically for right-sided boxes (vertical weld on right side of edge)
  def main_calculate_right(p11, p12, p21, p22, p3, p13, p23):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      list1 = analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3)
      struct2 = calculate_DOtA_points_right(struct1, list1)
      return struct2
  end
  
  # this is the main entry point for calculations.
  # it takes in the 5 points, analyzes the shape of the box, and then calculates path points and returns them
  # specifically for Down, Over, then Around (DOtA)
  # specifically for left-sided boxes (vertical weld on left side of edge)
  def main_calculate_left(p11, p12, p21, p22, p3):
      struct1 = analyze_touchpoints_only(p11, p12, p21, p22, p3)
      struct2 = calculate_DOtA_points_left(struct1)
      return struct2
  end
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, pointapproach1, pointapproach2, point1, point2, point3, point4, point5, pointreturn1, heading1, heading2, heading3, path2r1, path2r2, path2l1, path2l2)
  # specifically for Around then Up (AtU)
  def analyze_touchpoints(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    # FIND THE FOUR POINTS ON THE LINES
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance = 8
    roundoverdistance = 0.05
    zup = .375
    # inches
    wd = welddistance * 25.4 / 1000
    rod = roundoverdistance * 25.4 / 1000
    zup = zup * 25.4 / 1000
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l1delxunit * wd
    y = yintersect + l1delyunit * wd
    z = zcoord + zup
  
    point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
  
    x = xintersect + l1delxunit * rod
    y = yintersect + l1delyunit * rod
  
    point2 = p[x,y,z,1.570796,0,0]
  
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l2delxunit * wd
    y = yintersect + l2delyunit * wd
  
    point5 = p[x,y,z,0,-1.570796,0]
  
    x = xintersect + l2delxunit * rod
    y = yintersect + l2delyunit * rod
  
    point4 = p[x,y,z,0,-1.570796,0]
  
    #DEFINE APPROACH POINTS
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
    pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
    pointapproach2 = p[point1[0], point1[1]+0.1, point1[2], point1[3], point1[4], point1[5]]
    pointreturn1 = p[point5[0]+0.1, point5[1], point5[2], point5[3], point5[4], point5[5]]
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #FIND POINT 3
    #see if we have to / can find point 3
    findpoint3 = True
    if roundoverdistance == 0:
      findpoint3 = False
    end
    if findpoint3:
      # i need to find the point3 such that the arc from p2 to p3 to p4 is tangent to p1-p2 and p4-p5. making this a smooth path will be good
      # the direction of movement is from pointintersect in the direction of heading2
      # how much movement though? this will depend on whether it is actually a 90 degree angle or not.
      # first, find the perpendicular lines through points 2 and 4
      perp2 = find_perpendicular_line(ml1, point2[0], point2[1])
      perp4 = find_perpendicular_line(ml2, point4[0], point4[1])
      # next, find the intersection of those two lines
      perpintersect = find_intersection(perp2[0], perp2[1], perp4[0], perp4[1])
      radiusofcircle = distance_between(perpintersect[0], perpintersect[1], 0, point2[0], point2[1], 0)
      # find a vector the direction of heading2
      uvx = cos(heading2)
      uvy = sin(heading2)
      # compute point3. pass in negative radius because the direction is into the tank but we want to move from the intersection out to the rounded edge.
      point3coords = add_vectordistance_to_point(perpintersect[0], perpintersect[1], z, uvx, uvy, 0, -1 * radiusofcircle)
      point3 = p[point3coords[0], point3coords[1], point3coords[2], 0, 0, 0]
    end
  
    #APPLY ACTUAL RXRYRZ TO POINTS
    # convert the headings to rxryrz and insert those values into the relevant points
    rxryrz = convert_heading_to_axang(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    pointapproach1 = p[pointapproach1[0], pointapproach1[1], pointapproach1[2], rx, ry, rz]
    pointapproach2 = p[pointapproach2[0], pointapproach2[1], pointapproach2[2], rx, ry, rz]
    point1 = p[point1[0], point1[1], point1[2], rx, ry, rz]
    point2 = p[point2[0], point2[1], point2[2], rx, ry, rz]
    rxryrz = convert_heading_to_axang(heading2)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    if findpoint3:
      point3 = p[point3[0], point3[1], point3[2], rx, ry, rz]
    else:
      point3 = point2
    end
    rxryrz = convert_heading_to_axang(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    point4 = p[point4[0], point4[1], point4[2], rx, ry, rz]
    point5 = p[point5[0], point5[1], point5[2], rx, ry, rz]
    pointreturn1 = p[pointreturn1[0], pointreturn1[1], pointreturn1[2], rx, ry, rz]
  
    #find path2 (the part that goes up)
    four_vertical_points = find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, zup, wd, heading1, heading3)
    path2r1 = four_vertical_points[0]
    path2r2 = four_vertical_points[1]
    path2l1 = four_vertical_points[2]
    path2l2 = four_vertical_points[3]
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, pointapproach1=pointapproach1, pointapproach2=pointapproach2, point1=point1, point2=point2, point3=point3, point4=point4, point5=point5, pointreturn1=pointreturn1, heading1=heading1, heading2=heading2, heading3=heading3, path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
    return ret
  end
  
  # it takes 5 arguments as points
  # it returns a struct containing: (pointintersect, heading1, heading2, heading3, l1delxunit, l1delyunit, l2delxunit, l2delyunit)
  def analyze_touchpoints_only(p11, p12, p21, p22, p3):
    # FIND THE INTERSECTION
    # comment get the z
    zcoord=p3[2]
  
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
  
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
  
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
  
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
  
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
  
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
  
  
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
  
    pointintersect = p[xintersect,yintersect,zcoord,0,0,0]
  
    #FIND THE VECTORS
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
  
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
  
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
  
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
  
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
  
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
  
    #FIND HEADINGS
    #for each heading, find the angle of the line with respect to the pos x axis. then add/subtract 90 degrees because you want to be perpendicular to that
    headingvector1 = convert_uv_to_heading(l1delxunit, l1delyunit)
    headingvector2 = convert_uv_to_heading(l2delxunit, l2delyunit)
    # find halfway heading
    heading2 = (headingvector1 + headingvector2)/2
    # find headings that the robot should face while traveling, perpendicular to the vectors of the sides of the box
    heading1 = headingvector1 + pi/2
    heading3 = headingvector2 - pi/2
  
    #RETURN STRUCT
    ret = struct(pointintersect=pointintersect, heading1=heading1, heading2=heading2, heading3=heading3, l1delxunit=l1delxunit, l1delyunit=l1delyunit, l2delxunit=l2delxunit, l2delyunit=l2delyunit)
    return ret
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  def calculate_DOtA_points_right(struct1, listleans):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance1 = 8 # vertical weld distance
      welddistance2 = 6 # first path second leg
      welddistance3 = 8 # second path second leg
      zup = .375
      # inches
      wd1 = welddistance1 * 25.4 / 1000
      wd2 = welddistance2 * 25.4 / 1000
      wd3 = welddistance3 * 25.4 / 1000
      zup = zup * 25.4 / 1000
  
      x = pointintersect[0] + l1delxunit * zup
      y = pointintersect[1] + l1delyunit * zup
      z = pointintersect[2] + zup
  
      #apply actual rxryrz to points
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x + wd1*listleans[0], y + wd1*listleans[1], z + wd1, rx, ry, rz] # add in the listleans factor to follow the face of the box as we move up
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l1delxunit * wd2
      y = y + l1delyunit * wd2
      point5 = p[x, y, z, rx, ry, rz]
  
      # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l1delxunit * (zup)
      y = pointintersect[1] + l1delyunit * zup
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_1 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l1delxunit * rod
      y = pointintersect[1] + l1delyunit * rod
      point_2 = p[x, y, z, rx, ry, rz]
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l2delxunit * wd3
      y = pointintersect[1] + l2delyunit * wd3
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_5 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l2delxunit * rod
      y = pointintersect[1] + l2delyunit * rod
      point_4 = p[x, y, z, rx, ry, rz]
  
      #FIND POINT 3
      # by calling analyze_touchpoints()
      atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
      point_3 = atret[5]
  
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
      return struct2
  end
  
  # given a struct from analyze_touchpoints_only(), calculate the points
  def calculate_DOtA_points_left(struct1):
      # get the stuff from the struct
      pointintersect = struct1[0]
      heading1 = struct1[1]
      heading2 = struct1[2]
      heading3 = struct1[3]
      l1delxunit = struct1[4]
      l1delyunit = struct1[5]
      l2delxunit = struct1[6]
      l2delyunit = struct1[7]
  
      # FIND THE POINTS ON THE LINES OF THE FIRST TURN PATH
      # find locations 8 inches away from  intersect point
      # CONST
      welddistance = 8
      zup = .375
      # inches
      wd = welddistance * 25.4 / 1000
      zup = zup * 25.4 / 1000
  
      x = pointintersect[0] + l2delxunit * zup
      y = pointintersect[1] + l2delyunit * zup
      z = pointintersect[2] + zup
  
      #apply actual rxryrz to points
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_preheatdown(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point1 = p[x, y, z + wd, rx, ry, rz]
      point2 = p[x, y, z, rx, ry, rz]
  
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
  
      point4 = p[x, y, z, rx, ry, rz]
      x = x + l2delxunit * wd
      y = y + l2delyunit * wd
      point5 = p[x, y, z, rx, ry, rz]
  
      # FIND THE POINTS ON THE LINES OF THE SECOND AROUND PATH
      roundoverdistance = 0.05
      rod = roundoverdistance * 25.4 / 1000
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l2delxunit * (zup)
      y = pointintersect[1] + l2delyunit * zup
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading3)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_1 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l2delxunit * rod
      y = pointintersect[1] + l2delyunit * rod
      point_2 = p[x, y, z, rx, ry, rz]
  
      # now we have the unit vector. extend the weld distance from the intersection
      x = pointintersect[0] + l1delxunit * wd
      y = pointintersect[1] + l1delyunit * wd
      # convert the headings to rxryrz and insert those values into the relevant points
      rxryrz = convert_heading_to_axang_ccw(heading1)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_5 = p[x, y, z, rx, ry, rz]
  
      x = pointintersect[0] + l1delxunit * rod
      y = pointintersect[1] + l1delyunit * rod
      point_4 = p[x, y, z, rx, ry, rz]
  
      #FIND POINT 3
      # by calling analyze_touchpoints()
      atret = analyze_touchpoints(point_2, point_1, point_4, point_5, pointintersect)
      point_3 = atret[5]
      #point 3 will not have the correct rxryrz though because now the gun needs to be face up.
      rxryrz = convert_heading_to_axang_ccw(heading2)
      rx = rxryrz[0]
      ry = rxryrz[1]
      rz = rxryrz[2]
      point_3 = p[point_3[0], point_3[1], point_3[2], rx, ry, rz]
  
      struct2 = struct(point1=point1, point2=point2, point4=point4, point5=point5, point_1=point_1, point_2=point_2, point_3=point_3, point_4=point_4, point_5=point_5)
      return struct2
  end
  
  # this function analyzes the vertical points
  # calculates the slope of the edge in question
  # specifically, for each inch up in the z direction, what is the change in x and change in y direction
  # returns a list of [nx, ny]
  def analyze_vertical_touchpoints(p11, p12, p13, p21, p22, p23, p3):
      # first, find the equations of the planes from the 6 points
      plane1 = findplane(p11, p12, p13)
      plane2 = findplane(p21, p22, p23)
      # Find the Direction Vector of the Line: The direction vector d of the line of intersection can be found by taking the cross product of the normal vectors of each plane (a, b, and c)
      nx = plane1[1]*plane2[2] - plane1[2]*plane2[1]
      ny = plane1[2]*plane2[0] - plane1[0]*plane2[2]
      nz = plane1[0]*plane2[1] - plane1[1]*plane2[0]
      # normalize the vector so the z length is 1
      multiplier = 1 / nz
      nx = nx * multiplier
      ny = ny * multiplier
      nz = nz * multiplier # should become equal to 1
      ret = [nx, ny]
      return ret
  end
  
  # given 3 points, this finds the plane and its equation
  # rereturns ax + by + cz + d = 0 in a list of [a, b, c, d]
  def findplane(p11, p12, p13):
      # extract coordinates
      x1 = p11[0]
      y1 = p11[1]
      z1 = p11[2]
      x2 = p12[0]
      y2 = p12[1]
      z2 = p12[2]
      x3 = p13[0]
      y3 = p13[1]
      z3 = p13[2]
      # create vectors from the points
      v1x = x2-x1
      v1y = y2-y1
      v1z = z2-z1
      v2x = x3-x1
      v2y = y3-y1
      v2z = z3-z1
      #calculate the normal vector using the cross product
      nx = v1y*v2z - v1z*v2y # i component
      ny = v1z*v2x - v1x*v2z # j component
      nz = v1x*v2y - v1y*v2x # k component
      # calculate d in the plane equation
      d = -1 * (nx*x1 + ny*y1 + nz*z1)
      ret = [nx, ny, nz, d]
      return ret
  end
  
  # given a heading, (ccw from +x axis), find the mx+b slope
  # fails if exactly vertical
  def get_slope_from_heading(heading):
      return tan(heading)
  end
  
  
  
  # this function finds the points (and rxryrz) of the 2 points (start and end) of vertical weld section
  def find_vertical_points(pointintersect, l1delxunit, l1delyunit, l2delxunit, l2delyunit, offset, wd, heading1, heading3):
  
    # find right side stuff
    # find the point in 3d space that is .375 up and .375 over
    x = pointintersect[0] + l1delxunit * offset
    y = pointintersect[1] + l1delyunit * offset
    z = pointintersect[2] + offset
    # find rxryrz
    rxryrz = convert_heading_to_axang_preheatup(heading1)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    path2r1 = p[x, y, z, rx, ry, rz]
    path2r2 = p[x, y, z + wd, rx, ry, rz]
  
    # find left side
    # find the point in 3d space that is .375 up and .375 over
    x = pointintersect[0] + l2delxunit * offset
    y = pointintersect[1] + l2delyunit * offset
    z = pointintersect[2] + offset
    # find rxryrz
    rxryrz = convert_heading_to_axang_preheatup(heading3)
    rx = rxryrz[0]
    ry = rxryrz[1]
    rz = rxryrz[2]
    path2l1 = p[x, y, z, rx, ry, rz]
    path2l2 = p[x, y, z + wd, rx, ry, rz]
  
    ret = struct(path2r1=path2r1, path2r2=path2r2, path2l1=path2l1, path2l2=path2l2)
    return ret
  end
  
  # this function converts a unit vector to its heading angle ccw from x+ axis
  # takes uvx and uvy
  # returns heading in radians
  def convert_uv_to_heading(uvx, uvy):
    baseang = atan(uvy/uvx)
    if uvx < 0:
      ang = baseang + pi
    elif uvy < 0:
      ang = baseang + pi * 2
    else:
      ang = baseang
    end
    return ang
  end
  
  # this function finds the equation of a line, perpendicular to a given line, and going through a given point
  # takes 3 arguments: m (the original line's slope), x (point's x coord), y (point's y coord). the b of the original line is not needed
  # returns a list of [m,b] (the slope and intercept of the new line)
  def find_perpendicular_line(origm, x, y):
    m = (1/origm) * -1
    b = y - m*x
    ret = [m, b]
    return ret
  end
  
  # this function finds the intersection point between two lines in the xy plane
  # takes 4 arguments: m1, b1, m2, b2
  # returns a list of [x,y] (the point of intersection)
  def find_intersection(m1, b1, m2, b2):
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    x = (b2-b1) / (m1-m2)
    y = m1 * x + b1
    ret = [x, y]
    return ret
  end
  
  # this function finds the distance between 2 points in 3d space
  # it takes 6 arguments: x1, y1, z1, x2, y2, z2
  # it returns a distance
  def distance_between(x1, y1, z1, x2, y2, z2):
    distsquared = (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1)
    dist = sqrt(distsquared)
    return dist
  end
  
  # this function takes a point, a unit vector, and a distance, and adds the distance to the point in the direction of the unit vector (3d space)
  # it returns a point as a list of coordinates
  def add_vectordistance_to_point(xi, yi, zi, uvx, uvy, uvz, delta):
    xf = xi + uvx * delta
    yf = yi + uvy * delta
    zf = zi + uvz * delta
    ret = [xf, yf, zf]
    return ret
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the bottom side of the gun facing up.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang(heading):
   axisxraw = -1 * sin(heading)
   axisyraw = cos(heading) + 1
   axiszraw = sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing up. Used for welding in a vertical path.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_preheatup(heading):
   axisxraw = -sin(heading) + 1
   axisyraw = cos(heading)
   axiszraw = cos(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (-sin(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing down. Used for welding in a vertical path downwards.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_preheatdown(heading):
   axisxraw = -sin(heading) - 1
   axisyraw = cos(heading)
   axiszraw = -cos(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (sin(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function converts a heading (ccw radians from the positive x axis) into rxryrz to be put into a point p[]
  # this will point the gun in this heading with the preheat side of the gun tip facing right. Used for welding counterclockwise around the box.
  # the values used in this program were calculated by doing rotation matrix math in the file on WI-CALVINB10 C. Documents. Theory for converting rotations into axis angle representations
  def convert_heading_to_axang_ccw(heading):
   axisxraw = -sin(heading)
   axisyraw = cos(heading) - 1
   axiszraw = -sin(heading)
  
   magnitude = sqrt(axisxraw*axisxraw + axisyraw*axisyraw + axiszraw*axiszraw)
  
   axisxunit = axisxraw / magnitude
   axisyunit = axisyraw / magnitude
   axiszunit = axiszraw / magnitude
  
   angle = acos( (-cos(heading) - 1) / 2 )
  
   rxout = axisxunit * angle
   ryout = axisyunit * angle
   rzout = axiszunit * angle
  
   return [rxout, ryout, rzout]
  end
  
  # this function is for getting the points along the path of the corner homing 45
  # point0 is the point where they touched
  def get_corner_homing_45_pathpoints(point0):
    p0x = point0[0]
    p0y = point0[1]
    p0z = point0[2]
    p0rx = point0[3]
    p0ry = point0[4]
    p0rz = point0[5]
  
    #constants
    #distances of how far away from point the touchpoints are
    d0 = 0.15 # how far from the box to retreat and approach
    d1 = 0.05 # first distance from init point
    d2 = 0.2 # second distance from init point
    d3 = 0.125 #vertical distance from first point
    sqrt2 = 0.707106781
  
    ph1 = p[p0x + d0, p0y, p0z + .05, p0rx, p0ry, p0rz] #approach point for turn
  
    ph2 = p[p0x+d0-d0*sqrt2-sqrt2*d1, p0y+d0*sqrt2+sqrt2*d1, p0z+.05, .445, -1.562, .483]
    ph3 = p[p0x+d0-d0*sqrt2-sqrt2*d2, p0y+d0*sqrt2+sqrt2*d2, p0z+.05, .445, -1.562, .483]
    ph4 = p[p0x+d0-d0*sqrt2-sqrt2*d1, p0y-d0*sqrt2-sqrt2*d1, p0z+.05, 1.699, 3.576, 1.841]
    ph5 = p[p0x+d0-d0*sqrt2-sqrt2*d2, p0y-d0*sqrt2-sqrt2*d2, p0z+.05, 1.699, 3.576, 1.841]
  
    # go back to ph1
    ph6 = p[p0x + .05, p0y, p0z -.05, 0, 0, 0] # approach point for under turn
    # moveL from ph1 to ph6
    ph7 = p[p0x-.05, p0y, p0z-.05, 0, 0, 0]
  
    # add the vertical touch points
    ph2up = p[ph2[0], ph2[1], ph2[2]+d3, ph2[3], ph2[4], ph2[5]]
    ph4up = p[ph4[0], ph4[1], ph4[2]+d3, ph4[3], ph4[4], ph4[5]]
    ret = struct(ph1=ph1, ph2=ph2, ph3=ph3, ph4=ph4, ph5=ph5, ph6=ph6, ph7=ph7, ph2up=ph2up, ph4up=ph4up)
    return ret
  end
  $ 14 "path_preâ‰”get_corner_homing_45_pathpoints(tp)"
  global path_pre=get_corner_homing_45_pathpoints(tp)
  $ 15 "ph1â‰”path_pre[0]"
  global ph1=path_pre[0]
  $ 16 "ph2â‰”path_pre[1]"
  global ph2=path_pre[1]
  $ 17 "ph3â‰”path_pre[2]"
  global ph3=path_pre[2]
  $ 18 "ph4â‰”path_pre[3]"
  global ph4=path_pre[3]
  $ 19 "ph5â‰”path_pre[4]"
  global ph5=path_pre[4]
  $ 20 "ph6â‰”path_pre[5]"
  global ph6=path_pre[5]
  $ 21 "ph7â‰”path_pre[6]"
  global ph7=path_pre[6]
  $ 22 "MoveJ"
  $ 23 "ph1" "breakAfter"
  movej(ph1, a=1.3962634015954636, v=1.0471975511965976)
  $ 24 "ph2" "breakAfter"
  movej(ph2, a=1.3962634015954636, v=1.0471975511965976)
  $ 25 "MoveL"
  $ 26 "Direction: Base"
  global move_thread_flag_26=0
  thread move_thread_26():
    enter_critical
    move_thread_flag_26 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.05)
    move_thread_flag_26 = 2
    exit_critical
  end
  move_thread_flag_26 = 0
  move_thread_han_26 = run move_thread_26()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_26
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 27 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 28 "p11â‰”get_actual_tcp_pose()"
  global p11= get_actual_tcp_pose ()
  $ 29 "MoveJ"
  $ 30 "ph3" "breakAfter"
  movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
  $ 31 "MoveL"
  $ 32 "Direction: Base"
  global move_thread_flag_32=0
  thread move_thread_32():
    enter_critical
    move_thread_flag_32 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1,-1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.05)
    move_thread_flag_32 = 2
    exit_critical
  end
  move_thread_flag_32 = 0
  move_thread_han_32 = run move_thread_32()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_32
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 33 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 34 "p12â‰”get_actual_tcp_pose()"
  global p12= get_actual_tcp_pose ()
  $ 35 "MoveJ"
  $ 36 "ph3" "breakAfter"
  movej(ph3, a=1.3962634015954636, v=1.0471975511965976)
  $ 37 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 38 "MoveJ"
  $ 39 "Waypoint_6" "breakAfter"
  movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=0.3490658503988659)
  $ 41 "Waypoint_7" "breakAfter"
  movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=0.3490658503988659)
  $ 42 "MoveJ"
  $ 43 "ph4" "breakAfter"
  movej(ph4, a=1.3962634015954636, v=1.0471975511965976)
  $ 44 "MoveL"
  $ 45 "Direction: Base"
  global move_thread_flag_45=0
  thread move_thread_45():
    enter_critical
    move_thread_flag_45 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.05)
    move_thread_flag_45 = 2
    exit_critical
  end
  move_thread_flag_45 = 0
  move_thread_han_45 = run move_thread_45()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_45
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 46 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 47 "p21â‰”get_actual_tcp_pose()"
  global p21= get_actual_tcp_pose ()
  $ 48 "MoveJ"
  $ 49 "ph5" "breakAfter"
  movej(ph5, a=1.3962634015954636, v=1.0471975511965976)
  $ 50 "MoveL"
  $ 51 "Direction: Base"
  global move_thread_flag_51=0
  thread move_thread_51():
    enter_critical
    move_thread_flag_51 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,1.0,0.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.05)
    move_thread_flag_51 = 2
    exit_critical
  end
  move_thread_flag_51 = 0
  move_thread_han_51 = run move_thread_51()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_51
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 52 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 53 "p22â‰”get_actual_tcp_pose()"
  global p22= get_actual_tcp_pose ()
  $ 54 "MoveJ"
  $ 55 "ph5" "breakAfter"
  movej(ph5, a=1.3962634015954636, v=1.0471975511965976)
  $ 56 "ph4" "breakAfter"
  movej(ph4, a=1.3962634015954636, v=1.0471975511965976)
  $ 58 "Waypoint_7" "breakAfter"
  movej(get_inverse_kin(Waypoint_7_p, qnear=Waypoint_7_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 59 "Waypoint_6" "breakAfter"
  movej(get_inverse_kin(Waypoint_6_p, qnear=Waypoint_6_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 60 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 61 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 62 "ph6" "breakAfter"
  movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
  $ 63 "ph7" "breakAfter"
  movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
  $ 64 "MoveL"
  $ 65 "Direction: Base Z+"
  global move_thread_flag_65=0
  thread move_thread_65():
    enter_critical
    move_thread_flag_65 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
    movel(towardsPos, a=0.1, v=0.05)
    move_thread_flag_65 = 2
    exit_critical
  end
  move_thread_flag_65 = 0
  move_thread_han_65 = run move_thread_65()
  while (True):
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_65
      stopl(3.0)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=3.0, v=0.1)
      $ 66 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 67 "p3â‰”get_actual_tcp_pose()"
  global p3= get_actual_tcp_pose ()
  $ 68 "MoveJ"
  $ 69 "ph7" "breakAfter"
  movej(ph7, a=1.3962634015954636, v=1.0471975511965976)
  $ 70 "ph6" "breakAfter"
  movej(ph6, a=1.3962634015954636, v=1.0471975511965976)
  $ 71 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 72 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 73 "Home"
  movej([-3.4579734502641006, -2.05691362454537, 2.326567589830591, -0.22707360390354125, -0.19934432301767302, -0.10534790278823536], a=1.3962634015954636, v=1.0471975511965976)
  $ 74 "Comment"
  # Comment
  $ 75 "Comment"
  # Comment
  $ 76 "Comment"
  # Comment
  $ 77 "Comment"
  # Comment
  $ 78 "Comment"
  # Comment
  $ 79 "Comment"
  # Comment
end
