def Test_Script_Calcs():
  global _hidden_verificationVariable=0
  step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 = 0.0
  thread Step_Counter_Thread_1612d609_c27e_4fb2_a3a6_b8d1164a790d():
    while (True):
      step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 = step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_1612d609_c27e_4fb2_a3a6_b8d1164a790d()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.310000, [0.000000, 0.000000, 0.009500], [0.000219, 0.000219, 0.000219, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  global freedrive_m_var=  False  
  global Waypoint_8_p=p[.183612702909, .373491415748, .464002429884, -.000031211095, 3.141572859461, .000004622808]
  global Waypoint_8_q=[-2.527531687413351, -2.1028810940184535, 2.591139856969015, -2.0582763157286585, -1.5713656584369105, 2.1834325790405273]
  global Waypoint_2_p=p[-.545552386461, .384638463642, .171639485768, .668511604681, -1.949272130073, 1.726627182696]
  global Waypoint_2_q=[-1.0565226713763636, -1.0868892234614869, 2.1878750959979456, -1.2335426074317475, -1.0471814314471644, 2.53226637840271]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_3_p=p[.432120633847, .373496143704, .463992564600, -.000014136521, -3.141567738104, -.000014867905]
  global Waypoint_3_q=[-2.7853482405291956, -1.8143698177733363, 2.4549508730517786, -2.210560461083883, -1.5711315313922327, 1.9254603385925293]
  global Waypoint_4_p=p[.432136735069, .373501596410, .340883510249, -.000031606225, -3.141589553529, -.000013823620]
  global Waypoint_4_q=[-2.785483185444967, -1.6431261501707972, 2.568024222050802, -2.49489750484609, -1.5709694067584437, 1.9253177642822266]
  global Waypoint_5_p=p[.432160287104, .281352183882, .340893061994, .000015375091, 3.141574034920, .000032661568]
  global Waypoint_5_q=[-2.9616554419146937, -1.7250400982298792, 2.631975237523214, -2.4769565067686976, -1.5710294882403772, 1.7491776943206787]
  global Waypoint_6_p=p[.432128063058, .281346135716, .478493221894, .000013346378, -3.141574975494, -.000002942308]
  global Waypoint_6_q=[-2.961463991795675, -1.9219290218748988, 2.4929660002337855, -2.141019483605856, -1.571230713521139, 1.7493857145309448]
  def Test_Teach_Position():
    $ 7 "Test_Teach_Position" "noBreak"
    $ 8 "Home"
    movej([-2.5278157671606145, -1.852465766610969, 2.7650339410037645, -2.482569784177298, -1.5711424260709022, 2.183095047178716], a=1.3962634015954636, v=1.0471975511965976)
    $ 9 "MoveL"
    $ 10 "Waypoint_8" "breakAfter"
    movel(Waypoint_8_p, a=1.2, v=0.25)
    $ 11 "'move welder up out of holder'"
    # 'move welder up out of holder'
    $ 12 "MoveJ"
    $ 13 "Waypoint_2" "breakAfter"
    movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 14 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 15 "freedrive_m_var≔ True "
    global freedrive_m_var=  True  
    $ 16 "Popup: Move the robot to the peg center, then click 'Continue'"
    popup("Move the robot to the peg center, then click 'Continue'", "Message", False, False, blocking=True)
    $ 17 "freedrive_m_var≔ False "
    global freedrive_m_var=  False  
    $ 18 "Wait: 0.25"
    sleep(0.25)
    $ 19 "sync()"
    sync()
    $ 20 "tcp_pose≔get_actual_joint_positions()"
    global tcp_pose= get_actual_joint_positions ()
  end
  def Corner_Homing_BRB():
    $ 21 "Corner_Homing_BRB" "noBreak"
    $ 22 "'Use this program when tool is already positioned close to corner (back right bottom corner)'"
    # 'Use this program when tool is already positioned close to corner (back right bottom corner)'
    $ 23 "'tool flange will seek all 3 sides and then bring tcp to the corner'"
    # 'tool flange will seek all 3 sides and then bring tcp to the corner'
    $ 24 "align_tcp_left()"
    align_tcp_left()
    $ 25 "'right side'"
    # 'right side'
    $ 26 "MoveL"
    $ 27 "Direction: Base X-"
    global move_thread_flag_27=0
    thread move_thread_27():
      enter_critical
      move_thread_flag_27 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_27 = 2
      exit_critical
    end
    move_thread_flag_27 = 0
    move_thread_han_27 = run move_thread_27()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_27 > 1):
        join move_thread_han_27
        $ 28 "Until (distance)"
        break
      end
      sync()
    end
    $ 29 "MoveL"
    $ 30 "Direction: Base Y-"
    global move_thread_flag_30=0
    thread move_thread_30():
      enter_critical
      move_thread_flag_30 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_30 = 2
      exit_critical
    end
    move_thread_flag_30 = 0
    move_thread_han_30 = run move_thread_30()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_30
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 31 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 32 "p11≔get_actual_tcp_pose()"
    global p11= get_actual_tcp_pose ()
    $ 33 "MoveL"
    $ 34 "Direction: Base Y+"
    global move_thread_flag_34=0
    thread move_thread_34():
      enter_critical
      move_thread_flag_34 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_34 = 2
      exit_critical
    end
    move_thread_flag_34 = 0
    move_thread_han_34 = run move_thread_34()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_34 > 1):
        join move_thread_han_34
        $ 35 "Until (distance)"
        break
      end
      sync()
    end
    $ 36 "MoveL"
    $ 37 "Direction: Base X-"
    global move_thread_flag_37=0
    thread move_thread_37():
      enter_critical
      move_thread_flag_37 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_37 = 2
      exit_critical
    end
    move_thread_flag_37 = 0
    move_thread_han_37 = run move_thread_37()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_37 > 1):
        join move_thread_han_37
        $ 38 "Until (distance)"
        break
      end
      sync()
    end
    $ 39 "MoveL"
    $ 40 "Direction: Base Y-"
    global move_thread_flag_40=0
    thread move_thread_40():
      enter_critical
      move_thread_flag_40 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_40 = 2
      exit_critical
    end
    move_thread_flag_40 = 0
    move_thread_han_40 = run move_thread_40()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_40
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 41 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 42 "p12≔get_actual_tcp_pose()"
    global p12= get_actual_tcp_pose ()
    $ 43 "MoveL"
    $ 44 "Direction: Base Y+"
    global move_thread_flag_44=0
    thread move_thread_44():
      enter_critical
      move_thread_flag_44 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_44 = 2
      exit_critical
    end
    move_thread_flag_44 = 0
    move_thread_han_44 = run move_thread_44()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_44 > 1):
        join move_thread_han_44
        $ 45 "Until (distance)"
        break
      end
      sync()
    end
    $ 46 "MoveL"
    $ 47 "Direction: Base X+"
    global move_thread_flag_47=0
    thread move_thread_47():
      enter_critical
      move_thread_flag_47 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_47 = 2
      exit_critical
    end
    move_thread_flag_47 = 0
    move_thread_han_47 = run move_thread_47()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_47 > 1):
        join move_thread_han_47
        $ 48 "Until (distance)"
        break
      end
      sync()
    end
    $ 49 "align_tcp_forward()"
    align_tcp_forward()
    $ 50 "'back side'"
    # 'back side'
    $ 51 "MoveL"
    $ 52 "Direction: Base Y-"
    global move_thread_flag_52=0
    thread move_thread_52():
      enter_critical
      move_thread_flag_52 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_52 = 2
      exit_critical
    end
    move_thread_flag_52 = 0
    move_thread_han_52 = run move_thread_52()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_52 > 1):
        join move_thread_han_52
        $ 53 "Until (distance)"
        break
      end
      sync()
    end
    $ 54 "MoveL"
    $ 55 "Direction: Base X-"
    global move_thread_flag_55=0
    thread move_thread_55():
      enter_critical
      move_thread_flag_55 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_55 = 2
      exit_critical
    end
    move_thread_flag_55 = 0
    move_thread_han_55 = run move_thread_55()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_55
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 56 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 57 "p21≔get_actual_tcp_pose()"
    global p21= get_actual_tcp_pose ()
    $ 58 "MoveL"
    $ 59 "Direction: Base X+"
    global move_thread_flag_59=0
    thread move_thread_59():
      enter_critical
      move_thread_flag_59 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_59 = 2
      exit_critical
    end
    move_thread_flag_59 = 0
    move_thread_han_59 = run move_thread_59()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_59 > 1):
        join move_thread_han_59
        $ 60 "Until (distance)"
        break
      end
      sync()
    end
    $ 61 "MoveL"
    $ 62 "Direction: Base Y-"
    global move_thread_flag_62=0
    thread move_thread_62():
      enter_critical
      move_thread_flag_62 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_62 = 2
      exit_critical
    end
    move_thread_flag_62 = 0
    move_thread_han_62 = run move_thread_62()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_62 > 1):
        join move_thread_han_62
        $ 63 "Until (distance)"
        break
      end
      sync()
    end
    $ 64 "MoveL"
    $ 65 "Direction: Base X-"
    global move_thread_flag_65=0
    thread move_thread_65():
      enter_critical
      move_thread_flag_65 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_65 = 2
      exit_critical
    end
    move_thread_flag_65 = 0
    move_thread_han_65 = run move_thread_65()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_65
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 66 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 67 "p22≔get_actual_tcp_pose()"
    global p22= get_actual_tcp_pose ()
    $ 68 "MoveL"
    $ 69 "Direction: Base X+"
    global move_thread_flag_69=0
    thread move_thread_69():
      enter_critical
      move_thread_flag_69 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_69 = 2
      exit_critical
    end
    move_thread_flag_69 = 0
    move_thread_han_69 = run move_thread_69()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_69 > 1):
        join move_thread_han_69
        $ 70 "Until (distance)"
        break
      end
      sync()
    end
    $ 71 "'regroup for up turn'"
    # 'regroup for up turn'
    $ 72 "MoveL"
    $ 73 "Direction: Base X+"
    global move_thread_flag_73=0
    thread move_thread_73():
      enter_critical
      move_thread_flag_73 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.2)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_73 = 2
      exit_critical
    end
    move_thread_flag_73 = 0
    move_thread_han_73 = run move_thread_73()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_73 > 1):
        join move_thread_han_73
        $ 74 "Until (distance)"
        break
      end
      sync()
    end
    $ 75 "Direction: Base Y+"
    global move_thread_flag_75=0
    thread move_thread_75():
      enter_critical
      move_thread_flag_75 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.4)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_75 = 2
      exit_critical
    end
    move_thread_flag_75 = 0
    move_thread_han_75 = run move_thread_75()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_75 > 1):
        join move_thread_han_75
        $ 76 "Until (distance)"
        break
      end
      sync()
    end
    $ 77 "MoveL"
    $ 78 "Direction: Base Z-"
    global move_thread_flag_78=0
    thread move_thread_78():
      enter_critical
      move_thread_flag_78 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_78 = 2
      exit_critical
    end
    move_thread_flag_78 = 0
    move_thread_han_78 = run move_thread_78()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_78 > 1):
        join move_thread_han_78
        $ 79 "Until (distance)"
        break
      end
      sync()
    end
    $ 80 "align_tcp_up()"
    align_tcp_up()
    $ 81 "MoveL"
    $ 82 "Direction: Base X-"
    global move_thread_flag_82=0
    thread move_thread_82():
      enter_critical
      move_thread_flag_82 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [-1.0,0.0,0.0], 0.25)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_82 = 2
      exit_critical
    end
    move_thread_flag_82 = 0
    move_thread_han_82 = run move_thread_82()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_82 > 1):
        join move_thread_han_82
        $ 83 "Until (distance)"
        break
      end
      sync()
    end
    $ 84 "Direction: Base Y-"
    global move_thread_flag_84=0
    thread move_thread_84():
      enter_critical
      move_thread_flag_84 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.3)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_84 = 2
      exit_critical
    end
    move_thread_flag_84 = 0
    move_thread_han_84 = run move_thread_84()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_84 > 1):
        join move_thread_han_84
        $ 85 "Until (distance)"
        break
      end
      sync()
    end
    $ 86 "'bottom side'"
    # 'bottom side'
    $ 87 "MoveL"
    $ 88 "Direction: Base Y-"
    global move_thread_flag_88=0
    thread move_thread_88():
      enter_critical
      move_thread_flag_88 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,-1.0,0.0], 0.12)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_88 = 2
      exit_critical
    end
    move_thread_flag_88 = 0
    move_thread_han_88 = run move_thread_88()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_88 > 1):
        join move_thread_han_88
        $ 89 "Until (distance)"
        break
      end
      sync()
    end
    $ 90 "MoveL"
    $ 91 "Direction: Base Z+"
    global move_thread_flag_91=0
    thread move_thread_91():
      enter_critical
      move_thread_flag_91 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_91 = 2
      exit_critical
    end
    move_thread_flag_91 = 0
    move_thread_han_91 = run move_thread_91()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_91
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0, normalizedPosDir[1] * 0.0, normalizedPosDir[2] * 0.0, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 92 "Until (tool_contact_detection)"
        break
      end
      sync()
    end
    $ 93 "p3≔get_actual_tcp_pose()"
    global p3= get_actual_tcp_pose ()
    $ 94 "MoveL"
    $ 95 "Direction: Base Z-"
    global move_thread_flag_95=0
    thread move_thread_95():
      enter_critical
      move_thread_flag_95 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 0.05)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_95 = 2
      exit_critical
    end
    move_thread_flag_95 = 0
    move_thread_han_95 = run move_thread_95()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_95 > 1):
        join move_thread_han_95
        $ 96 "Until (distance)"
        break
      end
      sync()
    end
    $ 97 "MoveL"
    $ 98 "Direction: Base X+"
    global move_thread_flag_98=0
    thread move_thread_98():
      enter_critical
      move_thread_flag_98 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_98 = 2
      exit_critical
    end
    move_thread_flag_98 = 0
    move_thread_han_98 = run move_thread_98()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_98 > 1):
        join move_thread_han_98
        $ 99 "Until (distance)"
        break
      end
      sync()
    end
    $ 100 "Direction: Base Y+"
    global move_thread_flag_100=0
    thread move_thread_100():
      enter_critical
      move_thread_flag_100 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,1.0,0.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_100 = 2
      exit_critical
    end
    move_thread_flag_100 = 0
    move_thread_han_100 = run move_thread_100()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_100 > 1):
        join move_thread_han_100
        $ 101 "Until (distance)"
        break
      end
      sync()
    end
  end
  def extrude_knife():
    $ 102 "extrude_knife" "noBreak"
    $ 103 "'Move to bucket'"
    # 'Move to bucket'
    $ 104 "MoveJ"
    $ 105 "Waypoint_3" "breakAfter"
    movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 106 "MoveL"
    $ 107 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=1.2, v=0.25)
    $ 108 "'extrude out a foot'"
    # 'extrude out a foot'
    $ 109 "Wait: 6.0"
    sleep(6.0)
    $ 110 "MoveL"
    $ 111 "'slice over knife'"
    # 'slice over knife'
    $ 112 "Waypoint_5" "breakAfter"
    movel(Waypoint_5_p, a=1.2, v=0.04)
    $ 113 "MoveL"
    $ 114 "Waypoint_6" "breakAfter"
    movel(Waypoint_6_p, a=1.2, v=0.25)
    $ 115 "'raise up away from knife'"
    # 'raise up away from knife'
  end
  def test_script_calcs2():
    $ 116 "test_script_calcs2" "noBreak"
    $ 117 "point1≔get_actual_tcp_pose()"
    global point1= get_actual_tcp_pose ()
    $ 118 "point2≔get_actual_tcp_pose()"
    global point2= get_actual_tcp_pose ()
    $ 119 "point3≔get_actual_tcp_pose()"
    global point3= get_actual_tcp_pose ()
    $ 120 "point4≔get_actual_tcp_pose()"
    global point4= get_actual_tcp_pose ()
    $ 121 "Script: analyze_touchpoints.script"
    # comment get the z
    zcoord=p3[2]
    
    # get the raw points from the first line
    l1p1x=p11[0]
    l1p1y=p11[1]
    l1p2x=p12[0]
    l1p2y=p12[1]
    
    # equate the first line in 2d space
    ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)
    
    # b = y - mx
    bl1 = l1p1y - ml1 * l1p1x
    
    # get the raw points from the second line
    l2p1x=p21[0]
    l2p1y=p21[1]
    l2p2x=p22[0]
    l2p2y=p22[1]
    
    # equate the second line in 2d space
    ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)
    
    # b = y - mx
    bl2 = l2p1y - ml2 * l2p1x
    
    
    # find the intersection of the two lines
    # m1x+b1 = m2x+b2
    # m1x - m2x = b2 - b1
    # x = (b2-b1) / (m1-m2)
    xintersect = (bl2-bl1) / (ml1-ml2)
    yintersect = ml1 * xintersect + bl1
    
    
    # find locations 8 inches away from  intersect point
    # CONST
    welddistance = 8
    roundoverdistance = .25
    zup = .375
    # inches
    wd = welddistance * 25.4 / 1000
    rod = roundoverdistance * 25.4 / 1000
    zup = zup * 25.4 / 1000
    
    #define a vector from the intersection to the second point on the first line
    l1delxfull = l1p2x - xintersect
    l1delyfull = l1p2y - yintersect
    
    l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)
    
    l1delxunit = l1delxfull / l1delmag
    l1delyunit = l1delyfull / l1delmag
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l1delxunit * wd
    y = yintersect + l1delyunit * wd
    z = zcoord + zup
    
    point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now
    
    x = xintersect + l1delxunit * rod
    y = yintersect + l1delyunit * rod
    
    point2 = p[x,y,z,1.570796,0,0]
    
    #define a vector from the intersection to the second point on the second line
    l2delxfull = l2p2x - xintersect
    l2delyfull = l2p2y - yintersect
    
    l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)
    
    l2delxunit = l2delxfull / l2delmag
    l2delyunit = l2delyfull / l2delmag
    
    # now we have the unit vector. extend the weld distance from the intersection
    x = xintersect + l2delxunit * wd
    y = yintersect + l2delyunit * wd
    
    point4 = p[x,y,z,0,-1.570796,0]
    
    x = xintersect + l2delxunit * rod
    y = yintersect + l2delyunit * rod
    
    point3 = p[x,y,z,0,-1.570796,0]
    
    
    # the orthogonal direction 1 IS the vector direction 2 (and vice versa)
    
    # but for now, just use orthogonal angles
    
    
    
    
    
    
  end
  def align_tcp_left():
    $ 122 "align_tcp_left" "noBreak"
    $ 123 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 124 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 125 "aligned_y_pose≔p[cp[0],cp[1],cp[2],1.570796,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],1.570796,0,0]
    $ 126 "MoveJ"
    $ 127 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_up():
    $ 128 "align_tcp_up" "noBreak"
    $ 129 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 130 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 131 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,0,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,0,0]
    $ 132 "MoveJ"
    $ 133 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  def align_tcp_forward():
    $ 134 "align_tcp_forward" "noBreak"
    $ 135 "'this program aligns the tcp parallel to the y direction'"
    # 'this program aligns the tcp parallel to the y direction'
    $ 136 "cp≔get_actual_tcp_pose()"
    global cp= get_actual_tcp_pose ()
    $ 137 "aligned_y_pose≔p[cp[0],cp[1],cp[2],0,-1.570796,0]"
    global aligned_y_pose=p[cp[0],cp[1],cp[2],0,-1.570796,0]
    $ 138 "MoveJ"
    $ 139 "aligned_y_pose" "breakAfter"
    movej(aligned_y_pose, a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 140 "Thread_1"
  thread Thread_1():
    while (True):
      $ 141 "Loop  True "
      while (  True  ):
        $ 142 "If freedrive_m_var≟ True "
        if (freedrive_m_var ==   True  ):
          $ 143 "freedrive_mode()"
          freedrive_mode()
        else:
          $ 144 "Else" "noBreak"
          $ 145 "end_freedrive_mode()"
          end_freedrive_mode()
        end
        $ 146 "sync()"
        sync()
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 2 "Robot Program"
  $ 3 "Test_Teach_Position()"
  Test_Teach_Position()
  $ 4 "Corner_Homing_BRB()"
  Corner_Homing_BRB()
  $ 5 "extrude_knife()"
  extrude_knife()
  $ 6 "test_script_calcs2()"
  test_script_calcs2()
end
