def demo_sleeve_fillet_2():
  global _hidden_verificationVariable=0
  step_count_01f5a6c8_181f_4fb1_9154_f6521e7944d5 = 0.0
  thread Step_Counter_Thread_a78b00b5_ec02_47e9_9be0_237c01b12c36():
    while (True):
      step_count_01f5a6c8_181f_4fb1_9154_f6521e7944d5 = step_count_01f5a6c8_181f_4fb1_9154_f6521e7944d5 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_a78b00b5_ec02_47e9_9be0_237c01b12c36()
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_13_p=p[-1.410884291633, .263860565230, -.013194003109, -.205704646319, -2.274163200727, -.437826456749]
  global Waypoint_13_q=[-0.32482875983794823, -0.3687183527023272, 1.4846533230223213, -5.11520612171328, -1.3629318096159508, -3.2842223054808066]
  global Waypoint_10_p=p[-1.440646882522, .263860565271, -.048061979433, -.205704646319, -2.274163200726, -.437826456749]
  global Waypoint_10_q=[-0.31565399698584073, -0.3163549470243323, 1.4095539730424838, -5.0910461914622465, -1.368912934529627, -3.2912949757753664]
  global ViaPoint_3_p=p[-1.436981572481, .288422825303, -.164848694094, -1.298494713149, -1.349322996900, 1.808430596484]
  global ViaPoint_3_q=[-0.39094764391054326, -0.3160361808589478, 1.6891654173480433, -4.010433097878927, -2.2441208998309534, -1.1996501127826136]
  global EndPoint_2_p=p[-1.450470721571, .225502429836, -.193907191227, -1.329630226261, -.369739430589, 2.607723189742]
  global EndPoint_2_q=[-0.3886335531817835, -0.24338443697009282, 1.7102015654193323, -3.734796186486715, -1.611814324055807, -0.4481599966632288]
  global ViaPoint_4_p=p[-1.458059749689, .174728677295, -.155960686119, .985363099790, -.829722264614, -2.417452588345]
  global ViaPoint_4_q=[-0.3820560614215296, -0.18842227876696782, 1.6508997122394007, -3.7341095409789027, -0.7009089628802698, 0.11265262216329575]
  global EndPoint_3_p=p[-1.453173798613, .244553517354, -.053455649700, -.008114727821, -2.225325196728, -.436594641207]
  global EndPoint_3_q=[-0.35319263139833623, -0.6128959816745301, 1.901196304951803, -2.226532121697897, 1.2075334787368774, -0.03633147874941045]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_15_p=p[-1.407380776760, .244553517307, .007478427685, -.008114727820, -2.225325196731, -.436594641209]
  global Waypoint_15_q=[-0.3691086333782385, -0.7013310739716356, 1.9895993660378726, -2.2314527189569597, 1.198189490302425, -0.022542608318424584]
  global Waypoint_16_p=p[-1.318965781640, .244553517267, .007478427729, 1.058958647104, -2.110872036946, -.921011904321]
  global Waypoint_16_q=[-0.564465328037361, -0.746352841411726, 2.0497530000767696, -3.000311533025652, 0.20010701746951742, 0.7630713273774462]
  while (True):
    $ 2 "Robot Program"
    $ 3 "Set"
    set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
    $ 37 "full circle"
    $ 38 "MoveJ"
    $ 39 "Waypoint_13" "breakAfter"
    movej(get_inverse_kin(Waypoint_13_p, qnear=Waypoint_13_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 40 "MoveJ"
    $ 41 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(Waypoint_10_p, qnear=Waypoint_10_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 44 "MoveP"
    $ 45 "CircleMove"
    $ 46 "ViaPoint_3" "noBreak"
    
    $ 47 "EndPoint_2" "breakAfter"
    movec(ViaPoint_3_p, EndPoint_2_p, a=1.2, v=0.008, r=0.025, mode=1)
    $ 48 "CircleMove"
    $ 49 "ViaPoint_4" "noBreak"
    
    $ 50 "EndPoint_3" "breakAfter"
    movec(ViaPoint_4_p, EndPoint_3_p, a=1.2, v=0.008, r=0.025, mode=1)
    $ 51 "MoveL"
    $ 52 "Direction: Base"
    global move_thread_flag_52=0
    thread move_thread_52():
      enter_critical
      move_thread_flag_52 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [1.0,0.0,1.0], 0.1)
      movel(towardsPos, a=1.2, v=0.25)
      move_thread_flag_52 = 2
      exit_critical
    end
    move_thread_flag_52 = 0
    move_thread_han_52 = run move_thread_52()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_52 > 1):
        join move_thread_han_52
        $ 53 "Until (distance)"
        break
      end
      sync()
    end
    $ 54 "MoveJ"
    $ 55 "Waypoint_15" "breakAfter"
    movej(get_inverse_kin(Waypoint_15_p, qnear=Waypoint_15_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 56 "Waypoint_16" "breakAfter"
    movej(get_inverse_kin(Waypoint_16_p, qnear=Waypoint_16_q), a=1.3962634015954636, v=1.0471975511965976)
  end
end
