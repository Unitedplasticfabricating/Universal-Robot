def demo_str_weld():
  global _hidden_verificationVariable=0
  set_target_payload(10.450000, [0.000000, -0.064000, 0.064000], [0.076889, 0.076889, 0.076889, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_tcp(p[-0.00549,-0.328,0.10639,1.2092,-1.2092,1.2092])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  step_count_7393478c_19ed_4a23_b962_e5a59bc2a48f = 0.0
  thread Step_Counter_Thread_413e4332_13c7_4d3b_b794_219e6caf74ad():
    while (True):
      step_count_7393478c_19ed_4a23_b962_e5a59bc2a48f = step_count_7393478c_19ed_4a23_b962_e5a59bc2a48f + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_413e4332_13c7_4d3b_b794_219e6caf74ad()
  global Waypoint_1_p=p[.975940457008, .337572417282, .448793639656, 2.173113905648, 1.913519776559, .293459715093]
  global Waypoint_1_q=[-3.268883291875021, -1.2121440929225464, 1.5891125837909144, 1.1049455839344482, 0.0018625259399414062, -1.7886717955218714]
  global Waypoint_2_p=p[-.627533807382, .611185199240, .369514319547, .315743249503, -3.111166453316, -.180839795977]
  global Waypoint_2_q=[-1.3198969999896448, -1.5599553019604464, 1.9002931753741663, -0.3151610654643555, 0.04768593981862068, -0.1409981886493128]
  global Waypoint_3_p=p[-.832463738684, .611149915460, -.680239959195, .315735239623, -3.111175399276, -.180790844324]
  global Waypoint_3_q=[-1.0666430632220667, -0.3515471977046509, 1.9086387793170374, -1.5568983371234317, 0.30138084292411804, -0.11552030244936162]
  global Waypoint_4_p=p[-.832454128285, .200602269521, -.680249582563, .311321389311, 3.122920248732, -.002719956278]
  global Waypoint_4_q=[-0.5842331091510218, -0.2963157457164307, 2.233051602040426, -1.9346682033934535, 1.1847848892211914, 0.0021779374219477177]
  global Waypoint_5_p=p[-.883099858175, -.128367957927, -.963609331563, .311332238508, 3.122934489546, -.002726105576]
  global Waypoint_5_q=[-0.02276641527284795, 0.026228948230407667, 1.873030964528219, -1.8963571987547816, 1.7465006113052368, 0.003768597263842821]
  global Waypoint_6_p=p[-.886229137051, -.128449774304, -1.032867292865, -.311289988672, -3.126059201634, .003145858185]
  global Waypoint_6_q=[-0.022534672413961232, 0.10543064653363032, 1.785027329121725, -1.8908044300475062, 1.7465845346450806, 0.0038229278288781643]
  global Waypoint_7_p=p[-.787164030371, .524690515932, -1.032790217416, -.308310848911, -3.124617474297, -.000931419056]
  global Waypoint_7_q=[-1.0053332487689417, 0.08878688394512935, 1.729382340108053, -1.8240257702269496, 0.761959433555603, 0.005147797055542469]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  $ 2 "Robot Program"
  $ 3 "MoveJ"
  $ 4 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 5 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 6 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 7 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 8 "MoveJ"
  $ 9 "'approach'"
  # 'approach'
  $ 10 "Waypoint_5" "breakAfter"
  movej(get_inverse_kin(Waypoint_5_p, qnear=Waypoint_5_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 11 "MoveL"
  $ 12 "'start'"
  # 'start'
  $ 13 "Waypoint_6" "breakAfter"
  movel(Waypoint_6_p, a=1.2, v=0.05)
  $ 14 "Wait: 4.0"
  sleep(4.0)
  $ 15 "turn ext on"
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 16 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 17 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 18 "Wait: 1.0"
  sleep(1.0)
  $ 19 "MoveL"
  $ 20 "'end'"
  # 'end'
  $ 21 "Waypoint_7" "breakAfter"
  movel(Waypoint_7_p, a=1.2, v=0.01)
  $ 22 "turn ext off"
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 23 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 24 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 25 "Wait: 1.0"
  sleep(1.0)
  $ 26 "MoveL"
  $ 27 "Direction: Base Z+"
  global move_thread_flag_27=0
  thread move_thread_27():
    enter_critical
    move_thread_flag_27 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 0.2)
    movel(towardsPos, a=1.2, v=0.05)
    move_thread_flag_27 = 2
    exit_critical
  end
  move_thread_flag_27 = 0
  move_thread_han_27 = run move_thread_27()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_27 > 1):
      join move_thread_han_27
      $ 28 "Until (distance)"
      break
    end
    sync()
  end
  $ 29 "MoveJ"
  $ 30 "Waypoint_4" "breakAfter"
  movej(get_inverse_kin(Waypoint_4_p, qnear=Waypoint_4_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 31 "Waypoint_3" "breakAfter"
  movej(get_inverse_kin(Waypoint_3_p, qnear=Waypoint_3_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 32 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 33 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
end
