def demo_str_weld():
  global _hidden_verificationVariable=0
  step_count_4dc2b0b7_5b68_4d7f_9aff_86be30d73c24 = 0.0
  thread Step_Counter_Thread_b66f9ce8_830c_45bc_8ba8_a73ddb01a22e():
    while (True):
      step_count_4dc2b0b7_5b68_4d7f_9aff_86be30d73c24 = step_count_4dc2b0b7_5b68_4d7f_9aff_86be30d73c24 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_b66f9ce8_830c_45bc_8ba8_a73ddb01a22e()
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_target_payload(10.800000, [-0.001000, -0.053000, 0.068000], [0.081228, 0.081228, 0.081228, 0.000000, 0.000000, 0.000000])
  set_gravity([0.0, 0.0, 9.82])
  global robot_number=2
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global Point_2=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: UR Connect, 1.13.79, Universal Robots
  #   Type: UR Connect
  myurRPC = rpc_factory("xmlrpc","http://127.0.0.1:40474")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  WTSerialBridge = rpc_factory("xmlrpc","http://127.0.0.1:40511/RPC2")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-1.030164885532, -.110754634324, .454213239599, 1.683461671579, -2.410300122100, -.372489244017]
  global Waypoint_1_q=[-0.35401277016160826, -1.2139462677784527, 1.5878387874396154, 1.1069165929565097, -0.0023738326664366483, -1.7891447305770605]
  global Waypoint_2_p=p[-1.227598234704, .220265085274, .236167319485, .283179353874, 3.090027292373, .069748122096]
  global Waypoint_2_q=[-0.3526385466205042, -1.1869800847819825, 1.61772329012026, -0.3976321977427979, 1.4028925895690918, -0.05309898058046514]
  global Waypoint_38_p=p[-.987212486854, .220265085007, -.002697062245, -.287196148820, -3.124928710778, -.013273929308]
  global Waypoint_38_q=[-0.4864052975219044, -1.2517591453669858, 2.152959370837939, -0.9066143064702201, 1.2687913537404119, -0.006057070561904965]
  global Waypoint_56_p=p[-1.020608019390, .073095806720, -.108967304641, -.161694273354, -3.134211629432, -.014190664113]
  global Waypoint_56_q=[-0.31029950761995906, -1.1178076439830136, 2.173492270199826, -1.060291758347585, 1.3646915683371308, -0.007632497619636247]
  global Waypoint_57_p=p[-1.017692427985, .074382139397, -.152108883804, -.161211983157, -3.122246618816, -.019088594072]
  global Waypoint_57_q=[-0.31322503654960343, -1.0651007768797536, 2.196922682159375, -1.1487818986223735, 1.3617873841611674, -0.007674787359736257]
  global Waypoint_58_p=p[-.973975446036, .701326330493, -.149833904138, -.161211983159, -3.122246618828, -.019088594077]
  global Waypoint_58_q=[-0.9563189526178002, -0.9228586344547693, 1.8677039779491764, -0.9702575820982693, 0.7187968215940098, 0.007876824771288085]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  $ 2 "Robot Program"
  $ 3 "Set"
  set_tcp(p[-0.0095,-0.328,0.10573,1.2092,-1.2092,1.2092])
  $ 4 "MoveJ"
  $ 5 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
  $ 6 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 7 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 8 "MoveJ"
  $ 23 "Waypoint_38" "breakAfter"
  movej(get_inverse_kin(Waypoint_38_p, qnear=Waypoint_38_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 30 "Waypoint_56" "breakAfter"
  movej(get_inverse_kin(Waypoint_56_p, qnear=Waypoint_56_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 31 "MoveL"
  $ 52 "Waypoint_57" "breakAfter"
  movel(Waypoint_57_p, a=1.2, v=0.1)
  $ 53 "turn ext on"
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 54 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 55 "Serial Bridge uR1"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,49], False)
  # end: URCap Program Node
  $ 56 "Wait: 1.0"
  sleep(1.0)
  $ 58 "Set DO[0]=On"
  set_standard_digital_out(0, True)
  $ 59 "Wait: 1.0"
  sleep(1.0)
  $ 60 "MoveL"
  $ 78 "Waypoint_58" "breakAfter"
  movel(Waypoint_58_p, a=1.2, v=0.007)
  # begin: URCap Program Node
  #   Source: WireTank Serial, 4.9.0, WireTank, LLC
  #   Type: WireTank Serial
  $ 79 "Serial Bridge uR0"
  SerialResponse = WTSerialBridge.send_command("/dev/ttyUSB0",1200, 8, "None", "One", "None", 1000, "None", "None", [252,82,48], False)
  # end: URCap Program Node
  $ 80 "MoveL"
  $ 81 "Direction: Base Z+"
  global move_thread_flag_81=0
  thread move_thread_81():
    enter_critical
    move_thread_flag_81 = 1
    local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,1.0], 0.15)
    movel(towardsPos, a=1.2, v=0.25)
    move_thread_flag_81 = 2
    exit_critical
  end
  move_thread_flag_81 = 0
  move_thread_han_81 = run move_thread_81()
  while (True):
    sleep(1.0E-10)
    if (move_thread_flag_81 > 1):
      join move_thread_han_81
      $ 82 "Until (distance)"
      break
    end
    sync()
  end
  $ 83 "Set DO[0]=Off"
  set_standard_digital_out(0, False)
  $ 84 "MoveJ"
  $ 85 "Waypoint_2" "breakAfter"
  movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 86 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 87 "Home"
  movej([-3.266929759358355, -1.2139462677784536, 1.5878387874396154, 1.1069165929565088, -0.0023738326664366483, -1.7891447305770605], a=1.3962634015954636, v=1.0471975511965976)
end
