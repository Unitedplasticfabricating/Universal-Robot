def test_circ_motion():
  global _hidden_verificationVariable=0
  step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 = 0.0
  thread Step_Counter_Thread_1612d609_c27e_4fb2_a3a6_b8d1164a790d():
    while (True):
      step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 = step_count_39305044_0c16_4ec6_a48b_bb11e4ceb519 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_1612d609_c27e_4fb2_a3a6_b8d1164a790d()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.310000, [0.000000, 0.000000, 0.009500], [0.000219, 0.000219, 0.000219, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.0,0.0,0.019,0.0,0.0,0.0])
  global Point_1=p[0.0,0.0,0.0,0.0,0.0,0.0]
  # begin: URCap Installation Node
  #   Source: MachineLogic for Universal Robots, 3.1.7, Vention Inc.
  #   Type: MachineLogic for Universal Robots
  def waitForResponse(expected_response_vention, cname_vention):
  response_vention = socket_read_string(cname_vention,timeout=15)
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  end
  def sendString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringNAck(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while(response_vention != expected_response_vention and response_vention != "nAck"):
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received",blocking=True)
  end
  end
  sleep(0.01)
  sync()
  end
  def sendStringWithTimeout(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=10)
  if(response_vention == "nAck"):
  popup("nAck received"+string_vention)
  end
  sleep(0.01)
  sync()
  end
  def pollString(string_vention, expected_response_vention, cname_vention):
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(1)
  socket_send_string(str_cat(string_vention,";"), cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def sendVariable(var_vention, data_vention, expected_response_vention, cname_vention):
  socket_set_var(var_vention, data_vention, cname_vention)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  while response_vention != expected_response_vention:
  sleep(0.01)
  response_vention = socket_read_string(cname_vention,timeout=15)
  if(response_vention == "nAck"):
  popup("nAck received")
  end
  end
  sleep(0.01)
  sync()
  end
  def intToString(integer_vention,cname_vention):
  stringFix=""
  multiplier_vention123=1
  if integer_vention<0:
  stringFix="-"
  multiplier_vention123=-1
  end
  socket_set_var("GetString",integer_vention*multiplier_vention123,cname_vention)
  string_vention=""
  while string_vention=="":
  sleep(0.01)
  string_vention=socket_read_string(cname_vention,timeout=15)
  end
  sleep(0.01)
  sync()
  string_vention=stringFix+string_vention
  return string_vention
  end
  string_vention=""
  isVentionMovementBusy = False
  isVentionParallelMovementSendingScript = False
  ventionThreadHandle = 1
  isVentionMovementBusyMachineMotion1 = False
  isVentionParallelMovementSendingScriptMachineMotion1 = False
  socket_vention = socket_open("192.168.3.52", 9999, "MachineMotion1")
  if socket_vention==False:
  popup("Check configuration, can't connect to MachineMotion")
  end
  waitForResponse("MachineMotion connection established", "MachineMotion1")
  sendString("isReady", "MachineMotion isReady = true", "MachineMotion1")
  sendStringWithTimeout("setURCapVersion2", "setURCapVersion loaded", "MachineMotion1")
  sendString("SET speed_v2 1000000", "Ack", "MachineMotion1")
  sendString("SET acceleration_v2 100000", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_microsteps_config 8", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_mechanical_gain_config_v2 150000.0", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_direction_config 1", "Ack", "MachineMotion1")
  sendString("SET de_axis_1_type_config Custom Actuator ", "Ack", "MachineMotion1")
  sendString("de_axis_1_config_exec", "Ack", "MachineMotion1")
  # end: URCap Installation Node
  global Waypoint_1_p=p[-.810726107124, .698393455769, -.008087227960, 1.570793380355, .000005125799, .000002570537]
  global Waypoint_1_q=[-0.9891846815692347, -0.5916178983500977, 1.4808362166034144, -0.8872691553882142, -0.9901812712298792, -0.0023348967181604507]
  global Waypoint_2_p=p[-.670488202564, .698404090728, -.008078633400, 1.570784477305, .000019470608, .000013134649]
  global Waypoint_2_q=[-1.096769158040182, -0.654697374706604, 1.6467841307269495, -0.990429238682129, -1.0977743307696741, -0.002060715352193654]
  global ViaPoint_1_p=p[-.623804809364, .643420168618, -.024461704992, .626841035473, -1.479576807741, .655970268937]
  global ViaPoint_1_q=[-1.2072785536395472, -0.35846908510241704, 1.8020933310138147, -4.581386228600973, 0.45743152499198914, 4.727595329284668]
  global Waypoint_3_p=p[-.625327498191, .583308818084, -.004460836310, .000008756959, -1.570792282337, -.000023098066]
  global Waypoint_3_q=[-1.184439484273092, -0.3845675748637696, 2.076181236897604, 1.4514247614094238, -0.3857463041888636, -1.5720561186419886]
  global Waypoint_4_p=p[-.625331507438, .455316925286, -.004462666322, .000047790800, -1.570775729554, -.000066392410]
  global Waypoint_4_q=[-1.1043928305255335, -0.3573836845210572, 2.201979462300436, 1.298206015224121, -0.465855900441305, -1.5718329588519495]
  $ 2 "Robot Program"
  $ 3 "MoveJ"
  $ 4 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
  $ 5 "MoveL"
  $ 6 "Waypoint_2" "breakAfter"
  movel(Waypoint_2_p, a=1.2, v=0.25)
  $ 7 "MoveP"
  $ 8 "CircleMove"
  $ 9 "ViaPoint_1" "noBreak"
  $ 10 "Waypoint_3" "breakAfter"
  movec(ViaPoint_1_p, Waypoint_3_p, a=1.2, v=0.25, r=0.0, mode=1)
  $ 11 "MoveL"
  $ 12 "Waypoint_4" "breakAfter"
  movel(Waypoint_4_p, a=1.2, v=0.25)
  $ 13 "MoveJ"
  $ 14 "Waypoint_1" "breakAfter"
  movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
end
