<URProgram name="test_script_calcs2" installation="default" installationRelativePath="default" directory="/programs" createdIn="5.14.5" lastSavedIn="5.14.5" robotSerialNumber="20236801216" createdInPolyscopeProgramVersion="2" lastSavedInPolycopeProgramVersion="2" crcValue="924418886">
  <kinematics status="LINEARIZED" validChecksum="true">
    <deltaTheta value="-1.4899131651953954E-7, -0.5163156704236374, 5.626292263290917, 1.173211441187188, 7.813190464889264E-7, -4.300337819590494E-7"/>
    <a value="-2.1311773410863242E-5, -0.748896650969478, -0.2818596402230846, -4.017768931271778E-5, -5.5248926104535545E-5, 0.0"/>
    <d value="0.23622484809471647, -424.08293337258226, -1564.6687202774174, 1988.9516200232913, 0.15909435754571752, 0.1538726401599885"/>
    <alpha value="1.5708436258517133, 0.001002489552312882, 3.374880014158008E-4, 1.571488190319432, -1.569996211212667, 0.0"/>
    <jointChecksum value="-1252576034, -1269366749, 685297201, -1257350671, -1278514167, -1281348999"/>
  </kinematics>
  <children>
    <InitVariablesNode/>
    <MainProgram runOnlyOnce="false" InitVariablesNode="false">
      <children>
        <Assignment valueSource="Expression">
          <variable name="point1" prefersPersistentValue="false" favourite="false">
            <initializeExpression/>
          </variable>
          <expression>
            <ExpressionToken token="get_actual_tcp_pose"/>
            <ExpressionChar character="("/>
            <ExpressionChar character=")"/>
          </expression>
        </Assignment>
        <Assignment valueSource="Expression">
          <variable name="point2" prefersPersistentValue="false" favourite="false">
            <initializeExpression/>
          </variable>
          <expression>
            <ExpressionToken token="get_actual_tcp_pose"/>
            <ExpressionChar character="("/>
            <ExpressionChar character=")"/>
          </expression>
        </Assignment>
        <Assignment valueSource="Expression">
          <variable name="point3" prefersPersistentValue="false" favourite="false">
            <initializeExpression/>
          </variable>
          <expression>
            <ExpressionToken token="get_actual_tcp_pose"/>
            <ExpressionChar character="("/>
            <ExpressionChar character=")"/>
          </expression>
        </Assignment>
        <Assignment valueSource="Expression">
          <variable name="point4" prefersPersistentValue="false" favourite="false">
            <initializeExpression/>
          </variable>
          <expression>
            <ExpressionToken token="get_actual_tcp_pose"/>
            <ExpressionChar character="("/>
            <ExpressionChar character=")"/>
          </expression>
        </Assignment>
        <Script type="File">
          <cachedContents># comment get the z
zcoord=p3[2]

# get the raw points from the first line
l1p1x=p11[0]
l1p1y=p11[1]
l1p2x=p12[0]
l1p2y=p12[1]

# equate the first line in 2d space
ml1 = (l1p2y-l1p1y) / (l1p2x-l1p1x)

# b = y - mx
bl1 = l1p1y - ml1 * l1p1x

# get the raw points from the second line
l2p1x=p21[0]
l2p1y=p21[1]
l2p2x=p22[0]
l2p2y=p22[1]

# equate the second line in 2d space
ml2 = (l2p2y-l2p1y) / (l2p2x-l2p1x)

# b = y - mx
bl2 = l2p1y - ml2 * l2p1x


# find the intersection of the two lines
# m1x+b1 = m2x+b2
# m1x - m2x = b2 - b1
# x = (b2-b1) / (m1-m2)
xintersect = (bl2-bl1) / (ml1-ml2)
yintersect = ml1 * xintersect + bl1


# find locations 8 inches away from  intersect point
# CONST
welddistance = 8
roundoverdistance = .25
zup = .375
# inches
wd = welddistance * 25.4 / 1000
rod = roundoverdistance * 25.4 / 1000
zup = zup * 25.4 / 1000

#define a vector from the intersection to the second point on the first line
l1delxfull = l1p2x - xintersect
l1delyfull = l1p2y - yintersect

l1delmag = sqrt(l1delxfull*l1delxfull + l1delyfull*l1delyfull)

l1delxunit = l1delxfull / l1delmag
l1delyunit = l1delyfull / l1delmag

# now we have the unit vector. extend the weld distance from the intersection
x = xintersect + l1delxunit * wd
y = yintersect + l1delyunit * wd
z = zcoord + zup

point1 = p[x,y,z,1.570796,0,0] # dummy orientation for now

x = xintersect + l1delxunit * rod
y = yintersect + l1delyunit * rod

point2 = p[x,y,z,1.570796,0,0]

#define a vector from the intersection to the second point on the second line
l2delxfull = l2p2x - xintersect
l2delyfull = l2p2y - yintersect

l2delmag = sqrt(l2delxfull*l2delxfull + l2delyfull*l2delyfull)

l2delxunit = l2delxfull / l2delmag
l2delyunit = l2delyfull / l2delmag

# now we have the unit vector. extend the weld distance from the intersection
x = xintersect + l2delxunit * wd
y = yintersect + l2delyunit * wd

point4 = p[x,y,z,0,-1.570796,0]

x = xintersect + l2delxunit * rod
y = yintersect + l2delyunit * rod

point3 = p[x,y,z,0,-1.570796,0]

pointintersect = p[xintersect,yintersect,zcoord,1.570796,0,0]
pointapproach1 = p[xintersect+0.1,yintersect+0.1,z,1.570796,0,0]
pointapproach2 = p[point1[0] + 0.1, point1[1], point1[2], point1[3], point1[4], point1[5]]


# the orthogonal direction 1 IS the vector direction 2 (and vice versa)

# but for now, just use orthogonal angles





</cachedContents>
          <file>/programs/analyze_touchpoints.script</file>
        </Script>
        <Script type="File">
          <cachedContents># this script actually moves the robot along the path
# for testing. no welder attached, no orientation decided

movej(pointapproach1, a=1.2, v=0.25)

movel(pointapproach2, a=1.2, v=0.25)

movel(point1, a=1.2, v=0.25)

movel(point2, a=1.2, v=0.25)

movel(point3, a=1.2, v=0.25)

movel(point4, a=1.2, v=0.25)

movel(pointapproach1, a=1.2, v=0.25)
</cachedContents>
          <file resolves-to="file">/programs/move_weld_brb.script</file>
        </Script>
      </children>
    </MainProgram>
  </children>
</URProgram>